
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b4  08013ca8  08013ca8  00023ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d5c  08015d5c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08015d5c  08015d5c  00025d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d64  08015d64  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d64  08015d64  00025d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d68  08015d68  00025d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015d6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030350  2**0
                  CONTENTS
 10 .bss          00006868  20000350  20000350  00030350  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006bb8  20006bb8  00030350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ace1  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006423  00000000  00000000  0005b061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  00061488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002258  00000000  00000000  000639a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a37e  00000000  00000000  00065c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002defc  00000000  00000000  0006ff7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6dd7  00000000  00000000  0009de7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00194c51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b144  00000000  00000000  00194ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013c90 	.word	0x08013c90

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	08013c90 	.word	0x08013c90

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <distance>:
	float X_up;
	int flag_up = 0, flag_down = 0, flag_start = 0, d = 0, score = 0, i = 0, sp;
	char X[10], Y[10], Z[10];

	int t0 = 0, t1 = 0, t2 = 0;
int distance (float x){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	int s;

	switch(i){
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <distance+0x1f8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	dc02      	bgt.n	8001030 <distance+0x18>
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <distance+0x20>
 800102e:	e009      	b.n	8001044 <distance+0x2c>
 8001030:	3b06      	subs	r3, #6
 8001032:	2b04      	cmp	r3, #4
 8001034:	d806      	bhi.n	8001044 <distance+0x2c>
 8001036:	e002      	b.n	800103e <distance+0x26>
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5: s = 1; break;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e005      	b.n	800104a <distance+0x32>
		case 6:
		case 7:
		case 8:
		case 9:
		case 10: s = 2; break;
 800103e:	2302      	movs	r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e002      	b.n	800104a <distance+0x32>
		case 11:
		case 12:
		case 13:
		case 14:
		default:s = 3; break;
 8001044:	2303      	movs	r3, #3
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	bf00      	nop
	}

	x = x / s;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001054:	edd7 6a01 	vldr	s13, [r7, #4]
 8001058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800105c:	edc7 7a01 	vstr	s15, [r7, #4]

	if (x <= 30) {return 20;}	//10
 8001060:	edd7 7a01 	vldr	s15, [r7, #4]
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d801      	bhi.n	8001076 <distance+0x5e>
 8001072:	2314      	movs	r3, #20
 8001074:	e0c6      	b.n	8001204 <distance+0x1ec>
	else if (x <= 60) {return 22;}	//11
 8001076:	edd7 7a01 	vldr	s15, [r7, #4]
 800107a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001214 <distance+0x1fc>
 800107e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d801      	bhi.n	800108c <distance+0x74>
 8001088:	2316      	movs	r3, #22
 800108a:	e0bb      	b.n	8001204 <distance+0x1ec>
	else if (x <= 90) {return 24;}	//12
 800108c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001090:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001218 <distance+0x200>
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d801      	bhi.n	80010a2 <distance+0x8a>
 800109e:	2318      	movs	r3, #24
 80010a0:	e0b0      	b.n	8001204 <distance+0x1ec>
	else if (x <= 120) {return 26;}	//13
 80010a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800121c <distance+0x204>
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d801      	bhi.n	80010b8 <distance+0xa0>
 80010b4:	231a      	movs	r3, #26
 80010b6:	e0a5      	b.n	8001204 <distance+0x1ec>
	else if (x <= 150) {return 28;}	//14
 80010b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010bc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001220 <distance+0x208>
 80010c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	d801      	bhi.n	80010ce <distance+0xb6>
 80010ca:	231c      	movs	r3, #28
 80010cc:	e09a      	b.n	8001204 <distance+0x1ec>
	else if (x <= 180) {return 30;}	//15
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001224 <distance+0x20c>
 80010d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	d801      	bhi.n	80010e4 <distance+0xcc>
 80010e0:	231e      	movs	r3, #30
 80010e2:	e08f      	b.n	8001204 <distance+0x1ec>
	else if (x <= 210) {return 32;}	//16
 80010e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001228 <distance+0x210>
 80010ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d801      	bhi.n	80010fa <distance+0xe2>
 80010f6:	2320      	movs	r3, #32
 80010f8:	e084      	b.n	8001204 <distance+0x1ec>
	else if (x <= 240) {return 34;}	//17
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800122c <distance+0x214>
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d801      	bhi.n	8001110 <distance+0xf8>
 800110c:	2322      	movs	r3, #34	; 0x22
 800110e:	e079      	b.n	8001204 <distance+0x1ec>
	else if (x <= 270) {return 36;}	//18
 8001110:	edd7 7a01 	vldr	s15, [r7, #4]
 8001114:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001230 <distance+0x218>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d801      	bhi.n	8001126 <distance+0x10e>
 8001122:	2324      	movs	r3, #36	; 0x24
 8001124:	e06e      	b.n	8001204 <distance+0x1ec>
	else if (x <= 300) {return 40;}	//20
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001234 <distance+0x21c>
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d801      	bhi.n	800113c <distance+0x124>
 8001138:	2328      	movs	r3, #40	; 0x28
 800113a:	e063      	b.n	8001204 <distance+0x1ec>
	else if (x <= 330) {return 44;}	//22
 800113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001140:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001238 <distance+0x220>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d801      	bhi.n	8001152 <distance+0x13a>
 800114e:	232c      	movs	r3, #44	; 0x2c
 8001150:	e058      	b.n	8001204 <distance+0x1ec>
	else if (x <= 360) {return 48;}	//24
 8001152:	edd7 7a01 	vldr	s15, [r7, #4]
 8001156:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800123c <distance+0x224>
 800115a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d801      	bhi.n	8001168 <distance+0x150>
 8001164:	2330      	movs	r3, #48	; 0x30
 8001166:	e04d      	b.n	8001204 <distance+0x1ec>
    else if (x <= 390) {return 52;}	//26
 8001168:	edd7 7a01 	vldr	s15, [r7, #4]
 800116c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001240 <distance+0x228>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d801      	bhi.n	800117e <distance+0x166>
 800117a:	2334      	movs	r3, #52	; 0x34
 800117c:	e042      	b.n	8001204 <distance+0x1ec>
    else if (x <= 420) {return 56;}	//28
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001244 <distance+0x22c>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	d801      	bhi.n	8001194 <distance+0x17c>
 8001190:	2338      	movs	r3, #56	; 0x38
 8001192:	e037      	b.n	8001204 <distance+0x1ec>
    else if (x <= 450) {return 60;}	//30
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001248 <distance+0x230>
 800119c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d801      	bhi.n	80011aa <distance+0x192>
 80011a6:	233c      	movs	r3, #60	; 0x3c
 80011a8:	e02c      	b.n	8001204 <distance+0x1ec>
    else if (x <= 480) {return 64;}	//32
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800124c <distance+0x234>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d801      	bhi.n	80011c0 <distance+0x1a8>
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	e021      	b.n	8001204 <distance+0x1ec>
    else if (x <= 510) {return 68;}	//34
 80011c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001250 <distance+0x238>
 80011c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d801      	bhi.n	80011d6 <distance+0x1be>
 80011d2:	2344      	movs	r3, #68	; 0x44
 80011d4:	e016      	b.n	8001204 <distance+0x1ec>
    else if (x <= 540) {return 72;}	//36
 80011d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011da:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001254 <distance+0x23c>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d801      	bhi.n	80011ec <distance+0x1d4>
 80011e8:	2348      	movs	r3, #72	; 0x48
 80011ea:	e00b      	b.n	8001204 <distance+0x1ec>
    else if (x <= 570) {return 76;}	//38
 80011ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001258 <distance+0x240>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d801      	bhi.n	8001202 <distance+0x1ea>
 80011fe:	234c      	movs	r3, #76	; 0x4c
 8001200:	e000      	b.n	8001204 <distance+0x1ec>
    else {return 80;}	//40
 8001202:	2350      	movs	r3, #80	; 0x50
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000390 	.word	0x20000390
 8001214:	42700000 	.word	0x42700000
 8001218:	42b40000 	.word	0x42b40000
 800121c:	42f00000 	.word	0x42f00000
 8001220:	43160000 	.word	0x43160000
 8001224:	43340000 	.word	0x43340000
 8001228:	43520000 	.word	0x43520000
 800122c:	43700000 	.word	0x43700000
 8001230:	43870000 	.word	0x43870000
 8001234:	43960000 	.word	0x43960000
 8001238:	43a50000 	.word	0x43a50000
 800123c:	43b40000 	.word	0x43b40000
 8001240:	43c30000 	.word	0x43c30000
 8001244:	43d20000 	.word	0x43d20000
 8001248:	43e10000 	.word	0x43e10000
 800124c:	43f00000 	.word	0x43f00000
 8001250:	43ff0000 	.word	0x43ff0000
 8001254:	44070000 	.word	0x44070000
 8001258:	440e8000 	.word	0x440e8000

0800125c <speed>:

int speed(float x){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	ed87 0a01 	vstr	s0, [r7, #4]

	if (x <= 30) {return 100;}	//10
 8001266:	edd7 7a01 	vldr	s15, [r7, #4]
 800126a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d801      	bhi.n	800127c <speed+0x20>
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	e037      	b.n	80012ec <speed+0x90>
	else if (x <= 120) {return 90;}	//13
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012f8 <speed+0x9c>
 8001284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d801      	bhi.n	8001292 <speed+0x36>
 800128e:	235a      	movs	r3, #90	; 0x5a
 8001290:	e02c      	b.n	80012ec <speed+0x90>
	else if (x <= 210) {return 80;}	//16
 8001292:	edd7 7a01 	vldr	s15, [r7, #4]
 8001296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012fc <speed+0xa0>
 800129a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d801      	bhi.n	80012a8 <speed+0x4c>
 80012a4:	2350      	movs	r3, #80	; 0x50
 80012a6:	e021      	b.n	80012ec <speed+0x90>
	else if (x <= 300) {return 70;}	//20
 80012a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001300 <speed+0xa4>
 80012b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d801      	bhi.n	80012be <speed+0x62>
 80012ba:	2346      	movs	r3, #70	; 0x46
 80012bc:	e016      	b.n	80012ec <speed+0x90>
    else if (x <= 390) {return 60;}	//26
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001304 <speed+0xa8>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d801      	bhi.n	80012d4 <speed+0x78>
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	e00b      	b.n	80012ec <speed+0x90>
    else if (x <= 480) {return 50;}	//32
 80012d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001308 <speed+0xac>
 80012dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	d801      	bhi.n	80012ea <speed+0x8e>
 80012e6:	2332      	movs	r3, #50	; 0x32
 80012e8:	e000      	b.n	80012ec <speed+0x90>
    else {return 40;}	//40
 80012ea:	2328      	movs	r3, #40	; 0x28
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	42f00000 	.word	0x42f00000
 80012fc:	43520000 	.word	0x43520000
 8001300:	43960000 	.word	0x43960000
 8001304:	43c30000 	.word	0x43c30000
 8001308:	43f00000 	.word	0x43f00000

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f002 fbac 	bl	8003a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f856 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  BSP_SDRAM_Init();
 8001318:	f002 f9de 	bl	80036d8 <BSP_SDRAM_Init>
  MX_GPIO_Init();
 800131c:	f000 f8be 	bl	800149c <MX_GPIO_Init>
  BSP_GYRO_Init();
 8001320:	f001 fb14 	bl	800294c <BSP_GYRO_Init>
  MX_USB_DEVICE_Init();
 8001324:	f00d faf8 	bl	800e918 <MX_USB_DEVICE_Init>
          /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8001328:	f001 fb76 	bl	8002a18 <BSP_LCD_Init>
          //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 800132c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fbf3 	bl	8002b1c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fc54 	bl	8002be4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 800133c:	f001 ffce 	bl	80032dc <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <main+0x8c>)
 8001342:	f001 fcc1 	bl	8002cc8 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <main+0x8c>)
 8001348:	f001 fc74 	bl	8002c34 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f001 fc58 	bl	8002c04 <BSP_LCD_SetTextColor>

  /* USER CODE BEGIN 2 */
  CDC_Transmit_HS((uint8_t*)"Chieu cao bong:\n", 17);
 8001354:	2111      	movs	r1, #17
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <main+0x90>)
 8001358:	f00d fb9c 	bl	800ea94 <CDC_Transmit_HS>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800135c:	f008 fdc4 	bl	8009ee8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task0 */
  Task0Handle = osThreadNew(StartTask0, NULL, &Task0_attributes);
 8001360:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <main+0x94>)
 8001362:	2100      	movs	r1, #0
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <main+0x98>)
 8001366:	f008 fe09 	bl	8009f7c <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <main+0x9c>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <main+0xa0>)
 8001372:	2100      	movs	r1, #0
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <main+0xa4>)
 8001376:	f008 fe01 	bl	8009f7c <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <main+0xa8>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <main+0xac>)
 8001382:	2100      	movs	r1, #0
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <main+0xb0>)
 8001386:	f008 fdf9 	bl	8009f7c <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <main+0xb4>)
 800138e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001390:	f008 fdce 	bl	8009f30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x88>
 8001396:	bf00      	nop
 8001398:	ff0000ff 	.word	0xff0000ff
 800139c:	08013cc0 	.word	0x08013cc0
 80013a0:	08013d74 	.word	0x08013d74
 80013a4:	08001509 	.word	0x08001509
 80013a8:	2000036c 	.word	0x2000036c
 80013ac:	08013d98 	.word	0x08013d98
 80013b0:	08001755 	.word	0x08001755
 80013b4:	20000370 	.word	0x20000370
 80013b8:	08013dbc 	.word	0x08013dbc
 80013bc:	080017a5 	.word	0x080017a5
 80013c0:	20000374 	.word	0x20000374

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	; 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00d fff4 	bl	800f3c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <SystemClock_Config+0xd0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <SystemClock_Config+0xd0>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <SystemClock_Config+0xd0>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <SystemClock_Config+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <SystemClock_Config+0xd4>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <SystemClock_Config+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001434:	2308      	movs	r3, #8
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001438:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001442:	2307      	movs	r3, #7
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	4618      	mov	r0, r3
 800144c:	f004 ffc6 	bl	80063dc <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001456:	f000 fa63 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001466:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2105      	movs	r1, #5
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fa27 	bl	80068cc <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001484:	f000 fa4c 	bl	8001920 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001488:	f005 fb06 	bl	8006a98 <HAL_RCC_EnableCSS>
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_GPIO_Init+0x68>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <MX_GPIO_Init+0x68>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_GPIO_Init+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_GPIO_Init+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <MX_GPIO_Init+0x68>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_GPIO_Init+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_GPIO_Init+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <MX_GPIO_Init+0x68>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_GPIO_Init+0x68>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <StartTask0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask0 */
void StartTask0(void *argument)
{
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(d >= 20 && flag_down == 0){
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <StartTask0+0x220>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b13      	cmp	r3, #19
 8001518:	dd11      	ble.n	800153e <StartTask0+0x36>
 800151a:	4b84      	ldr	r3, [pc, #528]	; (800172c <StartTask0+0x224>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <StartTask0+0x36>
		  i++;
 8001522:	4b83      	ldr	r3, [pc, #524]	; (8001730 <StartTask0+0x228>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a81      	ldr	r2, [pc, #516]	; (8001730 <StartTask0+0x228>)
 800152a:	6013      	str	r3, [r2, #0]
		  if(i == d){flag_down = 1;}
 800152c:	4b80      	ldr	r3, [pc, #512]	; (8001730 <StartTask0+0x228>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <StartTask0+0x220>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d102      	bne.n	800153e <StartTask0+0x36>
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <StartTask0+0x224>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_down == 1){
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <StartTask0+0x224>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d117      	bne.n	8001576 <StartTask0+0x6e>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001546:	487b      	ldr	r0, [pc, #492]	; (8001734 <StartTask0+0x22c>)
 8001548:	f001 fbbe 	bl	8002cc8 <BSP_LCD_Clear>
		  BSP_LCD_FillCircle(120, 150, d + 20);
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <StartTask0+0x220>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	3314      	adds	r3, #20
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	2196      	movs	r1, #150	; 0x96
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f001 fe1e 	bl	800319c <BSP_LCD_FillCircle>
		  d--;
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <StartTask0+0x220>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a70      	ldr	r2, [pc, #448]	; (8001728 <StartTask0+0x220>)
 8001568:	6013      	str	r3, [r2, #0]
		  i--;
 800156a:	4b71      	ldr	r3, [pc, #452]	; (8001730 <StartTask0+0x228>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a6f      	ldr	r2, [pc, #444]	; (8001730 <StartTask0+0x228>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e009      	b.n	800158a <StartTask0+0x82>
	  }
	  else{
		  BSP_LCD_FillCircle(120, 150, i + 20);
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <StartTask0+0x228>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	3314      	adds	r3, #20
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	2196      	movs	r1, #150	; 0x96
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f001 fe09 	bl	800319c <BSP_LCD_FillCircle>
	  }

	  sprintf(X,"Score: %d", score);
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <StartTask0+0x230>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	496a      	ldr	r1, [pc, #424]	; (800173c <StartTask0+0x234>)
 8001592:	486b      	ldr	r0, [pc, #428]	; (8001740 <StartTask0+0x238>)
 8001594:	f00e fd9c 	bl	80100d0 <siprintf>
	  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 8001598:	4969      	ldr	r1, [pc, #420]	; (8001740 <StartTask0+0x238>)
 800159a:	2000      	movs	r0, #0
 800159c:	f001 fcbe 	bl	8002f1c <BSP_LCD_DisplayStringAtLine>

	  if (flag_down == 0){
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <StartTask0+0x224>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 80ba 	bne.w	800171e <StartTask0+0x216>
		  if (i <= (d - d*0.375)) {osDelay(sp * 0.375);}
 80015aa:	4b61      	ldr	r3, [pc, #388]	; (8001730 <StartTask0+0x228>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffc8 	bl	8000544 <__aeabi_i2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <StartTask0+0x220>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffc1 	bl	8000544 <__aeabi_i2d>
 80015c2:	4680      	mov	r8, r0
 80015c4:	4689      	mov	r9, r1
 80015c6:	4b58      	ldr	r3, [pc, #352]	; (8001728 <StartTask0+0x220>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffba 	bl	8000544 <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <StartTask0+0x23c>)
 80015d6:	f7ff f81f 	bl	8000618 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4640      	mov	r0, r8
 80015e0:	4649      	mov	r1, r9
 80015e2:	f7fe fe61 	bl	80002a8 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7ff fa8f 	bl	8000b10 <__aeabi_dcmple>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d014      	beq.n	8001622 <StartTask0+0x11a>
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <StartTask0+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffa1 	bl	8000544 <__aeabi_i2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <StartTask0+0x23c>)
 8001608:	f7ff f806 	bl	8000618 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fad8 	bl	8000bc8 <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f008 fd40 	bl	800a0a0 <osDelay>
 8001620:	e777      	b.n	8001512 <StartTask0+0xa>
		  else if (i <= (d - d*0.75)) {osDelay(sp * 0.75);}
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <StartTask0+0x228>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8c 	bl	8000544 <__aeabi_i2d>
 800162c:	4604      	mov	r4, r0
 800162e:	460d      	mov	r5, r1
 8001630:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <StartTask0+0x220>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff85 	bl	8000544 <__aeabi_i2d>
 800163a:	4680      	mov	r8, r0
 800163c:	4689      	mov	r9, r1
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <StartTask0+0x220>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff7e 	bl	8000544 <__aeabi_i2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <StartTask0+0x244>)
 800164e:	f7fe ffe3 	bl	8000618 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe25 	bl	80002a8 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff fa53 	bl	8000b10 <__aeabi_dcmple>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <StartTask0+0x192>
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <StartTask0+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff65 	bl	8000544 <__aeabi_i2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <StartTask0+0x244>)
 8001680:	f7fe ffca 	bl	8000618 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa9c 	bl	8000bc8 <__aeabi_d2uiz>
 8001690:	4603      	mov	r3, r0
 8001692:	4618      	mov	r0, r3
 8001694:	f008 fd04 	bl	800a0a0 <osDelay>
 8001698:	e73b      	b.n	8001512 <StartTask0+0xa>
		  else if (i <= (d - d*0.875)) {osDelay(sp * 0.875);}
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <StartTask0+0x228>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff50 	bl	8000544 <__aeabi_i2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <StartTask0+0x220>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff49 	bl	8000544 <__aeabi_i2d>
 80016b2:	4680      	mov	r8, r0
 80016b4:	4689      	mov	r9, r1
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <StartTask0+0x220>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff42 	bl	8000544 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <StartTask0+0x248>)
 80016c6:	f7fe ffa7 	bl	8000618 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4640      	mov	r0, r8
 80016d0:	4649      	mov	r1, r9
 80016d2:	f7fe fde9 	bl	80002a8 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff fa17 	bl	8000b10 <__aeabi_dcmple>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d014      	beq.n	8001712 <StartTask0+0x20a>
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <StartTask0+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff29 	bl	8000544 <__aeabi_i2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <StartTask0+0x248>)
 80016f8:	f7fe ff8e 	bl	8000618 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa60 	bl	8000bc8 <__aeabi_d2uiz>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 fcc8 	bl	800a0a0 <osDelay>
 8001710:	e6ff      	b.n	8001512 <StartTask0+0xa>
		  else {osDelay(sp);}
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <StartTask0+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f008 fcc2 	bl	800a0a0 <osDelay>
 800171c:	e6f9      	b.n	8001512 <StartTask0+0xa>
	  }
	  else{
		  osDelay(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f008 fcbe 	bl	800a0a0 <osDelay>
	  if(d >= 20 && flag_down == 0){
 8001724:	e6f5      	b.n	8001512 <StartTask0+0xa>
 8001726:	bf00      	nop
 8001728:	20000388 	.word	0x20000388
 800172c:	20000380 	.word	0x20000380
 8001730:	20000390 	.word	0x20000390
 8001734:	ff0000ff 	.word	0xff0000ff
 8001738:	2000038c 	.word	0x2000038c
 800173c:	08013cd4 	.word	0x08013cd4
 8001740:	20000398 	.word	0x20000398
 8001744:	3fd80000 	.word	0x3fd80000
 8001748:	20000394 	.word	0x20000394
 800174c:	3fe80000 	.word	0x3fe80000
 8001750:	3fec0000 	.word	0x3fec0000

08001754 <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	char U[2];
	int u;
  /* Infinite loop */
  for(;;)
  {
	  u = i / 2;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <StartTask1+0x44>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0fda      	lsrs	r2, r3, #31
 8001762:	4413      	add	r3, r2
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
	  sprintf(U, "%d", u);
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	490b      	ldr	r1, [pc, #44]	; (800179c <StartTask1+0x48>)
 8001770:	4618      	mov	r0, r3
 8001772:	f00e fcad 	bl	80100d0 <siprintf>

	  CDC_Transmit_HS((uint8_t*)U, 2);
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2102      	movs	r1, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f00d f989 	bl	800ea94 <CDC_Transmit_HS>
	  HAL_Delay(20);
 8001782:	2014      	movs	r0, #20
 8001784:	f002 f9b4 	bl	8003af0 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" cm\n", 5);
 8001788:	2105      	movs	r1, #5
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <StartTask1+0x4c>)
 800178c:	f00d f982 	bl	800ea94 <CDC_Transmit_HS>
	  osDelay(200);
 8001790:	20c8      	movs	r0, #200	; 0xc8
 8001792:	f008 fc85 	bl	800a0a0 <osDelay>
	  u = i / 2;
 8001796:	e7e1      	b.n	800175c <StartTask1+0x8>
 8001798:	20000390 	.word	0x20000390
 800179c:	08013ce0 	.word	0x08013ce0
 80017a0:	08013ce4 	.word	0x08013ce4

080017a4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	float DATA[3] = {0};
 80017ac:	f107 030c 	add.w	r3, r7, #12
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(DATA);
 80017b8:	f107 030c 	add.w	r3, r7, #12
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fd77 	bl	80022b0 <L3GD20_ReadXYZAngRate>

	  if (d < 15){
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <StartTask2+0x124>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b0e      	cmp	r3, #14
 80017c8:	dc79      	bgt.n	80018be <StartTask2+0x11a>
		  if (DATA[0] >= 30){
 80017ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ce:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80017d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	db0f      	blt.n	80017fc <StartTask2+0x58>
			  if (DATA[0] > X_up) X_up = DATA[0];
 80017dc:	ed97 7a03 	vldr	s14, [r7, #12]
 80017e0:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <StartTask2+0x128>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	dd02      	ble.n	80017f6 <StartTask2+0x52>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4a36      	ldr	r2, [pc, #216]	; (80018cc <StartTask2+0x128>)
 80017f4:	6013      	str	r3, [r2, #0]
			  flag_up = 1;
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <StartTask2+0x12c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
		  }

		  if (-30 <= DATA[0] && DATA[0] <= 30 && flag_up == 1){
 80017fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001800:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8001804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180c:	db32      	blt.n	8001874 <StartTask2+0xd0>
 800180e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001812:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001816:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181e:	d829      	bhi.n	8001874 <StartTask2+0xd0>
 8001820:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <StartTask2+0x12c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d125      	bne.n	8001874 <StartTask2+0xd0>
			  d = distance(X_up);
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <StartTask2+0x128>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	eeb0 0a67 	vmov.f32	s0, s15
 8001832:	f7ff fbf1 	bl	8001018 <distance>
 8001836:	4603      	mov	r3, r0
 8001838:	4a23      	ldr	r2, [pc, #140]	; (80018c8 <StartTask2+0x124>)
 800183a:	6013      	str	r3, [r2, #0]
			  sp = speed(X_up);
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <StartTask2+0x128>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eeb0 0a67 	vmov.f32	s0, s15
 8001846:	f7ff fd09 	bl	800125c <speed>
 800184a:	4603      	mov	r3, r0
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <StartTask2+0x130>)
 800184e:	6013      	str	r3, [r2, #0]
			  if(flag_start == 1){score++;}
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <StartTask2+0x134>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d104      	bne.n	8001862 <StartTask2+0xbe>
 8001858:	4b20      	ldr	r3, [pc, #128]	; (80018dc <StartTask2+0x138>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <StartTask2+0x138>)
 8001860:	6013      	str	r3, [r2, #0]

			  flag_up = 0;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <StartTask2+0x12c>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
			  flag_down = 0;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <StartTask2+0x13c>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
			  flag_start = 1;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <StartTask2+0x134>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]
		  }

		  if(d < 0){
 8001874:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <StartTask2+0x124>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	da20      	bge.n	80018be <StartTask2+0x11a>
			  BSP_LCD_Clear(LCD_COLOR_BLUE);
 800187c:	4819      	ldr	r0, [pc, #100]	; (80018e4 <StartTask2+0x140>)
 800187e:	f001 fa23 	bl	8002cc8 <BSP_LCD_Clear>
			  sprintf(X,"Score: %d", score);
 8001882:	4b16      	ldr	r3, [pc, #88]	; (80018dc <StartTask2+0x138>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	4917      	ldr	r1, [pc, #92]	; (80018e8 <StartTask2+0x144>)
 800188a:	4818      	ldr	r0, [pc, #96]	; (80018ec <StartTask2+0x148>)
 800188c:	f00e fc20 	bl	80100d0 <siprintf>
			  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <StartTask2+0x148>)
 8001892:	2000      	movs	r0, #0
 8001894:	f001 fb42 	bl	8002f1c <BSP_LCD_DisplayStringAtLine>
			  BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"GAME OVER!", CENTER_MODE);
 8001898:	2301      	movs	r3, #1
 800189a:	4a15      	ldr	r2, [pc, #84]	; (80018f0 <StartTask2+0x14c>)
 800189c:	2178      	movs	r1, #120	; 0x78
 800189e:	2000      	movs	r0, #0
 80018a0:	f001 fa7e 	bl	8002da0 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"Press reset", CENTER_MODE);
 80018a4:	2301      	movs	r3, #1
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <StartTask2+0x150>)
 80018a8:	21a0      	movs	r1, #160	; 0xa0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f001 fa78 	bl	8002da0 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 180, (uint8_t *)"button to play", RIGHT_MODE);
 80018b0:	2302      	movs	r3, #2
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <StartTask2+0x154>)
 80018b4:	21b4      	movs	r1, #180	; 0xb4
 80018b6:	2000      	movs	r0, #0
 80018b8:	f001 fa72 	bl	8002da0 <BSP_LCD_DisplayStringAt>
			  while(1);
 80018bc:	e7fe      	b.n	80018bc <StartTask2+0x118>
		  }
	  }
	  	osDelay(100);
 80018be:	2064      	movs	r0, #100	; 0x64
 80018c0:	f008 fbee 	bl	800a0a0 <osDelay>
	  L3GD20_ReadXYZAngRate(DATA);
 80018c4:	e778      	b.n	80017b8 <StartTask2+0x14>
 80018c6:	bf00      	nop
 80018c8:	20000388 	.word	0x20000388
 80018cc:	20000378 	.word	0x20000378
 80018d0:	2000037c 	.word	0x2000037c
 80018d4:	20000394 	.word	0x20000394
 80018d8:	20000384 	.word	0x20000384
 80018dc:	2000038c 	.word	0x2000038c
 80018e0:	20000380 	.word	0x20000380
 80018e4:	ff0000ff 	.word	0xff0000ff
 80018e8:	08013cd4 	.word	0x08013cd4
 80018ec:	20000398 	.word	0x20000398
 80018f0:	08013cec 	.word	0x08013cec
 80018f4:	08013cf8 	.word	0x08013cf8
 80018f8:	08013d04 	.word	0x08013d04

080018fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800190e:	f002 f8cf 	bl	8003ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40001000 	.word	0x40001000

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>
	...

0800192c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_MspInit+0x54>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <HAL_MspInit+0x54>)
 800193c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001940:	6453      	str	r3, [r2, #68]	; 0x44
 8001942:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_MspInit+0x54>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_MspInit+0x54>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_MspInit+0x54>)
 8001958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195c:	6413      	str	r3, [r2, #64]	; 0x40
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_MspInit+0x54>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	210f      	movs	r1, #15
 800196e:	f06f 0001 	mvn.w	r0, #1
 8001972:	f002 f999 	bl	8003ca8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800

08001984 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08e      	sub	sp, #56	; 0x38
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b33      	ldr	r3, [pc, #204]	; (8001a68 <HAL_InitTick+0xe4>)
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	4a32      	ldr	r2, [pc, #200]	; (8001a68 <HAL_InitTick+0xe4>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6413      	str	r3, [r2, #64]	; 0x40
 80019a4:	4b30      	ldr	r3, [pc, #192]	; (8001a68 <HAL_InitTick+0xe4>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	f003 0310 	and.w	r3, r3, #16
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019b0:	f107 0210 	add.w	r2, r7, #16
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f005 f99e 	bl	8006cfc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019ca:	f005 f983 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 80019ce:	6378      	str	r0, [r7, #52]	; 0x34
 80019d0:	e004      	b.n	80019dc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019d2:	f005 f97f 	bl	8006cd4 <HAL_RCC_GetPCLK1Freq>
 80019d6:	4603      	mov	r3, r0
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	4a23      	ldr	r2, [pc, #140]	; (8001a6c <HAL_InitTick+0xe8>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3b01      	subs	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019ea:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_InitTick+0xec>)
 80019ec:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_InitTick+0xf0>)
 80019ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80019f0:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <HAL_InitTick+0xec>)
 80019f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019f8:	4a1d      	ldr	r2, [pc, #116]	; (8001a70 <HAL_InitTick+0xec>)
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_InitTick+0xec>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <HAL_InitTick+0xec>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_InitTick+0xec>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a10:	4817      	ldr	r0, [pc, #92]	; (8001a70 <HAL_InitTick+0xec>)
 8001a12:	f006 fa0f 	bl	8007e34 <HAL_TIM_Base_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d11b      	bne.n	8001a5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a24:	4812      	ldr	r0, [pc, #72]	; (8001a70 <HAL_InitTick+0xec>)
 8001a26:	f006 fa5f 	bl	8007ee8 <HAL_TIM_Base_Start_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d111      	bne.n	8001a5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a38:	2036      	movs	r0, #54	; 0x36
 8001a3a:	f002 f951 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d808      	bhi.n	8001a56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a44:	2200      	movs	r2, #0
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	2036      	movs	r0, #54	; 0x36
 8001a4a:	f002 f92d 	bl	8003ca8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_InitTick+0xf4>)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e002      	b.n	8001a5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3738      	adds	r7, #56	; 0x38
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	431bde83 	.word	0x431bde83
 8001a70:	200003a4 	.word	0x200003a4
 8001a74:	40001000 	.word	0x40001000
 8001a78:	20000080 	.word	0x20000080

08001a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001a80:	f005 f96e 	bl	8006d60 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <NMI_Handler+0x8>

08001a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a8a:	e7fe      	b.n	8001a8a <HardFault_Handler+0x4>

08001a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a90:	e7fe      	b.n	8001a90 <MemManage_Handler+0x4>

08001a92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a96:	e7fe      	b.n	8001a96 <BusFault_Handler+0x4>

08001a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a9c:	e7fe      	b.n	8001a9c <UsageFault_Handler+0x4>

08001a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ab0:	4802      	ldr	r0, [pc, #8]	; (8001abc <TIM6_DAC_IRQHandler+0x10>)
 8001ab2:	f006 fa89 	bl	8007fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200003a4 	.word	0x200003a4

08001ac0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <OTG_HS_IRQHandler+0x10>)
 8001ac6:	f003 fb5c 	bl	8005182 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000647c 	.word	0x2000647c

08001ad4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
	return 1;
 8001ad8:	2301      	movs	r3, #1
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <_kill>:

int _kill(int pid, int sig)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aee:	f00d fc2f 	bl	800f350 <__errno>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2216      	movs	r2, #22
 8001af6:	601a      	str	r2, [r3, #0]
	return -1;
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_exit>:

void _exit (int status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff ffe7 	bl	8001ae4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b16:	e7fe      	b.n	8001b16 <_exit+0x12>

08001b18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e00a      	b.n	8001b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b2a:	f3af 8000 	nop.w
 8001b2e:	4601      	mov	r1, r0
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dbf0      	blt.n	8001b2a <_read+0x12>
	}

return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b086      	sub	sp, #24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	e009      	b.n	8001b78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	60ba      	str	r2, [r7, #8]
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3301      	adds	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	697a      	ldr	r2, [r7, #20]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	dbf1      	blt.n	8001b64 <_write+0x12>
	}
	return len;
 8001b80:	687b      	ldr	r3, [r7, #4]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_close>:

int _close(int file)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
	return -1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_isatty>:

int _isatty(int file)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001bca:	2301      	movs	r3, #1
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3714      	adds	r7, #20
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4a14      	ldr	r2, [pc, #80]	; (8001c50 <_sbrk+0x5c>)
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <_sbrk+0x60>)
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c08:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <_sbrk+0x64>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <_sbrk+0x68>)
 8001c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <_sbrk+0x64>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d207      	bcs.n	8001c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c24:	f00d fb94 	bl	800f350 <__errno>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c32:	e009      	b.n	8001c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <_sbrk+0x64>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <_sbrk+0x64>)
 8001c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c46:	68fb      	ldr	r3, [r7, #12]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20030000 	.word	0x20030000
 8001c54:	00000400 	.word	0x00000400
 8001c58:	200003ec 	.word	0x200003ec
 8001c5c:	20006bb8 	.word	0x20006bb8

08001c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c64:	4b06      	ldr	r3, [pc, #24]	; (8001c80 <SystemInit+0x20>)
 8001c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <SystemInit+0x20>)
 8001c6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c74:	bf00      	nop
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c8c:	4a0e      	ldr	r2, [pc, #56]	; (8001cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ca0:	4c0b      	ldr	r4, [pc, #44]	; (8001cd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cae:	f7ff ffd7 	bl	8001c60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f00d fb53 	bl	800f35c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb6:	f7ff fb29 	bl	800130c <main>
  bx  lr    
 8001cba:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cbc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001cc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001cc8:	08015d6c 	.word	0x08015d6c
  ldr r2, =_sbss
 8001ccc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001cd0:	20006bb8 	.word	0x20006bb8

08001cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC_IRQHandler>

08001cd6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001cda:	f000 fc85 	bl	80025e8 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001cde:	20ca      	movs	r0, #202	; 0xca
 8001ce0:	f000 f95d 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001ce4:	20c3      	movs	r0, #195	; 0xc3
 8001ce6:	f000 f967 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001cea:	2008      	movs	r0, #8
 8001cec:	f000 f964 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001cf0:	2050      	movs	r0, #80	; 0x50
 8001cf2:	f000 f961 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001cf6:	20cf      	movs	r0, #207	; 0xcf
 8001cf8:	f000 f951 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	f000 f95b 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d02:	20c1      	movs	r0, #193	; 0xc1
 8001d04:	f000 f958 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d08:	2030      	movs	r0, #48	; 0x30
 8001d0a:	f000 f955 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d0e:	20ed      	movs	r0, #237	; 0xed
 8001d10:	f000 f945 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d14:	2064      	movs	r0, #100	; 0x64
 8001d16:	f000 f94f 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f000 f94c 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d20:	2012      	movs	r0, #18
 8001d22:	f000 f949 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d26:	2081      	movs	r0, #129	; 0x81
 8001d28:	f000 f946 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d2c:	20e8      	movs	r0, #232	; 0xe8
 8001d2e:	f000 f936 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d32:	2085      	movs	r0, #133	; 0x85
 8001d34:	f000 f940 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f000 f93d 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001d3e:	2078      	movs	r0, #120	; 0x78
 8001d40:	f000 f93a 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001d44:	20cb      	movs	r0, #203	; 0xcb
 8001d46:	f000 f92a 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001d4a:	2039      	movs	r0, #57	; 0x39
 8001d4c:	f000 f934 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001d50:	202c      	movs	r0, #44	; 0x2c
 8001d52:	f000 f931 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f000 f92e 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001d5c:	2034      	movs	r0, #52	; 0x34
 8001d5e:	f000 f92b 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001d62:	2002      	movs	r0, #2
 8001d64:	f000 f928 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001d68:	20f7      	movs	r0, #247	; 0xf7
 8001d6a:	f000 f918 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001d6e:	2020      	movs	r0, #32
 8001d70:	f000 f922 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001d74:	20ea      	movs	r0, #234	; 0xea
 8001d76:	f000 f912 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f000 f91c 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f919 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001d86:	20b1      	movs	r0, #177	; 0xb1
 8001d88:	f000 f909 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f913 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001d92:	201b      	movs	r0, #27
 8001d94:	f000 f910 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001d98:	20b6      	movs	r0, #182	; 0xb6
 8001d9a:	f000 f900 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f000 f90a 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001da4:	20a2      	movs	r0, #162	; 0xa2
 8001da6:	f000 f907 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001daa:	20c0      	movs	r0, #192	; 0xc0
 8001dac:	f000 f8f7 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001db0:	2010      	movs	r0, #16
 8001db2:	f000 f901 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001db6:	20c1      	movs	r0, #193	; 0xc1
 8001db8:	f000 f8f1 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001dbc:	2010      	movs	r0, #16
 8001dbe:	f000 f8fb 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001dc2:	20c5      	movs	r0, #197	; 0xc5
 8001dc4:	f000 f8eb 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001dc8:	2045      	movs	r0, #69	; 0x45
 8001dca:	f000 f8f5 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001dce:	2015      	movs	r0, #21
 8001dd0:	f000 f8f2 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001dd4:	20c7      	movs	r0, #199	; 0xc7
 8001dd6:	f000 f8e2 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001dda:	2090      	movs	r0, #144	; 0x90
 8001ddc:	f000 f8ec 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001de0:	2036      	movs	r0, #54	; 0x36
 8001de2:	f000 f8dc 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001de6:	20c8      	movs	r0, #200	; 0xc8
 8001de8:	f000 f8e6 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001dec:	20f2      	movs	r0, #242	; 0xf2
 8001dee:	f000 f8d6 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001df2:	2000      	movs	r0, #0
 8001df4:	f000 f8e0 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001df8:	20b0      	movs	r0, #176	; 0xb0
 8001dfa:	f000 f8d0 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001dfe:	20c2      	movs	r0, #194	; 0xc2
 8001e00:	f000 f8da 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e04:	20b6      	movs	r0, #182	; 0xb6
 8001e06:	f000 f8ca 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f000 f8d4 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e10:	20a7      	movs	r0, #167	; 0xa7
 8001e12:	f000 f8d1 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e16:	2027      	movs	r0, #39	; 0x27
 8001e18:	f000 f8ce 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e1c:	2004      	movs	r0, #4
 8001e1e:	f000 f8cb 	bl	8001fb8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e22:	202a      	movs	r0, #42	; 0x2a
 8001e24:	f000 f8bb 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f8c5 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f8c2 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 f8bf 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001e3a:	20ef      	movs	r0, #239	; 0xef
 8001e3c:	f000 f8bc 	bl	8001fb8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001e40:	202b      	movs	r0, #43	; 0x2b
 8001e42:	f000 f8ac 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f8b6 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f000 f8b3 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f000 f8b0 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001e58:	203f      	movs	r0, #63	; 0x3f
 8001e5a:	f000 f8ad 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001e5e:	20f6      	movs	r0, #246	; 0xf6
 8001e60:	f000 f89d 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f000 f8a7 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f8a4 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001e70:	2006      	movs	r0, #6
 8001e72:	f000 f8a1 	bl	8001fb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001e76:	202c      	movs	r0, #44	; 0x2c
 8001e78:	f000 f891 	bl	8001f9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001e7c:	20c8      	movs	r0, #200	; 0xc8
 8001e7e:	f000 fca1 	bl	80027c4 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001e82:	2026      	movs	r0, #38	; 0x26
 8001e84:	f000 f88b 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001e88:	2001      	movs	r0, #1
 8001e8a:	f000 f895 	bl	8001fb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001e8e:	20e0      	movs	r0, #224	; 0xe0
 8001e90:	f000 f885 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001e94:	200f      	movs	r0, #15
 8001e96:	f000 f88f 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001e9a:	2029      	movs	r0, #41	; 0x29
 8001e9c:	f000 f88c 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001ea0:	2024      	movs	r0, #36	; 0x24
 8001ea2:	f000 f889 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001ea6:	200c      	movs	r0, #12
 8001ea8:	f000 f886 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001eac:	200e      	movs	r0, #14
 8001eae:	f000 f883 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001eb2:	2009      	movs	r0, #9
 8001eb4:	f000 f880 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001eb8:	204e      	movs	r0, #78	; 0x4e
 8001eba:	f000 f87d 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001ebe:	2078      	movs	r0, #120	; 0x78
 8001ec0:	f000 f87a 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ec4:	203c      	movs	r0, #60	; 0x3c
 8001ec6:	f000 f877 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001eca:	2009      	movs	r0, #9
 8001ecc:	f000 f874 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001ed0:	2013      	movs	r0, #19
 8001ed2:	f000 f871 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ed6:	2005      	movs	r0, #5
 8001ed8:	f000 f86e 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001edc:	2017      	movs	r0, #23
 8001ede:	f000 f86b 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ee2:	2011      	movs	r0, #17
 8001ee4:	f000 f868 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 f865 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001eee:	20e1      	movs	r0, #225	; 0xe1
 8001ef0:	f000 f855 	bl	8001f9e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f000 f85f 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001efa:	2016      	movs	r0, #22
 8001efc:	f000 f85c 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f00:	201b      	movs	r0, #27
 8001f02:	f000 f859 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f06:	2004      	movs	r0, #4
 8001f08:	f000 f856 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f0c:	2011      	movs	r0, #17
 8001f0e:	f000 f853 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f12:	2007      	movs	r0, #7
 8001f14:	f000 f850 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f18:	2031      	movs	r0, #49	; 0x31
 8001f1a:	f000 f84d 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f1e:	2033      	movs	r0, #51	; 0x33
 8001f20:	f000 f84a 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f24:	2042      	movs	r0, #66	; 0x42
 8001f26:	f000 f847 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f2a:	2005      	movs	r0, #5
 8001f2c:	f000 f844 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f30:	200c      	movs	r0, #12
 8001f32:	f000 f841 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f36:	200a      	movs	r0, #10
 8001f38:	f000 f83e 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001f3c:	2028      	movs	r0, #40	; 0x28
 8001f3e:	f000 f83b 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001f42:	202f      	movs	r0, #47	; 0x2f
 8001f44:	f000 f838 	bl	8001fb8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001f48:	200f      	movs	r0, #15
 8001f4a:	f000 f835 	bl	8001fb8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001f4e:	2011      	movs	r0, #17
 8001f50:	f000 f825 	bl	8001f9e <ili9341_WriteReg>
  LCD_Delay(200);
 8001f54:	20c8      	movs	r0, #200	; 0xc8
 8001f56:	f000 fc35 	bl	80027c4 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f5a:	2029      	movs	r0, #41	; 0x29
 8001f5c:	f000 f81f 	bl	8001f9e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001f60:	202c      	movs	r0, #44	; 0x2c
 8001f62:	f000 f81c 	bl	8001f9e <ili9341_WriteReg>
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001f6e:	f000 fb3b 	bl	80025e8 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001f72:	2103      	movs	r1, #3
 8001f74:	20d3      	movs	r0, #211	; 0xd3
 8001f76:	f000 f82c 	bl	8001fd2 <ili9341_ReadData>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b29b      	uxth	r3, r3
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001f86:	2029      	movs	r0, #41	; 0x29
 8001f88:	f000 f809 	bl	8001f9e <ili9341_WriteReg>
}
 8001f8c:	bf00      	nop
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001f94:	2028      	movs	r0, #40	; 0x28
 8001f96:	f000 f802 	bl	8001f9e <ili9341_WriteReg>
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b082      	sub	sp, #8
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fbb6 	bl	800271c <LCD_IO_WriteReg>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fb87 	bl	80026d8 <LCD_IO_WriteData>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	460a      	mov	r2, r1
 8001fdc:	80fb      	strh	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001fe2:	797a      	ldrb	r2, [r7, #5]
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fbb9 	bl	8002760 <LCD_IO_ReadData>
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001ffc:	23f0      	movs	r3, #240	; 0xf0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800200c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002028:	f000 fbd8 	bl	80027dc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 800202c:	88fb      	ldrh	r3, [r7, #6]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8002032:	f107 030f 	add.w	r3, r7, #15
 8002036:	2201      	movs	r2, #1
 8002038:	2120      	movs	r1, #32
 800203a:	4618      	mov	r0, r3
 800203c:	f000 fc1a 	bl	8002874 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	0a1b      	lsrs	r3, r3, #8
 8002044:	b29b      	uxth	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800204a:	f107 030f 	add.w	r3, r7, #15
 800204e:	2201      	movs	r2, #1
 8002050:	2123      	movs	r1, #35	; 0x23
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fc0e 	bl	8002874 <GYRO_IO_Write>
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002074:	f000 fbb2 	bl	80027dc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8002078:	1dfb      	adds	r3, r7, #7
 800207a:	2201      	movs	r2, #1
 800207c:	210f      	movs	r1, #15
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fc2a 	bl	80028d8 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8002084:	79fb      	ldrb	r3, [r7, #7]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	2201      	movs	r2, #1
 8002098:	2124      	movs	r1, #36	; 0x24
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fc1c 	bl	80028d8 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020aa:	1dfb      	adds	r3, r7, #7
 80020ac:	2201      	movs	r2, #1
 80020ae:	2124      	movs	r1, #36	; 0x24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f000 fbdf 	bl	8002874 <GYRO_IO_Write>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80020d2:	f107 030f 	add.w	r3, r7, #15
 80020d6:	2201      	movs	r2, #1
 80020d8:	2120      	movs	r1, #32
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fbca 	bl	8002874 <GYRO_IO_Write>
}
 80020e0:	bf00      	nop
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
 80020f6:	2300      	movs	r3, #0
 80020f8:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80020fa:	f107 030f 	add.w	r3, r7, #15
 80020fe:	2201      	movs	r2, #1
 8002100:	2130      	movs	r1, #48	; 0x30
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fbe8 	bl	80028d8 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002108:	f107 030e 	add.w	r3, r7, #14
 800210c:	2201      	movs	r2, #1
 800210e:	2122      	movs	r1, #34	; 0x22
 8002110:	4618      	mov	r0, r3
 8002112:	f000 fbe1 	bl	80028d8 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800211c:	b2db      	uxtb	r3, r3
 800211e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	121b      	asrs	r3, r3, #8
 8002126:	b25a      	sxtb	r2, r3
 8002128:	7bfb      	ldrb	r3, [r7, #15]
 800212a:	b25b      	sxtb	r3, r3
 800212c:	4313      	orrs	r3, r2
 800212e:	b25b      	sxtb	r3, r3
 8002130:	b2db      	uxtb	r3, r3
 8002132:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	f023 0320 	bic.w	r3, r3, #32
 800213a:	b2db      	uxtb	r3, r3
 800213c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	b2da      	uxtb	r2, r3
 8002142:	7bbb      	ldrb	r3, [r7, #14]
 8002144:	4313      	orrs	r3, r2
 8002146:	b2db      	uxtb	r3, r3
 8002148:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 800214a:	f107 030f 	add.w	r3, r7, #15
 800214e:	2201      	movs	r2, #1
 8002150:	2130      	movs	r1, #48	; 0x30
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fb8e 	bl	8002874 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002158:	f107 030e 	add.w	r3, r7, #14
 800215c:	2201      	movs	r2, #1
 800215e:	2122      	movs	r1, #34	; 0x22
 8002160:	4618      	mov	r0, r3
 8002162:	f000 fb87 	bl	8002874 <GYRO_IO_Write>
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002178:	f107 030f 	add.w	r3, r7, #15
 800217c:	2201      	movs	r2, #1
 800217e:	2122      	movs	r1, #34	; 0x22
 8002180:	4618      	mov	r0, r3
 8002182:	f000 fba9 	bl	80028d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10a      	bne.n	80021a2 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002192:	b2db      	uxtb	r3, r3
 8002194:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800219c:	b2db      	uxtb	r3, r3
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e00c      	b.n	80021bc <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d109      	bne.n	80021bc <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	f023 0308 	bic.w	r3, r3, #8
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021bc:	f107 030f 	add.w	r3, r7, #15
 80021c0:	2201      	movs	r2, #1
 80021c2:	2122      	movs	r1, #34	; 0x22
 80021c4:	4618      	mov	r0, r3
 80021c6:	f000 fb55 	bl	8002874 <GYRO_IO_Write>
}
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021dc:	f107 030f 	add.w	r3, r7, #15
 80021e0:	2201      	movs	r2, #1
 80021e2:	2122      	movs	r1, #34	; 0x22
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fb77 	bl	80028d8 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d107      	bne.n	8002200 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	73fb      	strb	r3, [r7, #15]
 80021fe:	e009      	b.n	8002214 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d106      	bne.n	8002214 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	f023 0308 	bic.w	r3, r3, #8
 800220c:	b2db      	uxtb	r3, r3
 800220e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002214:	f107 030f 	add.w	r3, r7, #15
 8002218:	2201      	movs	r2, #1
 800221a:	2122      	movs	r1, #34	; 0x22
 800221c:	4618      	mov	r0, r3
 800221e:	f000 fb29 	bl	8002874 <GYRO_IO_Write>
}
 8002222:	bf00      	nop
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	4603      	mov	r3, r0
 8002232:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002234:	f107 030f 	add.w	r3, r7, #15
 8002238:	2201      	movs	r2, #1
 800223a:	2121      	movs	r1, #33	; 0x21
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fb4b 	bl	80028d8 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	b2db      	uxtb	r3, r3
 800224a:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 800224c:	7bfa      	ldrb	r2, [r7, #15]
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	4313      	orrs	r3, r2
 8002252:	b2db      	uxtb	r3, r3
 8002254:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8002256:	f107 030f 	add.w	r3, r7, #15
 800225a:	2201      	movs	r2, #1
 800225c:	2121      	movs	r1, #33	; 0x21
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fb08 	bl	8002874 <GYRO_IO_Write>
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002276:	f107 030f 	add.w	r3, r7, #15
 800227a:	2201      	movs	r2, #1
 800227c:	2124      	movs	r1, #36	; 0x24
 800227e:	4618      	mov	r0, r3
 8002280:	f000 fb2a 	bl	80028d8 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	f023 0310 	bic.w	r3, r3, #16
 800228a:	b2db      	uxtb	r3, r3
 800228c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	4313      	orrs	r3, r2
 8002294:	b2db      	uxtb	r3, r3
 8002296:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002298:	f107 030f 	add.w	r3, r7, #15
 800229c:	2201      	movs	r2, #1
 800229e:	2124      	movs	r1, #36	; 0x24
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fae7 	bl	8002874 <GYRO_IO_Write>
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 80022b8:	2300      	movs	r3, #0
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	2300      	movs	r3, #0
 80022be:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 80022c0:	f107 0310 	add.w	r3, r7, #16
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80022d8:	f107 030f 	add.w	r3, r7, #15
 80022dc:	2201      	movs	r2, #1
 80022de:	2123      	movs	r1, #35	; 0x23
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 faf9 	bl	80028d8 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 80022e6:	f107 0318 	add.w	r3, r7, #24
 80022ea:	2206      	movs	r2, #6
 80022ec:	2128      	movs	r1, #40	; 0x28
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 faf2 	bl	80028d8 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d123      	bne.n	8002346 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	e01c      	b.n	800233e <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	3301      	adds	r3, #1
 800230a:	3328      	adds	r3, #40	; 0x28
 800230c:	443b      	add	r3, r7
 800230e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002312:	b29b      	uxth	r3, r3
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	b29a      	uxth	r2, r3
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	3328      	adds	r3, #40	; 0x28
 800231e:	443b      	add	r3, r7
 8002320:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002324:	b29b      	uxth	r3, r3
 8002326:	4413      	add	r3, r2
 8002328:	b29b      	uxth	r3, r3
 800232a:	b21a      	sxth	r2, r3
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	3328      	adds	r3, #40	; 0x28
 8002332:	443b      	add	r3, r7
 8002334:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	3301      	adds	r3, #1
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	2b02      	cmp	r3, #2
 8002342:	dddf      	ble.n	8002304 <L3GD20_ReadXYZAngRate+0x54>
 8002344:	e022      	b.n	800238c <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	e01c      	b.n	8002386 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	3328      	adds	r3, #40	; 0x28
 8002352:	443b      	add	r3, r7
 8002354:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002358:	b29b      	uxth	r3, r3
 800235a:	021b      	lsls	r3, r3, #8
 800235c:	b29a      	uxth	r2, r3
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	3301      	adds	r3, #1
 8002364:	3328      	adds	r3, #40	; 0x28
 8002366:	443b      	add	r3, r7
 8002368:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4413      	add	r3, r2
 8002370:	b29b      	uxth	r3, r3
 8002372:	b21a      	sxth	r2, r3
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	3328      	adds	r3, #40	; 0x28
 800237a:	443b      	add	r3, r7
 800237c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	3301      	adds	r3, #1
 8002384:	623b      	str	r3, [r7, #32]
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	2b02      	cmp	r3, #2
 800238a:	dddf      	ble.n	800234c <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002392:	2b20      	cmp	r3, #32
 8002394:	d00c      	beq.n	80023b0 <L3GD20_ReadXYZAngRate+0x100>
 8002396:	2b20      	cmp	r3, #32
 8002398:	dc0d      	bgt.n	80023b6 <L3GD20_ReadXYZAngRate+0x106>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <L3GD20_ReadXYZAngRate+0xf4>
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d003      	beq.n	80023aa <L3GD20_ReadXYZAngRate+0xfa>
 80023a2:	e008      	b.n	80023b6 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 80023a4:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <L3GD20_ReadXYZAngRate+0x170>)
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023a8:	e005      	b.n	80023b6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 80023aa:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <L3GD20_ReadXYZAngRate+0x174>)
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023ae:	e002      	b.n	80023b6 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <L3GD20_ReadXYZAngRate+0x178>)
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80023b4:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]
 80023ba:	e025      	b.n	8002408 <L3GD20_ReadXYZAngRate+0x158>
  {
    pfData[i]=(float)(RawData[i] * sensitivity * 0.001);
 80023bc:	6a3b      	ldr	r3, [r7, #32]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	3328      	adds	r3, #40	; 0x28
 80023c2:	443b      	add	r3, r7
 80023c4:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	ee17 0a90 	vmov	r0, s15
 80023dc:	f7fe f8c4 	bl	8000568 <__aeabi_f2d>
 80023e0:	a30d      	add	r3, pc, #52	; (adr r3, 8002418 <L3GD20_ReadXYZAngRate+0x168>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	f7fe f917 	bl	8000618 <__aeabi_dmul>
 80023ea:	4602      	mov	r2, r0
 80023ec:	460b      	mov	r3, r1
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	18d4      	adds	r4, r2, r3
 80023fa:	f7fe fc05 	bl	8000c08 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	6023      	str	r3, [r4, #0]
  for(i=0; i<3; i++)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	3301      	adds	r3, #1
 8002406:	623b      	str	r3, [r7, #32]
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2b02      	cmp	r3, #2
 800240c:	ddd6      	ble.n	80023bc <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	372c      	adds	r7, #44	; 0x2c
 8002414:	46bd      	mov	sp, r7
 8002416:	bd90      	pop	{r4, r7, pc}
 8002418:	d2f1a9fc 	.word	0xd2f1a9fc
 800241c:	3f50624d 	.word	0x3f50624d
 8002420:	410c0000 	.word	0x410c0000
 8002424:	418c0000 	.word	0x418c0000
 8002428:	428c0000 	.word	0x428c0000

0800242c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002430:	4819      	ldr	r0, [pc, #100]	; (8002498 <SPIx_Init+0x6c>)
 8002432:	f005 fbc0 	bl	8007bb6 <HAL_SPI_GetState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d12b      	bne.n	8002494 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <SPIx_Init+0x6c>)
 800243e:	4a17      	ldr	r2, [pc, #92]	; (800249c <SPIx_Init+0x70>)
 8002440:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <SPIx_Init+0x6c>)
 8002444:	2218      	movs	r2, #24
 8002446:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <SPIx_Init+0x6c>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <SPIx_Init+0x6c>)
 8002450:	2200      	movs	r2, #0
 8002452:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002454:	4b10      	ldr	r3, [pc, #64]	; (8002498 <SPIx_Init+0x6c>)
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <SPIx_Init+0x6c>)
 800245c:	2200      	movs	r2, #0
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002460:	4b0d      	ldr	r3, [pc, #52]	; (8002498 <SPIx_Init+0x6c>)
 8002462:	2207      	movs	r2, #7
 8002464:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <SPIx_Init+0x6c>)
 8002468:	2200      	movs	r2, #0
 800246a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <SPIx_Init+0x6c>)
 800246e:	2200      	movs	r2, #0
 8002470:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <SPIx_Init+0x6c>)
 8002474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002478:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <SPIx_Init+0x6c>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <SPIx_Init+0x6c>)
 8002482:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002486:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002488:	4803      	ldr	r0, [pc, #12]	; (8002498 <SPIx_Init+0x6c>)
 800248a:	f000 f873 	bl	8002574 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <SPIx_Init+0x6c>)
 8002490:	f004 fedd 	bl	800724e <HAL_SPI_Init>
  } 
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	200003f0 	.word	0x200003f0
 800249c:	40015000 	.word	0x40015000

080024a0 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	4603      	mov	r3, r0
 80024a8:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <SPIx_Read+0x38>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f107 0108 	add.w	r1, r7, #8
 80024ba:	4808      	ldr	r0, [pc, #32]	; (80024dc <SPIx_Read+0x3c>)
 80024bc:	f005 f8c8 	bl	8007650 <HAL_SPI_Receive>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80024ca:	f000 f847 	bl	800255c <SPIx_Error>
  }
  
  return readvalue;
 80024ce:	68bb      	ldr	r3, [r7, #8]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000070 	.word	0x20000070
 80024dc:	200003f0 	.word	0x200003f0

080024e0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <SPIx_Write+0x34>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1db9      	adds	r1, r7, #6
 80024f4:	2201      	movs	r2, #1
 80024f6:	4808      	ldr	r0, [pc, #32]	; (8002518 <SPIx_Write+0x38>)
 80024f8:	f004 ff6e 	bl	80073d8 <HAL_SPI_Transmit>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002506:	f000 f829 	bl	800255c <SPIx_Error>
  }
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000070 	.word	0x20000070
 8002518:	200003f0 	.word	0x200003f0

0800251c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <SPIx_WriteRead+0x38>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f107 020f 	add.w	r2, r7, #15
 8002532:	1df9      	adds	r1, r7, #7
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2301      	movs	r3, #1
 8002538:	4807      	ldr	r0, [pc, #28]	; (8002558 <SPIx_WriteRead+0x3c>)
 800253a:	f005 f99a 	bl	8007872 <HAL_SPI_TransmitReceive>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8002544:	f000 f80a 	bl	800255c <SPIx_Error>
  }
  
  return receivedbyte;
 8002548:	7bfb      	ldrb	r3, [r7, #15]
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000070 	.word	0x20000070
 8002558:	200003f0 	.word	0x200003f0

0800255c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002560:	4803      	ldr	r0, [pc, #12]	; (8002570 <SPIx_Error+0x14>)
 8002562:	f004 fefd 	bl	8007360 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002566:	f7ff ff61 	bl	800242c <SPIx_Init>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200003f0 	.word	0x200003f0

08002574 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800257c:	2300      	movs	r3, #0
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <SPIx_MspInit+0x6c>)
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	4a16      	ldr	r2, [pc, #88]	; (80025e0 <SPIx_MspInit+0x6c>)
 8002586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800258a:	6453      	str	r3, [r2, #68]	; 0x44
 800258c:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <SPIx_MspInit+0x6c>)
 800258e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <SPIx_MspInit+0x6c>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <SPIx_MspInit+0x6c>)
 80025a2:	f043 0320 	orr.w	r3, r3, #32
 80025a6:	6313      	str	r3, [r2, #48]	; 0x30
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <SPIx_MspInit+0x6c>)
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	60fb      	str	r3, [r7, #12]
 80025b2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80025b4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80025b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80025ba:	2302      	movs	r3, #2
 80025bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80025be:	2302      	movs	r3, #2
 80025c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80025c2:	2301      	movs	r3, #1
 80025c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80025c6:	2305      	movs	r3, #5
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	4804      	ldr	r0, [pc, #16]	; (80025e4 <SPIx_MspInit+0x70>)
 80025d2:	f001 ffe7 	bl	80045a4 <HAL_GPIO_Init>
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40021400 	.word	0x40021400

080025e8 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80025ee:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <LCD_IO_Init+0xe0>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d164      	bne.n	80026c0 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <LCD_IO_Init+0xe0>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]
 8002600:	4b32      	ldr	r3, [pc, #200]	; (80026cc <LCD_IO_Init+0xe4>)
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	4a31      	ldr	r2, [pc, #196]	; (80026cc <LCD_IO_Init+0xe4>)
 8002606:	f043 0308 	orr.w	r3, r3, #8
 800260a:	6313      	str	r3, [r2, #48]	; 0x30
 800260c:	4b2f      	ldr	r3, [pc, #188]	; (80026cc <LCD_IO_Init+0xe4>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800261e:	2301      	movs	r3, #1
 8002620:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800262a:	f107 030c 	add.w	r3, r7, #12
 800262e:	4619      	mov	r1, r3
 8002630:	4827      	ldr	r0, [pc, #156]	; (80026d0 <LCD_IO_Init+0xe8>)
 8002632:	f001 ffb7 	bl	80045a4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b24      	ldr	r3, [pc, #144]	; (80026cc <LCD_IO_Init+0xe4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a23      	ldr	r2, [pc, #140]	; (80026cc <LCD_IO_Init+0xe4>)
 8002640:	f043 0308 	orr.w	r3, r3, #8
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <LCD_IO_Init+0xe4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	4619      	mov	r1, r3
 800266a:	4819      	ldr	r0, [pc, #100]	; (80026d0 <LCD_IO_Init+0xe8>)
 800266c:	f001 ff9a 	bl	80045a4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	603b      	str	r3, [r7, #0]
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <LCD_IO_Init+0xe4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a14      	ldr	r2, [pc, #80]	; (80026cc <LCD_IO_Init+0xe4>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b12      	ldr	r3, [pc, #72]	; (80026cc <LCD_IO_Init+0xe4>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	603b      	str	r3, [r7, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800268c:	2304      	movs	r3, #4
 800268e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002698:	2302      	movs	r3, #2
 800269a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4619      	mov	r1, r3
 80026a2:	480c      	ldr	r0, [pc, #48]	; (80026d4 <LCD_IO_Init+0xec>)
 80026a4:	f001 ff7e 	bl	80045a4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80026a8:	2200      	movs	r2, #0
 80026aa:	2104      	movs	r1, #4
 80026ac:	4809      	ldr	r0, [pc, #36]	; (80026d4 <LCD_IO_Init+0xec>)
 80026ae:	f002 f925 	bl	80048fc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80026b2:	2201      	movs	r2, #1
 80026b4:	2104      	movs	r1, #4
 80026b6:	4807      	ldr	r0, [pc, #28]	; (80026d4 <LCD_IO_Init+0xec>)
 80026b8:	f002 f920 	bl	80048fc <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80026bc:	f7ff feb6 	bl	800242c <SPIx_Init>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000448 	.word	0x20000448
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40020800 	.word	0x40020800

080026d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80026e2:	2201      	movs	r2, #1
 80026e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026e8:	480a      	ldr	r0, [pc, #40]	; (8002714 <LCD_IO_WriteData+0x3c>)
 80026ea:	f002 f907 	bl	80048fc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80026ee:	2200      	movs	r2, #0
 80026f0:	2104      	movs	r1, #4
 80026f2:	4809      	ldr	r0, [pc, #36]	; (8002718 <LCD_IO_WriteData+0x40>)
 80026f4:	f002 f902 	bl	80048fc <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fef0 	bl	80024e0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002700:	2201      	movs	r2, #1
 8002702:	2104      	movs	r1, #4
 8002704:	4804      	ldr	r0, [pc, #16]	; (8002718 <LCD_IO_WriteData+0x40>)
 8002706:	f002 f8f9 	bl	80048fc <HAL_GPIO_WritePin>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40020c00 	.word	0x40020c00
 8002718:	40020800 	.word	0x40020800

0800271c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002726:	2200      	movs	r2, #0
 8002728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <LCD_IO_WriteReg+0x3c>)
 800272e:	f002 f8e5 	bl	80048fc <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002732:	2200      	movs	r2, #0
 8002734:	2104      	movs	r1, #4
 8002736:	4809      	ldr	r0, [pc, #36]	; (800275c <LCD_IO_WriteReg+0x40>)
 8002738:	f002 f8e0 	bl	80048fc <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	b29b      	uxth	r3, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fecd 	bl	80024e0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002746:	2201      	movs	r2, #1
 8002748:	2104      	movs	r1, #4
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <LCD_IO_WriteReg+0x40>)
 800274c:	f002 f8d6 	bl	80048fc <HAL_GPIO_WritePin>
}
 8002750:	bf00      	nop
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40020c00 	.word	0x40020c00
 800275c:	40020800 	.word	0x40020800

08002760 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	460a      	mov	r2, r1
 800276a:	80fb      	strh	r3, [r7, #6]
 800276c:	4613      	mov	r3, r2
 800276e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002774:	2200      	movs	r2, #0
 8002776:	2104      	movs	r1, #4
 8002778:	4810      	ldr	r0, [pc, #64]	; (80027bc <LCD_IO_ReadData+0x5c>)
 800277a:	f002 f8bf 	bl	80048fc <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002784:	480e      	ldr	r0, [pc, #56]	; (80027c0 <LCD_IO_ReadData+0x60>)
 8002786:	f002 f8b9 	bl	80048fc <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fea7 	bl	80024e0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002792:	797b      	ldrb	r3, [r7, #5]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe83 	bl	80024a0 <SPIx_Read>
 800279a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800279c:	2201      	movs	r2, #1
 800279e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027a2:	4807      	ldr	r0, [pc, #28]	; (80027c0 <LCD_IO_ReadData+0x60>)
 80027a4:	f002 f8aa 	bl	80048fc <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027a8:	2201      	movs	r2, #1
 80027aa:	2104      	movs	r1, #4
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <LCD_IO_ReadData+0x5c>)
 80027ae:	f002 f8a5 	bl	80048fc <HAL_GPIO_WritePin>
  
  return readvalue;
 80027b2:	68fb      	ldr	r3, [r7, #12]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40020800 	.word	0x40020800
 80027c0:	40020c00 	.word	0x40020c00

080027c4 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f001 f98f 	bl	8003af0 <HAL_Delay>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <GYRO_IO_Init+0x8c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a1f      	ldr	r2, [pc, #124]	; (8002868 <GYRO_IO_Init+0x8c>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <GYRO_IO_Init+0x8c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80027fe:	2302      	movs	r3, #2
 8002800:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800280a:	2301      	movs	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 800280e:	f107 030c 	add.w	r3, r7, #12
 8002812:	4619      	mov	r1, r3
 8002814:	4815      	ldr	r0, [pc, #84]	; (800286c <GYRO_IO_Init+0x90>)
 8002816:	f001 fec5 	bl	80045a4 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 800281a:	2201      	movs	r2, #1
 800281c:	2102      	movs	r1, #2
 800281e:	4813      	ldr	r0, [pc, #76]	; (800286c <GYRO_IO_Init+0x90>)
 8002820:	f002 f86c 	bl	80048fc <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8002824:	2300      	movs	r3, #0
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <GYRO_IO_Init+0x8c>)
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <GYRO_IO_Init+0x8c>)
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6313      	str	r3, [r2, #48]	; 0x30
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <GYRO_IO_Init+0x8c>)
 8002836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	607b      	str	r3, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8002840:	2306      	movs	r3, #6
 8002842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002848:	2302      	movs	r3, #2
 800284a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	4619      	mov	r1, r3
 8002856:	4806      	ldr	r0, [pc, #24]	; (8002870 <GYRO_IO_Init+0x94>)
 8002858:	f001 fea4 	bl	80045a4 <HAL_GPIO_Init>

  SPIx_Init();
 800285c:	f7ff fde6 	bl	800242c <SPIx_Init>
}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	40020800 	.word	0x40020800
 8002870:	40020000 	.word	0x40020000

08002874 <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
 8002880:	4613      	mov	r3, r2
 8002882:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8002884:	883b      	ldrh	r3, [r7, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d903      	bls.n	8002892 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002890:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002892:	2200      	movs	r2, #0
 8002894:	2102      	movs	r1, #2
 8002896:	480f      	ldr	r0, [pc, #60]	; (80028d4 <GYRO_IO_Write+0x60>)
 8002898:	f002 f830 	bl	80048fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 800289c:	78fb      	ldrb	r3, [r7, #3]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fe3c 	bl	800251c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 80028a4:	e00a      	b.n	80028bc <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fe36 	bl	800251c <SPIx_WriteRead>
    NumByteToWrite--;
 80028b0:	883b      	ldrh	r3, [r7, #0]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3301      	adds	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 80028bc:	883b      	ldrh	r3, [r7, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f1      	bne.n	80028a6 <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80028c2:	2201      	movs	r2, #1
 80028c4:	2102      	movs	r1, #2
 80028c6:	4803      	ldr	r0, [pc, #12]	; (80028d4 <GYRO_IO_Write+0x60>)
 80028c8:	f002 f818 	bl	80048fc <HAL_GPIO_WritePin>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40020800 	.word	0x40020800

080028d8 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
 80028e4:	4613      	mov	r3, r2
 80028e6:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 80028e8:	883b      	ldrh	r3, [r7, #0]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d904      	bls.n	80028f8 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 80028f4:	70fb      	strb	r3, [r7, #3]
 80028f6:	e003      	b.n	8002900 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80028f8:	78fb      	ldrb	r3, [r7, #3]
 80028fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80028fe:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002900:	2200      	movs	r2, #0
 8002902:	2102      	movs	r1, #2
 8002904:	4810      	ldr	r0, [pc, #64]	; (8002948 <GYRO_IO_Read+0x70>)
 8002906:	f001 fff9 	bl	80048fc <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe05 	bl	800251c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002912:	e00c      	b.n	800292e <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002914:	2000      	movs	r0, #0
 8002916:	f7ff fe01 	bl	800251c <SPIx_WriteRead>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002922:	883b      	ldrh	r3, [r7, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3301      	adds	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 800292e:	883b      	ldrh	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ef      	bne.n	8002914 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002934:	2201      	movs	r2, #1
 8002936:	2102      	movs	r1, #2
 8002938:	4803      	ldr	r0, [pc, #12]	; (8002948 <GYRO_IO_Read+0x70>)
 800293a:	f001 ffdf 	bl	80048fc <HAL_GPIO_WritePin>
}  
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40020800 	.word	0x40020800

0800294c <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002956:	2300      	movs	r3, #0
 8002958:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 800295a:	2300      	movs	r3, #0
 800295c:	703b      	strb	r3, [r7, #0]
 800295e:	2300      	movs	r3, #0
 8002960:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8002962:	4b2b      	ldr	r3, [pc, #172]	; (8002a10 <BSP_GYRO_Init+0xc4>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	4798      	blx	r3
 8002968:	4603      	mov	r3, r0
 800296a:	2bd4      	cmp	r3, #212	; 0xd4
 800296c:	d005      	beq.n	800297a <BSP_GYRO_Init+0x2e>
 800296e:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <BSP_GYRO_Init+0xc4>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4798      	blx	r3
 8002974:	4603      	mov	r3, r0
 8002976:	2bd5      	cmp	r3, #213	; 0xd5
 8002978:	d145      	bne.n	8002a06 <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 800297a:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <BSP_GYRO_Init+0xc8>)
 800297c:	4a24      	ldr	r2, [pc, #144]	; (8002a10 <BSP_GYRO_Init+0xc4>)
 800297e:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002980:	2308      	movs	r3, #8
 8002982:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 8002984:	2300      	movs	r3, #0
 8002986:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002988:	2307      	movs	r3, #7
 800298a:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 800298c:	2330      	movs	r3, #48	; 0x30
 800298e:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002990:	2300      	movs	r3, #0
 8002992:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 8002994:	2300      	movs	r3, #0
 8002996:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002998:	2310      	movs	r3, #16
 800299a:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800299c:	793a      	ldrb	r2, [r7, #4]
 800299e:	797b      	ldrb	r3, [r7, #5]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80029a4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80029b2:	7a3a      	ldrb	r2, [r7, #8]
 80029b4:	7a7b      	ldrb	r3, [r7, #9]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 80029ba:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <BSP_GYRO_Init+0xc8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	89ba      	ldrh	r2, [r7, #12]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 80029d8:	2300      	movs	r3, #0
 80029da:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 80029dc:	2300      	movs	r3, #0
 80029de:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80029e0:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 80029e2:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <BSP_GYRO_Init+0xc8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	89ba      	ldrh	r2, [r7, #12]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	4610      	mov	r0, r2
 80029f6:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <BSP_GYRO_Init+0xc8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fe:	2010      	movs	r0, #16
 8002a00:	4798      	blx	r3

    ret = GYRO_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3710      	adds	r7, #16
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	2000003c 	.word	0x2000003c
 8002a14:	2000044c 	.word	0x2000044c

08002a18 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a1c:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a1e:	4a2e      	ldr	r2, [pc, #184]	; (8002ad8 <BSP_LCD_Init+0xc0>)
 8002a20:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a22:	4b2c      	ldr	r3, [pc, #176]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a24:	2209      	movs	r2, #9
 8002a26:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a28:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a30:	221d      	movs	r2, #29
 8002a32:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a34:	4b27      	ldr	r3, [pc, #156]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a36:	2203      	movs	r2, #3
 8002a38:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002a3a:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a3c:	f240 120d 	movw	r2, #269	; 0x10d
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a44:	f240 1243 	movw	r2, #323	; 0x143
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002a4a:	4b22      	ldr	r3, [pc, #136]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a4c:	f240 1217 	movw	r2, #279	; 0x117
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002a52:	4b20      	ldr	r3, [pc, #128]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a54:	f240 1247 	movw	r2, #327	; 0x147
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002a62:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002a72:	4b1a      	ldr	r3, [pc, #104]	; (8002adc <BSP_LCD_Init+0xc4>)
 8002a74:	2208      	movs	r2, #8
 8002a76:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <BSP_LCD_Init+0xc4>)
 8002a7a:	22c0      	movs	r2, #192	; 0xc0
 8002a7c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002a7e:	4b17      	ldr	r3, [pc, #92]	; (8002adc <BSP_LCD_Init+0xc4>)
 8002a80:	2204      	movs	r2, #4
 8002a82:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <BSP_LCD_Init+0xc4>)
 8002a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002a8c:	4813      	ldr	r0, [pc, #76]	; (8002adc <BSP_LCD_Init+0xc4>)
 8002a8e:	f004 f983 	bl	8006d98 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002aaa:	f000 fc27 	bl	80032fc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002aae:	4809      	ldr	r0, [pc, #36]	; (8002ad4 <BSP_LCD_Init+0xbc>)
 8002ab0:	f001 ff3e 	bl	8004930 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002ab4:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <BSP_LCD_Init+0xc8>)
 8002ab6:	4a0b      	ldr	r2, [pc, #44]	; (8002ae4 <BSP_LCD_Init+0xcc>)
 8002ab8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <BSP_LCD_Init+0xc8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ac2:	f000 fe09 	bl	80036d8 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002ac6:	4808      	ldr	r0, [pc, #32]	; (8002ae8 <BSP_LCD_Init+0xd0>)
 8002ac8:	f000 f8ce 	bl	8002c68 <BSP_LCD_SetFont>

  return LCD_OK;
 8002acc:	2300      	movs	r3, #0
}  
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000450 	.word	0x20000450
 8002ad8:	40016800 	.word	0x40016800
 8002adc:	20000538 	.word	0x20000538
 8002ae0:	20000584 	.word	0x20000584
 8002ae4:	20000004 	.word	0x20000004
 8002ae8:	20000074 	.word	0x20000074

08002aec <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <BSP_LCD_GetXSize+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	4798      	blx	r3
 8002af8:	4603      	mov	r3, r0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000584 	.word	0x20000584

08002b04 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <BSP_LCD_GetYSize+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	4798      	blx	r3
 8002b10:	4603      	mov	r3, r0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000584 	.word	0x20000584

08002b1c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b090      	sub	sp, #64	; 0x40
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b2c:	f7ff ffde 	bl	8002aec <BSP_LCD_GetXSize>
 8002b30:	4603      	mov	r3, r0
 8002b32:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b38:	f7ff ffe4 	bl	8002b04 <BSP_LCD_GetYSize>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002b48:	23ff      	movs	r3, #255	; 0xff
 8002b4a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002b62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b68:	2307      	movs	r3, #7
 8002b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002b6c:	f7ff ffbe 	bl	8002aec <BSP_LCD_GetXSize>
 8002b70:	4603      	mov	r3, r0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002b74:	f7ff ffc6 	bl	8002b04 <BSP_LCD_GetYSize>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002b7c:	88fa      	ldrh	r2, [r7, #6]
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4619      	mov	r1, r3
 8002b84:	4814      	ldr	r0, [pc, #80]	; (8002bd8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002b86:	f001 ffad 	bl	8004ae4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002b8a:	88fa      	ldrh	r2, [r7, #6]
 8002b8c:	4913      	ldr	r1, [pc, #76]	; (8002bdc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3304      	adds	r3, #4
 8002b9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	490e      	ldr	r1, [pc, #56]	; (8002bdc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3308      	adds	r3, #8
 8002bb0:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002bb2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002bb4:	88fa      	ldrh	r2, [r7, #6]
 8002bb6:	4909      	ldr	r1, [pc, #36]	; (8002bdc <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002bc6:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bca:	f001 ffc9 	bl	8004b60 <HAL_LTDC_EnableDither>
}
 8002bce:	bf00      	nop
 8002bd0:	3740      	adds	r7, #64	; 0x40
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	20000450 	.word	0x20000450
 8002bdc:	2000056c 	.word	0x2000056c
 8002be0:	20000074 	.word	0x20000074

08002be4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <BSP_LCD_SelectLayer+0x1c>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6013      	str	r3, [r2, #0]
}
 8002bf2:	bf00      	nop
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000568 	.word	0x20000568

08002c04 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c0c:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <BSP_LCD_SetTextColor+0x28>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <BSP_LCD_SetTextColor+0x2c>)
 8002c12:	4613      	mov	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	601a      	str	r2, [r3, #0]
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000568 	.word	0x20000568
 8002c30:	2000056c 	.word	0x2000056c

08002c34 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <BSP_LCD_SetBackColor+0x2c>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4908      	ldr	r1, [pc, #32]	; (8002c64 <BSP_LCD_SetBackColor+0x30>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000568 	.word	0x20000568
 8002c64:	2000056c 	.word	0x2000056c

08002c68 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <BSP_LCD_SetFont+0x2c>)
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4908      	ldr	r1, [pc, #32]	; (8002c98 <BSP_LCD_SetFont+0x30>)
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3308      	adds	r3, #8
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	601a      	str	r2, [r3, #0]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000568 	.word	0x20000568
 8002c98:	2000056c 	.word	0x2000056c

08002c9c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ca0:	4b07      	ldr	r3, [pc, #28]	; (8002cc0 <BSP_LCD_GetFont+0x24>)
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4907      	ldr	r1, [pc, #28]	; (8002cc4 <BSP_LCD_GetFont+0x28>)
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	440b      	add	r3, r1
 8002cb0:	3308      	adds	r3, #8
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000568 	.word	0x20000568
 8002cc4:	2000056c 	.word	0x2000056c

08002cc8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002cd0:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <BSP_LCD_Clear+0x48>)
 8002cd2:	681c      	ldr	r4, [r3, #0]
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <BSP_LCD_Clear+0x48>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <BSP_LCD_Clear+0x4c>)
 8002cda:	2134      	movs	r1, #52	; 0x34
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461e      	mov	r6, r3
 8002ce8:	f7ff ff00 	bl	8002aec <BSP_LCD_GetXSize>
 8002cec:	4605      	mov	r5, r0
 8002cee:	f7ff ff09 	bl	8002b04 <BSP_LCD_GetYSize>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	9301      	str	r3, [sp, #4]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	462a      	mov	r2, r5
 8002d00:	4631      	mov	r1, r6
 8002d02:	4620      	mov	r0, r4
 8002d04:	f000 fcb0 	bl	8003668 <FillBuffer>
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d10:	20000568 	.word	0x20000568
 8002d14:	20000450 	.word	0x20000450

08002d18 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
 8002d22:	460b      	mov	r3, r1
 8002d24:	80bb      	strh	r3, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <BSP_LCD_DisplayChar+0x80>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	491b      	ldr	r1, [pc, #108]	; (8002d9c <BSP_LCD_DisplayChar+0x84>)
 8002d30:	4613      	mov	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <BSP_LCD_DisplayChar+0x80>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4c14      	ldr	r4, [pc, #80]	; (8002d9c <BSP_LCD_DisplayChar+0x84>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4423      	add	r3, r4
 8002d56:	3308      	adds	r3, #8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d5c:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d60:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <BSP_LCD_DisplayChar+0x80>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4c0d      	ldr	r4, [pc, #52]	; (8002d9c <BSP_LCD_DisplayChar+0x84>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4423      	add	r3, r4
 8002d70:	3308      	adds	r3, #8
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	889b      	ldrh	r3, [r3, #4]
 8002d76:	3307      	adds	r3, #7
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da00      	bge.n	8002d7e <BSP_LCD_DisplayChar+0x66>
 8002d7c:	3307      	adds	r3, #7
 8002d7e:	10db      	asrs	r3, r3, #3
 8002d80:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d84:	18ca      	adds	r2, r1, r3
 8002d86:	88b9      	ldrh	r1, [r7, #4]
 8002d88:	88fb      	ldrh	r3, [r7, #6]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fbb2 	bl	80034f4 <DrawChar>
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd90      	pop	{r4, r7, pc}
 8002d98:	20000568 	.word	0x20000568
 8002d9c:	2000056c 	.word	0x2000056c

08002da0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60ba      	str	r2, [r7, #8]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4603      	mov	r3, r0
 8002dac:	81fb      	strh	r3, [r7, #14]
 8002dae:	460b      	mov	r3, r1
 8002db0:	81bb      	strh	r3, [r7, #12]
 8002db2:	4613      	mov	r3, r2
 8002db4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002db6:	2301      	movs	r3, #1
 8002db8:	83fb      	strh	r3, [r7, #30]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002dca:	e002      	b.n	8002dd2 <BSP_LCD_DisplayStringAt+0x32>
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	617a      	str	r2, [r7, #20]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f6      	bne.n	8002dcc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002dde:	f7ff fe85 	bl	8002aec <BSP_LCD_GetXSize>
 8002de2:	4601      	mov	r1, r0
 8002de4:	4b4b      	ldr	r3, [pc, #300]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	484b      	ldr	r0, [pc, #300]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4403      	add	r3, r0
 8002df4:	3308      	adds	r3, #8
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	889b      	ldrh	r3, [r3, #4]
 8002dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dfe:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d01c      	beq.n	8002e40 <BSP_LCD_DisplayStringAt+0xa0>
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	dc33      	bgt.n	8002e72 <BSP_LCD_DisplayStringAt+0xd2>
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d002      	beq.n	8002e14 <BSP_LCD_DisplayStringAt+0x74>
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d019      	beq.n	8002e46 <BSP_LCD_DisplayStringAt+0xa6>
 8002e12:	e02e      	b.n	8002e72 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	1ad1      	subs	r1, r2, r3
 8002e1a:	4b3e      	ldr	r3, [pc, #248]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	483e      	ldr	r0, [pc, #248]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	889b      	ldrh	r3, [r3, #4]
 8002e30:	fb01 f303 	mul.w	r3, r1, r3
 8002e34:	085b      	lsrs	r3, r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	89fb      	ldrh	r3, [r7, #14]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	83fb      	strh	r3, [r7, #30]
      break;
 8002e3e:	e01b      	b.n	8002e78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	83fb      	strh	r3, [r7, #30]
      break;
 8002e44:	e018      	b.n	8002e78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4831      	ldr	r0, [pc, #196]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4403      	add	r3, r0
 8002e5e:	3308      	adds	r3, #8
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	889b      	ldrh	r3, [r3, #4]
 8002e64:	fb11 f303 	smulbb	r3, r1, r3
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	83fb      	strh	r3, [r7, #30]
      break;
 8002e70:	e002      	b.n	8002e78 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002e72:	89fb      	ldrh	r3, [r7, #14]
 8002e74:	83fb      	strh	r3, [r7, #30]
      break;
 8002e76:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e78:	e01a      	b.n	8002eb0 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	89b9      	ldrh	r1, [r7, #12]
 8002e80:	8bfb      	ldrh	r3, [r7, #30]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff ff48 	bl	8002d18 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002e88:	4b22      	ldr	r3, [pc, #136]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4922      	ldr	r1, [pc, #136]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002e8e:	4613      	mov	r3, r2
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3308      	adds	r3, #8
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	889a      	ldrh	r2, [r3, #4]
 8002e9e:	8bfb      	ldrh	r3, [r7, #30]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
    i++;
 8002eaa:	8bbb      	ldrh	r3, [r7, #28]
 8002eac:	3301      	adds	r3, #1
 8002eae:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2dc      	uxtb	r4, r3
 8002ebe:	f7ff fe15 	bl	8002aec <BSP_LCD_GetXSize>
 8002ec2:	8bb9      	ldrh	r1, [r7, #28]
 8002ec4:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4d13      	ldr	r5, [pc, #76]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	442b      	add	r3, r5
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	889b      	ldrh	r3, [r3, #4]
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	1ac3      	subs	r3, r0, r3
 8002ee0:	b299      	uxth	r1, r3
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <BSP_LCD_DisplayStringAt+0x174>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	480c      	ldr	r0, [pc, #48]	; (8002f18 <BSP_LCD_DisplayStringAt+0x178>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4403      	add	r3, r0
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	889b      	ldrh	r3, [r3, #4]
 8002ef8:	4299      	cmp	r1, r3
 8002efa:	bf2c      	ite	cs
 8002efc:	2301      	movcs	r3, #1
 8002efe:	2300      	movcc	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4023      	ands	r3, r4
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1b7      	bne.n	8002e7a <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002f0a:	bf00      	nop
 8002f0c:	bf00      	nop
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bdb0      	pop	{r4, r5, r7, pc}
 8002f14:	20000568 	.word	0x20000568
 8002f18:	2000056c 	.word	0x2000056c

08002f1c <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	6039      	str	r1, [r7, #0]
 8002f26:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f28:	f7ff feb8 	bl	8002c9c <BSP_LCD_GetFont>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	88db      	ldrh	r3, [r3, #6]
 8002f30:	88fa      	ldrh	r2, [r7, #6]
 8002f32:	fb12 f303 	smulbb	r3, r2, r3
 8002f36:	b299      	uxth	r1, r3
 8002f38:	2303      	movs	r3, #3
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff2f 	bl	8002da0 <BSP_LCD_DisplayStringAt>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
 8002f56:	460b      	mov	r3, r1
 8002f58:	80bb      	strh	r3, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <BSP_LCD_DrawHLine+0x70>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <BSP_LCD_DrawHLine+0x74>)
 8002f68:	2134      	movs	r1, #52	; 0x34
 8002f6a:	fb01 f303 	mul.w	r3, r1, r3
 8002f6e:	4413      	add	r3, r2
 8002f70:	335c      	adds	r3, #92	; 0x5c
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	f7ff fdba 	bl	8002aec <BSP_LCD_GetXSize>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	fb03 f202 	mul.w	r2, r3, r2
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4423      	add	r3, r4
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <BSP_LCD_DrawHLine+0x70>)
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68f9      	ldr	r1, [r7, #12]
 8002f90:	887c      	ldrh	r4, [r7, #2]
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <BSP_LCD_DrawHLine+0x70>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4d0b      	ldr	r5, [pc, #44]	; (8002fc4 <BSP_LCD_DrawHLine+0x78>)
 8002f98:	4613      	mov	r3, r2
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	442b      	add	r3, r5
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	9301      	str	r3, [sp, #4]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	2301      	movs	r3, #1
 8002fac:	4622      	mov	r2, r4
 8002fae:	f000 fb5b 	bl	8003668 <FillBuffer>
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000568 	.word	0x20000568
 8002fc0:	20000450 	.word	0x20000450
 8002fc4:	2000056c 	.word	0x2000056c

08002fc8 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fc8:	b590      	push	{r4, r7, lr}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	80bb      	strh	r3, [r7, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8002fda:	887b      	ldrh	r3, [r7, #2]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	f1c3 0303 	rsb	r3, r3, #3
 8002fe2:	617b      	str	r3, [r7, #20]
  curx = 0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8002fec:	e0c7      	b.n	800317e <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	b298      	uxth	r0, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	88ba      	ldrh	r2, [r7, #4]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	b299      	uxth	r1, r3
 8003002:	4b64      	ldr	r3, [pc, #400]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	4c64      	ldr	r4, [pc, #400]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 8003008:	4613      	mov	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	4413      	add	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4423      	add	r3, r4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	461a      	mov	r2, r3
 8003016:	f000 fa47 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	b29b      	uxth	r3, r3
 800301e:	88fa      	ldrh	r2, [r7, #6]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b298      	uxth	r0, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	b29b      	uxth	r3, r3
 8003028:	88ba      	ldrh	r2, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b299      	uxth	r1, r3
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	4c59      	ldr	r4, [pc, #356]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 8003034:	4613      	mov	r3, r2
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4423      	add	r3, r4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	461a      	mov	r2, r3
 8003042:	f000 fa31 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	b29a      	uxth	r2, r3
 800304a:	88fb      	ldrh	r3, [r7, #6]
 800304c:	4413      	add	r3, r2
 800304e:	b298      	uxth	r0, r3
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	b29b      	uxth	r3, r3
 8003054:	88ba      	ldrh	r2, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b299      	uxth	r1, r3
 800305a:	4b4e      	ldr	r3, [pc, #312]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4c4e      	ldr	r4, [pc, #312]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 8003060:	4613      	mov	r3, r2
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	4413      	add	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4423      	add	r3, r4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	f000 fa1b 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	b29b      	uxth	r3, r3
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	b298      	uxth	r0, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	b29b      	uxth	r3, r3
 8003080:	88ba      	ldrh	r2, [r7, #4]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b299      	uxth	r1, r3
 8003086:	4b43      	ldr	r3, [pc, #268]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	4c43      	ldr	r4, [pc, #268]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4423      	add	r3, r4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	f000 fa05 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	88fb      	ldrh	r3, [r7, #6]
 80030a4:	4413      	add	r3, r2
 80030a6:	b298      	uxth	r0, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	88bb      	ldrh	r3, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	b299      	uxth	r1, r3
 80030b2:	4b38      	ldr	r3, [pc, #224]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4c38      	ldr	r4, [pc, #224]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4423      	add	r3, r4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	461a      	mov	r2, r3
 80030c6:	f000 f9ef 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	88fa      	ldrh	r2, [r7, #6]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	b298      	uxth	r0, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	88bb      	ldrh	r3, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	b299      	uxth	r1, r3
 80030de:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	4c2d      	ldr	r4, [pc, #180]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4423      	add	r3, r4
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	f000 f9d9 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4413      	add	r3, r2
 80030fe:	b298      	uxth	r0, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	b29a      	uxth	r2, r3
 8003104:	88bb      	ldrh	r3, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	b299      	uxth	r1, r3
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4c22      	ldr	r4, [pc, #136]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4423      	add	r3, r4
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	f000 f9c3 	bl	80034a8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	b29b      	uxth	r3, r3
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	b298      	uxth	r0, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	b29a      	uxth	r2, r3
 8003130:	88bb      	ldrh	r3, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	b299      	uxth	r1, r3
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <BSP_LCD_DrawCircle+0x1cc>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4c17      	ldr	r4, [pc, #92]	; (8003198 <BSP_LCD_DrawCircle+0x1d0>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4423      	add	r3, r4
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	461a      	mov	r2, r3
 800314a:	f000 f9ad 	bl	80034a8 <BSP_LCD_DrawPixel>

    if (d < 0)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	da06      	bge.n	8003162 <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	009a      	lsls	r2, r3, #2
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	4413      	add	r3, r2
 800315c:	3306      	adds	r3, #6
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e00a      	b.n	8003178 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	009a      	lsls	r2, r3, #2
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	4413      	add	r3, r2
 800316e:	330a      	adds	r3, #10
 8003170:	617b      	str	r3, [r7, #20]
      cury--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	3b01      	subs	r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3301      	adds	r3, #1
 800317c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	f67f af33 	bls.w	8002fee <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	371c      	adds	r7, #28
 800318e:	46bd      	mov	sp, r7
 8003190:	bd90      	pop	{r4, r7, pc}
 8003192:	bf00      	nop
 8003194:	20000568 	.word	0x20000568
 8003198:	2000056c 	.word	0x2000056c

0800319c <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	80fb      	strh	r3, [r7, #6]
 80031a6:	460b      	mov	r3, r1
 80031a8:	80bb      	strh	r3, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	f1c3 0303 	rsb	r3, r3, #3
 80031b6:	617b      	str	r3, [r7, #20]

  curx = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	613b      	str	r3, [r7, #16]
  cury = Radius;
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80031c0:	4b44      	ldr	r3, [pc, #272]	; (80032d4 <BSP_LCD_FillCircle+0x138>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4944      	ldr	r1, [pc, #272]	; (80032d8 <BSP_LCD_FillCircle+0x13c>)
 80031c6:	4613      	mov	r3, r2
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	4413      	add	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff fd16 	bl	8002c04 <BSP_LCD_SetTextColor>

  while (curx <= cury)
 80031d8:	e061      	b.n	800329e <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d021      	beq.n	8003224 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	88fa      	ldrh	r2, [r7, #6]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	b298      	uxth	r0, r3
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	88bb      	ldrh	r3, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	b299      	uxth	r1, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	461a      	mov	r2, r3
 80031fe:	f7ff fea5 	bl	8002f4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	b29b      	uxth	r3, r3
 8003206:	88fa      	ldrh	r2, [r7, #6]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	b298      	uxth	r0, r3
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	b29b      	uxth	r3, r3
 8003210:	88ba      	ldrh	r2, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	b299      	uxth	r1, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	b29b      	uxth	r3, r3
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	b29b      	uxth	r3, r3
 800321e:	461a      	mov	r2, r3
 8003220:	f7ff fe94 	bl	8002f4c <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d021      	beq.n	800326e <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	b29b      	uxth	r3, r3
 800322e:	88fa      	ldrh	r2, [r7, #6]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	b298      	uxth	r0, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	b29b      	uxth	r3, r3
 8003238:	88ba      	ldrh	r2, [r7, #4]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	b299      	uxth	r1, r3
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	b29b      	uxth	r3, r3
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	f7ff fe80 	bl	8002f4c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	b29b      	uxth	r3, r3
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	b298      	uxth	r0, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	b29a      	uxth	r2, r3
 800325a:	88bb      	ldrh	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
 800325e:	b299      	uxth	r1, r3
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	b29b      	uxth	r3, r3
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	b29b      	uxth	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	f7ff fe6f 	bl	8002f4c <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da06      	bge.n	8003282 <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	009a      	lsls	r2, r3, #2
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	4413      	add	r3, r2
 800327c:	3306      	adds	r3, #6
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00a      	b.n	8003298 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	009a      	lsls	r2, r3, #2
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	4413      	add	r3, r2
 800328e:	330a      	adds	r3, #10
 8003290:	617b      	str	r3, [r7, #20]
      cury--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3b01      	subs	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3301      	adds	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d999      	bls.n	80031da <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80032a6:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <BSP_LCD_FillCircle+0x138>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	490b      	ldr	r1, [pc, #44]	; (80032d8 <BSP_LCD_FillCircle+0x13c>)
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fca3 	bl	8002c04 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	88b9      	ldrh	r1, [r7, #4]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fe7f 	bl	8002fc8 <BSP_LCD_DrawCircle>
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000568 	.word	0x20000568
 80032d8:	2000056c 	.word	0x2000056c

080032dc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80032e0:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <BSP_LCD_DisplayOn+0x1c>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80032ea:	4b03      	ldr	r3, [pc, #12]	; (80032f8 <BSP_LCD_DisplayOn+0x1c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4798      	blx	r3
  }
}
 80032f2:	bf00      	nop
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000584 	.word	0x20000584

080032fc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	; 0x38
 8003300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	623b      	str	r3, [r7, #32]
 8003306:	4b61      	ldr	r3, [pc, #388]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330a:	4a60      	ldr	r2, [pc, #384]	; (800348c <BSP_LCD_MspInit+0x190>)
 800330c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003310:	6453      	str	r3, [r2, #68]	; 0x44
 8003312:	4b5e      	ldr	r3, [pc, #376]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800331a:	623b      	str	r3, [r7, #32]
 800331c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	4b5a      	ldr	r3, [pc, #360]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	4a59      	ldr	r2, [pc, #356]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003328:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800332c:	6313      	str	r3, [r2, #48]	; 0x30
 800332e:	4b57      	ldr	r3, [pc, #348]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	4b53      	ldr	r3, [pc, #332]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	4a52      	ldr	r2, [pc, #328]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6313      	str	r3, [r2, #48]	; 0x30
 800334a:	4b50      	ldr	r3, [pc, #320]	; (800348c <BSP_LCD_MspInit+0x190>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	61bb      	str	r3, [r7, #24]
 8003354:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	4b4c      	ldr	r3, [pc, #304]	; (800348c <BSP_LCD_MspInit+0x190>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a4b      	ldr	r2, [pc, #300]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003360:	f043 0302 	orr.w	r3, r3, #2
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	4b45      	ldr	r3, [pc, #276]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a44      	ldr	r2, [pc, #272]	; (800348c <BSP_LCD_MspInit+0x190>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b3e      	ldr	r3, [pc, #248]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	4a3d      	ldr	r2, [pc, #244]	; (800348c <BSP_LCD_MspInit+0x190>)
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	6313      	str	r3, [r2, #48]	; 0x30
 800339e:	4b3b      	ldr	r3, [pc, #236]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a36      	ldr	r2, [pc, #216]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033b4:	f043 0320 	orr.w	r3, r3, #32
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b34      	ldr	r3, [pc, #208]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
 80033ca:	4b30      	ldr	r3, [pc, #192]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a2f      	ldr	r2, [pc, #188]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b2d      	ldr	r3, [pc, #180]	; (800348c <BSP_LCD_MspInit+0x190>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80033e2:	f641 0358 	movw	r3, #6232	; 0x1858
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80033e8:	2302      	movs	r3, #2
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80033ec:	2300      	movs	r3, #0
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80033f4:	230e      	movs	r3, #14
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80033f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033fc:	4619      	mov	r1, r3
 80033fe:	4824      	ldr	r0, [pc, #144]	; (8003490 <BSP_LCD_MspInit+0x194>)
 8003400:	f001 f8d0 	bl	80045a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003404:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800340a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800340e:	4619      	mov	r1, r3
 8003410:	4820      	ldr	r0, [pc, #128]	; (8003494 <BSP_LCD_MspInit+0x198>)
 8003412:	f001 f8c7 	bl	80045a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003416:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800341c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003420:	4619      	mov	r1, r3
 8003422:	481d      	ldr	r0, [pc, #116]	; (8003498 <BSP_LCD_MspInit+0x19c>)
 8003424:	f001 f8be 	bl	80045a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003428:	2348      	movs	r3, #72	; 0x48
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800342c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	481a      	ldr	r0, [pc, #104]	; (800349c <BSP_LCD_MspInit+0x1a0>)
 8003434:	f001 f8b6 	bl	80045a4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800343e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003442:	4619      	mov	r1, r3
 8003444:	4816      	ldr	r0, [pc, #88]	; (80034a0 <BSP_LCD_MspInit+0x1a4>)
 8003446:	f001 f8ad 	bl	80045a4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800344a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003454:	4619      	mov	r1, r3
 8003456:	4813      	ldr	r0, [pc, #76]	; (80034a4 <BSP_LCD_MspInit+0x1a8>)
 8003458:	f001 f8a4 	bl	80045a4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800345c:	2303      	movs	r3, #3
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003460:	2309      	movs	r3, #9
 8003462:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	4619      	mov	r1, r3
 800346a:	480a      	ldr	r0, [pc, #40]	; (8003494 <BSP_LCD_MspInit+0x198>)
 800346c:	f001 f89a 	bl	80045a4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003470:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4809      	ldr	r0, [pc, #36]	; (80034a4 <BSP_LCD_MspInit+0x1a8>)
 800347e:	f001 f891 	bl	80045a4 <HAL_GPIO_Init>
}
 8003482:	bf00      	nop
 8003484:	3738      	adds	r7, #56	; 0x38
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800
 8003490:	40020000 	.word	0x40020000
 8003494:	40020400 	.word	0x40020400
 8003498:	40020800 	.word	0x40020800
 800349c:	40020c00 	.word	0x40020c00
 80034a0:	40021400 	.word	0x40021400
 80034a4:	40021800 	.word	0x40021800

080034a8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80034a8:	b5b0      	push	{r4, r5, r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	603a      	str	r2, [r7, #0]
 80034b2:	80fb      	strh	r3, [r7, #6]
 80034b4:	460b      	mov	r3, r1
 80034b6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <BSP_LCD_DrawPixel+0x44>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <BSP_LCD_DrawPixel+0x48>)
 80034be:	2134      	movs	r1, #52	; 0x34
 80034c0:	fb01 f303 	mul.w	r3, r1, r3
 80034c4:	4413      	add	r3, r2
 80034c6:	335c      	adds	r3, #92	; 0x5c
 80034c8:	681c      	ldr	r4, [r3, #0]
 80034ca:	88bd      	ldrh	r5, [r7, #4]
 80034cc:	f7ff fb0e 	bl	8002aec <BSP_LCD_GetXSize>
 80034d0:	4603      	mov	r3, r0
 80034d2:	fb03 f205 	mul.w	r2, r3, r5
 80034d6:	88fb      	ldrh	r3, [r7, #6]
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4423      	add	r3, r4
 80034de:	461a      	mov	r2, r3
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bdb0      	pop	{r4, r5, r7, pc}
 80034ec:	20000568 	.word	0x20000568
 80034f0:	20000450 	.word	0x20000450

080034f4 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	4603      	mov	r3, r0
 80034fc:	603a      	str	r2, [r7, #0]
 80034fe:	80fb      	strh	r3, [r7, #6]
 8003500:	460b      	mov	r3, r1
 8003502:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003504:	2300      	movs	r3, #0
 8003506:	61fb      	str	r3, [r7, #28]
 8003508:	2300      	movs	r3, #0
 800350a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003510:	4b53      	ldr	r3, [pc, #332]	; (8003660 <DrawChar+0x16c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4953      	ldr	r1, [pc, #332]	; (8003664 <DrawChar+0x170>)
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	3308      	adds	r3, #8
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	88db      	ldrh	r3, [r3, #6]
 8003526:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003528:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <DrawChar+0x16c>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	494d      	ldr	r1, [pc, #308]	; (8003664 <DrawChar+0x170>)
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	3308      	adds	r3, #8
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	889b      	ldrh	r3, [r3, #4]
 800353e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003540:	8a3b      	ldrh	r3, [r7, #16]
 8003542:	3307      	adds	r3, #7
 8003544:	2b00      	cmp	r3, #0
 8003546:	da00      	bge.n	800354a <DrawChar+0x56>
 8003548:	3307      	adds	r3, #7
 800354a:	10db      	asrs	r3, r3, #3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	b2da      	uxtb	r2, r3
 8003552:	8a3b      	ldrh	r3, [r7, #16]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e076      	b.n	800364e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003560:	8a3b      	ldrh	r3, [r7, #16]
 8003562:	3307      	adds	r3, #7
 8003564:	2b00      	cmp	r3, #0
 8003566:	da00      	bge.n	800356a <DrawChar+0x76>
 8003568:	3307      	adds	r3, #7
 800356a:	10db      	asrs	r3, r3, #3
 800356c:	461a      	mov	r2, r3
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4413      	add	r3, r2
 8003578:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800357a:	8a3b      	ldrh	r3, [r7, #16]
 800357c:	3307      	adds	r3, #7
 800357e:	2b00      	cmp	r3, #0
 8003580:	da00      	bge.n	8003584 <DrawChar+0x90>
 8003582:	3307      	adds	r3, #7
 8003584:	10db      	asrs	r3, r3, #3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <DrawChar+0x9c>
 800358a:	2b02      	cmp	r3, #2
 800358c:	d004      	beq.n	8003598 <DrawChar+0xa4>
 800358e:	e00c      	b.n	80035aa <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	617b      	str	r3, [r7, #20]
      break;
 8003596:	e016      	b.n	80035c6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	3201      	adds	r2, #1
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]
      break;
 80035a8:	e00d      	b.n	80035c6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	3301      	adds	r3, #1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	3202      	adds	r2, #2
 80035be:	7812      	ldrb	r2, [r2, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
      break;
 80035c4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e036      	b.n	800363a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80035cc:	8a3a      	ldrh	r2, [r7, #16]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	1ad2      	subs	r2, r2, r3
 80035d2:	7bfb      	ldrb	r3, [r7, #15]
 80035d4:	4413      	add	r3, r2
 80035d6:	3b01      	subs	r3, #1
 80035d8:	2201      	movs	r2, #1
 80035da:	fa02 f303 	lsl.w	r3, r2, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d012      	beq.n	800360e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	4413      	add	r3, r2
 80035f0:	b298      	uxth	r0, r3
 80035f2:	4b1b      	ldr	r3, [pc, #108]	; (8003660 <DrawChar+0x16c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	491b      	ldr	r1, [pc, #108]	; (8003664 <DrawChar+0x170>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	88bb      	ldrh	r3, [r7, #4]
 8003606:	4619      	mov	r1, r3
 8003608:	f7ff ff4e 	bl	80034a8 <BSP_LCD_DrawPixel>
 800360c:	e012      	b.n	8003634 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	b29a      	uxth	r2, r3
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	4413      	add	r3, r2
 8003616:	b298      	uxth	r0, r3
 8003618:	4b11      	ldr	r3, [pc, #68]	; (8003660 <DrawChar+0x16c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	4911      	ldr	r1, [pc, #68]	; (8003664 <DrawChar+0x170>)
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	440b      	add	r3, r1
 8003628:	3304      	adds	r3, #4
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	88bb      	ldrh	r3, [r7, #4]
 800362e:	4619      	mov	r1, r3
 8003630:	f7ff ff3a 	bl	80034a8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	3301      	adds	r3, #1
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	8a3b      	ldrh	r3, [r7, #16]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	429a      	cmp	r2, r3
 8003640:	d3c4      	bcc.n	80035cc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003642:	88bb      	ldrh	r3, [r7, #4]
 8003644:	3301      	adds	r3, #1
 8003646:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
 800364e:	8a7b      	ldrh	r3, [r7, #18]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	429a      	cmp	r2, r3
 8003654:	d384      	bcc.n	8003560 <DrawChar+0x6c>
  }
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	3720      	adds	r7, #32
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	20000568 	.word	0x20000568
 8003664:	2000056c 	.word	0x2000056c

08003668 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003676:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <FillBuffer+0x68>)
 8003678:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800367c:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800367e:	4b14      	ldr	r3, [pc, #80]	; (80036d0 <FillBuffer+0x68>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003684:	4a12      	ldr	r2, [pc, #72]	; (80036d0 <FillBuffer+0x68>)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <FillBuffer+0x68>)
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <FillBuffer+0x6c>)
 800368e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003690:	480f      	ldr	r0, [pc, #60]	; (80036d0 <FillBuffer+0x68>)
 8003692:	f000 fcf1 	bl	8004078 <HAL_DMA2D_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d115      	bne.n	80036c8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800369c:	68f9      	ldr	r1, [r7, #12]
 800369e:	480c      	ldr	r0, [pc, #48]	; (80036d0 <FillBuffer+0x68>)
 80036a0:	f000 fe52 	bl	8004348 <HAL_DMA2D_ConfigLayer>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10e      	bne.n	80036c8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	69f9      	ldr	r1, [r7, #28]
 80036b4:	4806      	ldr	r0, [pc, #24]	; (80036d0 <FillBuffer+0x68>)
 80036b6:	f000 fd32 	bl	800411e <HAL_DMA2D_Start>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d103      	bne.n	80036c8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80036c0:	210a      	movs	r1, #10
 80036c2:	4803      	ldr	r0, [pc, #12]	; (80036d0 <FillBuffer+0x68>)
 80036c4:	f000 fd56 	bl	8004174 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	200004f8 	.word	0x200004f8
 80036d4:	4002b000 	.word	0x4002b000

080036d8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <BSP_SDRAM_Init+0xac>)
 80036de:	4a2a      	ldr	r2, [pc, #168]	; (8003788 <BSP_SDRAM_Init+0xb0>)
 80036e0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <BSP_SDRAM_Init+0xb4>)
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80036e8:	4b28      	ldr	r3, [pc, #160]	; (800378c <BSP_SDRAM_Init+0xb4>)
 80036ea:	2207      	movs	r2, #7
 80036ec:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80036ee:	4b27      	ldr	r3, [pc, #156]	; (800378c <BSP_SDRAM_Init+0xb4>)
 80036f0:	2204      	movs	r2, #4
 80036f2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80036f4:	4b25      	ldr	r3, [pc, #148]	; (800378c <BSP_SDRAM_Init+0xb4>)
 80036f6:	2207      	movs	r2, #7
 80036f8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80036fa:	4b24      	ldr	r3, [pc, #144]	; (800378c <BSP_SDRAM_Init+0xb4>)
 80036fc:	2202      	movs	r2, #2
 80036fe:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003700:	4b22      	ldr	r3, [pc, #136]	; (800378c <BSP_SDRAM_Init+0xb4>)
 8003702:	2202      	movs	r2, #2
 8003704:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003706:	4b21      	ldr	r3, [pc, #132]	; (800378c <BSP_SDRAM_Init+0xb4>)
 8003708:	2202      	movs	r2, #2
 800370a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <BSP_SDRAM_Init+0xac>)
 800370e:	2201      	movs	r2, #1
 8003710:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003714:	2200      	movs	r2, #0
 8003716:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003718:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <BSP_SDRAM_Init+0xac>)
 800371a:	2204      	movs	r2, #4
 800371c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003720:	2210      	movs	r2, #16
 8003722:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003724:	4b17      	ldr	r3, [pc, #92]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003726:	2240      	movs	r2, #64	; 0x40
 8003728:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <BSP_SDRAM_Init+0xac>)
 800372c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003730:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003738:	4b12      	ldr	r3, [pc, #72]	; (8003784 <BSP_SDRAM_Init+0xac>)
 800373a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003740:	4b10      	ldr	r3, [pc, #64]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003742:	2200      	movs	r2, #0
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003746:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800374e:	2100      	movs	r1, #0
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <BSP_SDRAM_Init+0xac>)
 8003752:	f000 f87f 	bl	8003854 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003756:	490d      	ldr	r1, [pc, #52]	; (800378c <BSP_SDRAM_Init+0xb4>)
 8003758:	480a      	ldr	r0, [pc, #40]	; (8003784 <BSP_SDRAM_Init+0xac>)
 800375a:	f003 fcdd 	bl	8007118 <HAL_SDRAM_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003764:	4b0a      	ldr	r3, [pc, #40]	; (8003790 <BSP_SDRAM_Init+0xb8>)
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e002      	b.n	8003772 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800376c:	4b08      	ldr	r3, [pc, #32]	; (8003790 <BSP_SDRAM_Init+0xb8>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003772:	f240 506a 	movw	r0, #1386	; 0x56a
 8003776:	f000 f80d 	bl	8003794 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800377a:	4b05      	ldr	r3, [pc, #20]	; (8003790 <BSP_SDRAM_Init+0xb8>)
 800377c:	781b      	ldrb	r3, [r3, #0]
}
 800377e:	4618      	mov	r0, r3
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000588 	.word	0x20000588
 8003788:	a0000140 	.word	0xa0000140
 800378c:	200005bc 	.word	0x200005bc
 8003790:	2000007c 	.word	0x2000007c

08003794 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80037a0:	4b2a      	ldr	r3, [pc, #168]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037a6:	4b29      	ldr	r3, [pc, #164]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a8:	2208      	movs	r2, #8
 80037aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037ac:	4b27      	ldr	r3, [pc, #156]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ae:	2201      	movs	r2, #1
 80037b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037b2:	4b26      	ldr	r3, [pc, #152]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80037b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037bc:	4923      	ldr	r1, [pc, #140]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037be:	4824      	ldr	r0, [pc, #144]	; (8003850 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037c0:	f003 fce8 	bl	8007194 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f000 f993 	bl	8003af0 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037cc:	2202      	movs	r2, #2
 80037ce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d2:	2208      	movs	r2, #8
 80037d4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80037d6:	4b1d      	ldr	r3, [pc, #116]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d8:	2201      	movs	r2, #1
 80037da:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80037e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037e6:	4919      	ldr	r1, [pc, #100]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e8:	4819      	ldr	r0, [pc, #100]	; (8003850 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037ea:	f003 fcd3 	bl	8007194 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037ee:	4b17      	ldr	r3, [pc, #92]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f0:	2203      	movs	r2, #3
 80037f2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80037f4:	4b15      	ldr	r3, [pc, #84]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f6:	2208      	movs	r2, #8
 80037f8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80037fa:	4b14      	ldr	r3, [pc, #80]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fc:	2204      	movs	r2, #4
 80037fe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003800:	4b12      	ldr	r3, [pc, #72]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003802:	2200      	movs	r2, #0
 8003804:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003806:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380a:	4910      	ldr	r1, [pc, #64]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380c:	4810      	ldr	r0, [pc, #64]	; (8003850 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800380e:	f003 fcc1 	bl	8007194 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003812:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003816:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003818:	4b0c      	ldr	r3, [pc, #48]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381a:	2204      	movs	r2, #4
 800381c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800381e:	4b0b      	ldr	r3, [pc, #44]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003820:	2208      	movs	r2, #8
 8003822:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003824:	4b09      	ldr	r3, [pc, #36]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003826:	2201      	movs	r2, #1
 8003828:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800382e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003834:	4905      	ldr	r1, [pc, #20]	; (800384c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003836:	4806      	ldr	r0, [pc, #24]	; (8003850 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003838:	f003 fcac 	bl	8007194 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4804      	ldr	r0, [pc, #16]	; (8003850 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003840:	f003 fcdd 	bl	80071fe <HAL_SDRAM_ProgramRefreshRate>
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	200005d8 	.word	0x200005d8
 8003850:	20000588 	.word	0x20000588

08003854 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b090      	sub	sp, #64	; 0x40
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ec 	beq.w	8003a3e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	62bb      	str	r3, [r7, #40]	; 0x28
 800386a:	4b77      	ldr	r3, [pc, #476]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 800386c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386e:	4a76      	ldr	r2, [pc, #472]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6393      	str	r3, [r2, #56]	; 0x38
 8003876:	4b74      	ldr	r3, [pc, #464]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	4b70      	ldr	r3, [pc, #448]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	4a6f      	ldr	r2, [pc, #444]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 800388c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003890:	6313      	str	r3, [r2, #48]	; 0x30
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800389e:	2300      	movs	r3, #0
 80038a0:	623b      	str	r3, [r7, #32]
 80038a2:	4b69      	ldr	r3, [pc, #420]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a68      	ldr	r2, [pc, #416]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b66      	ldr	r3, [pc, #408]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	4b62      	ldr	r3, [pc, #392]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a61      	ldr	r2, [pc, #388]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b5f      	ldr	r3, [pc, #380]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b5b      	ldr	r3, [pc, #364]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a5a      	ldr	r2, [pc, #360]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038e0:	f043 0308 	orr.w	r3, r3, #8
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b58      	ldr	r3, [pc, #352]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a53      	ldr	r2, [pc, #332]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 80038fc:	f043 0310 	orr.w	r3, r3, #16
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b51      	ldr	r3, [pc, #324]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0310 	and.w	r3, r3, #16
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b4d      	ldr	r3, [pc, #308]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a45      	ldr	r2, [pc, #276]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 8003934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b43      	ldr	r3, [pc, #268]	; (8003a48 <BSP_SDRAM_MspInit+0x1f4>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800394a:	2302      	movs	r3, #2
 800394c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003952:	230c      	movs	r3, #12
 8003954:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003956:	2360      	movs	r3, #96	; 0x60
 8003958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800395a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800395e:	4619      	mov	r1, r3
 8003960:	483a      	ldr	r0, [pc, #232]	; (8003a4c <BSP_SDRAM_MspInit+0x1f8>)
 8003962:	f000 fe1f 	bl	80045a4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003966:	2301      	movs	r3, #1
 8003968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800396a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396e:	4619      	mov	r1, r3
 8003970:	4837      	ldr	r0, [pc, #220]	; (8003a50 <BSP_SDRAM_MspInit+0x1fc>)
 8003972:	f000 fe17 	bl	80045a4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003976:	f24c 7303 	movw	r3, #50947	; 0xc703
 800397a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800397c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003980:	4619      	mov	r1, r3
 8003982:	4834      	ldr	r0, [pc, #208]	; (8003a54 <BSP_SDRAM_MspInit+0x200>)
 8003984:	f000 fe0e 	bl	80045a4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003988:	f64f 7383 	movw	r3, #65411	; 0xff83
 800398c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800398e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003992:	4619      	mov	r1, r3
 8003994:	4830      	ldr	r0, [pc, #192]	; (8003a58 <BSP_SDRAM_MspInit+0x204>)
 8003996:	f000 fe05 	bl	80045a4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800399a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80039a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a4:	4619      	mov	r1, r3
 80039a6:	482d      	ldr	r0, [pc, #180]	; (8003a5c <BSP_SDRAM_MspInit+0x208>)
 80039a8:	f000 fdfc 	bl	80045a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80039ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80039b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b6:	4619      	mov	r1, r3
 80039b8:	4829      	ldr	r0, [pc, #164]	; (8003a60 <BSP_SDRAM_MspInit+0x20c>)
 80039ba:	f000 fdf3 	bl	80045a4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039c6:	2280      	movs	r2, #128	; 0x80
 80039c8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039d0:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80039d2:	4b24      	ldr	r3, [pc, #144]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039d8:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039da:	4b22      	ldr	r3, [pc, #136]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039e0:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039e8:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80039f0:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039f6:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80039fe:	4b19      	ldr	r3, [pc, #100]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a00:	2203      	movs	r2, #3
 8003a02:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a04:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a0a:	4b16      	ldr	r3, [pc, #88]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003a10:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a12:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <BSP_SDRAM_MspInit+0x214>)
 8003a14:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a1c:	4a11      	ldr	r2, [pc, #68]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003a22:	4810      	ldr	r0, [pc, #64]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a24:	f000 fa18 	bl	8003e58 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003a28:	480e      	ldr	r0, [pc, #56]	; (8003a64 <BSP_SDRAM_MspInit+0x210>)
 8003a2a:	f000 f967 	bl	8003cfc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	2038      	movs	r0, #56	; 0x38
 8003a34:	f000 f938 	bl	8003ca8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a38:	2038      	movs	r0, #56	; 0x38
 8003a3a:	f000 f951 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003a3e:	bf00      	nop
 8003a40:	3740      	adds	r7, #64	; 0x40
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40020800 	.word	0x40020800
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40021400 	.word	0x40021400
 8003a60:	40021800 	.word	0x40021800
 8003a64:	200005e8 	.word	0x200005e8
 8003a68:	40026410 	.word	0x40026410

08003a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <HAL_Init+0x40>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <HAL_Init+0x40>)
 8003a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_Init+0x40>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <HAL_Init+0x40>)
 8003a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a88:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_Init+0x40>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a07      	ldr	r2, [pc, #28]	; (8003aac <HAL_Init+0x40>)
 8003a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a94:	2003      	movs	r0, #3
 8003a96:	f000 f8fc 	bl	8003c92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a9a:	200f      	movs	r0, #15
 8003a9c:	f7fd ff72 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aa0:	f7fd ff44 	bl	800192c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00

08003ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_IncTick+0x20>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_IncTick+0x24>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4413      	add	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_IncTick+0x24>)
 8003ac2:	6013      	str	r3, [r2, #0]
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	20000084 	.word	0x20000084
 8003ad4:	20000648 	.word	0x20000648

08003ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return uwTick;
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <HAL_GetTick+0x14>)
 8003ade:	681b      	ldr	r3, [r3, #0]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000648 	.word	0x20000648

08003af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7ff ffee 	bl	8003ad8 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d005      	beq.n	8003b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	; (8003b34 <HAL_Delay+0x44>)
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4413      	add	r3, r2
 8003b14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b16:	bf00      	nop
 8003b18:	f7ff ffde 	bl	8003ad8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d8f7      	bhi.n	8003b18 <HAL_Delay+0x28>
  {
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	20000084 	.word	0x20000084

08003b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f003 0307 	and.w	r3, r3, #7
 8003b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b54:	4013      	ands	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b6a:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <__NVIC_SetPriorityGrouping+0x44>)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	60d3      	str	r3, [r2, #12]
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <__NVIC_GetPriorityGrouping+0x18>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	0a1b      	lsrs	r3, r3, #8
 8003b8a:	f003 0307 	and.w	r3, r3, #7
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	e000ed00 	.word	0xe000ed00

08003b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	db0b      	blt.n	8003bc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	f003 021f 	and.w	r2, r3, #31
 8003bb4:	4907      	ldr	r1, [pc, #28]	; (8003bd4 <__NVIC_EnableIRQ+0x38>)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	e000e100 	.word	0xe000e100

08003bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	6039      	str	r1, [r7, #0]
 8003be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	db0a      	blt.n	8003c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	490c      	ldr	r1, [pc, #48]	; (8003c24 <__NVIC_SetPriority+0x4c>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	0112      	lsls	r2, r2, #4
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	440b      	add	r3, r1
 8003bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c00:	e00a      	b.n	8003c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4908      	ldr	r1, [pc, #32]	; (8003c28 <__NVIC_SetPriority+0x50>)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	f003 030f 	and.w	r3, r3, #15
 8003c0e:	3b04      	subs	r3, #4
 8003c10:	0112      	lsls	r2, r2, #4
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	440b      	add	r3, r1
 8003c16:	761a      	strb	r2, [r3, #24]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000e100 	.word	0xe000e100
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b089      	sub	sp, #36	; 0x24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	f1c3 0307 	rsb	r3, r3, #7
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	bf28      	it	cs
 8003c4a:	2304      	movcs	r3, #4
 8003c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	3304      	adds	r3, #4
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d902      	bls.n	8003c5c <NVIC_EncodePriority+0x30>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	3b03      	subs	r3, #3
 8003c5a:	e000      	b.n	8003c5e <NVIC_EncodePriority+0x32>
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	401a      	ands	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c74:	f04f 31ff 	mov.w	r1, #4294967295
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	43d9      	mvns	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	4313      	orrs	r3, r2
         );
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ff4c 	bl	8003b38 <__NVIC_SetPriorityGrouping>
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cba:	f7ff ff61 	bl	8003b80 <__NVIC_GetPriorityGrouping>
 8003cbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68b9      	ldr	r1, [r7, #8]
 8003cc4:	6978      	ldr	r0, [r7, #20]
 8003cc6:	f7ff ffb1 	bl	8003c2c <NVIC_EncodePriority>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff ff80 	bl	8003bd8 <__NVIC_SetPriority>
}
 8003cd8:	bf00      	nop
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff54 	bl	8003b9c <__NVIC_EnableIRQ>
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d08:	f7ff fee6 	bl	8003ad8 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e099      	b.n	8003e4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d38:	e00f      	b.n	8003d5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d3a:	f7ff fecd 	bl	8003ad8 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b05      	cmp	r3, #5
 8003d46:	d908      	bls.n	8003d5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2203      	movs	r2, #3
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e078      	b.n	8003e4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e8      	bne.n	8003d3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	4b38      	ldr	r3, [pc, #224]	; (8003e54 <HAL_DMA_Init+0x158>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d107      	bne.n	8003dc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0307 	bic.w	r3, r3, #7
 8003dda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d117      	bne.n	8003e1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00e      	beq.n	8003e1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8bd 	bl	8003f80 <DMA_CheckFifoParam>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2240      	movs	r2, #64	; 0x40
 8003e10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e016      	b.n	8003e4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f874 	bl	8003f14 <DMA_CalcBaseAndBitshift>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	223f      	movs	r2, #63	; 0x3f
 8003e36:	409a      	lsls	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	f010803f 	.word	0xf010803f

08003e58 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e050      	b.n	8003f0c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d101      	bne.n	8003e7a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
 8003e78:	e048      	b.n	8003f0c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2221      	movs	r2, #33	; 0x21
 8003eb8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f82a 	bl	8003f14 <DMA_CalcBaseAndBitshift>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	223f      	movs	r2, #63	; 0x3f
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	3b10      	subs	r3, #16
 8003f24:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <DMA_CalcBaseAndBitshift+0x64>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f2e:	4a13      	ldr	r2, [pc, #76]	; (8003f7c <DMA_CalcBaseAndBitshift+0x68>)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d909      	bls.n	8003f56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f4a:	f023 0303 	bic.w	r3, r3, #3
 8003f4e:	1d1a      	adds	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
 8003f54:	e007      	b.n	8003f66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f5e:	f023 0303 	bic.w	r3, r3, #3
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	aaaaaaab 	.word	0xaaaaaaab
 8003f7c:	080158b0 	.word	0x080158b0

08003f80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d11f      	bne.n	8003fda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d856      	bhi.n	800404e <DMA_CheckFifoParam+0xce>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <DMA_CheckFifoParam+0x28>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003fb9 	.word	0x08003fb9
 8003fac:	08003fcb 	.word	0x08003fcb
 8003fb0:	08003fb9 	.word	0x08003fb9
 8003fb4:	0800404f 	.word	0x0800404f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d046      	beq.n	8004052 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e043      	b.n	8004052 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fd2:	d140      	bne.n	8004056 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd8:	e03d      	b.n	8004056 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe2:	d121      	bne.n	8004028 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d837      	bhi.n	800405a <DMA_CheckFifoParam+0xda>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <DMA_CheckFifoParam+0x70>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004001 	.word	0x08004001
 8003ff4:	08004007 	.word	0x08004007
 8003ff8:	08004001 	.word	0x08004001
 8003ffc:	08004019 	.word	0x08004019
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
      break;
 8004004:	e030      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d025      	beq.n	800405e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004016:	e022      	b.n	800405e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004020:	d11f      	bne.n	8004062 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004026:	e01c      	b.n	8004062 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d903      	bls.n	8004036 <DMA_CheckFifoParam+0xb6>
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d003      	beq.n	800403c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004034:	e018      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
      break;
 800403a:	e015      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00e      	beq.n	8004066 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	e00b      	b.n	8004066 <DMA_CheckFifoParam+0xe6>
      break;
 800404e:	bf00      	nop
 8004050:	e00a      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004052:	bf00      	nop
 8004054:	e008      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004056:	bf00      	nop
 8004058:	e006      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 800405a:	bf00      	nop
 800405c:	e004      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 800405e:	bf00      	nop
 8004060:	e002      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;   
 8004062:	bf00      	nop
 8004064:	e000      	b.n	8004068 <DMA_CheckFifoParam+0xe8>
      break;
 8004066:	bf00      	nop
    }
  } 
  
  return status; 
 8004068:	7bfb      	ldrb	r3, [r7, #15]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop

08004078 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d101      	bne.n	800408a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	e03b      	b.n	8004102 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f833 	bl	800410a <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f023 0107 	bic.w	r1, r3, #7
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68d1      	ldr	r1, [r2, #12]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	430b      	orrs	r3, r1
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004112:	bf00      	nop
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b086      	sub	sp, #24
 8004122:	af02      	add	r7, sp, #8
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_DMA2D_Start+0x1c>
 8004136:	2302      	movs	r3, #2
 8004138:	e018      	b.n	800416c <HAL_DMA2D_Start+0x4e>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	9300      	str	r3, [sp, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f989 	bl	800446c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f042 0201 	orr.w	r2, r2, #1
 8004168:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800417e:	2300      	movs	r3, #0
 8004180:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d056      	beq.n	800423e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004190:	f7ff fca2 	bl	8003ad8 <HAL_GetTick>
 8004194:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004196:	e04b      	b.n	8004230 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d023      	beq.n	80041f2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0320 	and.w	r3, r3, #32
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041b8:	f043 0202 	orr.w	r2, r3, #2
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	f043 0201 	orr.w	r2, r3, #1
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2221      	movs	r2, #33	; 0x21
 80041dc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2204      	movs	r2, #4
 80041e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e0a5      	b.n	800433e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f8:	d01a      	beq.n	8004230 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041fa:	f7ff fc6d 	bl	8003ad8 <HAL_GetTick>
 80041fe:	4602      	mov	r2, r0
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	683a      	ldr	r2, [r7, #0]
 8004206:	429a      	cmp	r2, r3
 8004208:	d302      	bcc.n	8004210 <HAL_DMA2D_PollForTransfer+0x9c>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10f      	bne.n	8004230 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	f043 0220 	orr.w	r2, r3, #32
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2203      	movs	r2, #3
 8004220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e086      	b.n	800433e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0ac      	beq.n	8004198 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d061      	beq.n	8004324 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004260:	f7ff fc3a 	bl	8003ad8 <HAL_GetTick>
 8004264:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004266:	e056      	b.n	8004316 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02e      	beq.n	80042d8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f003 0308 	and.w	r3, r3, #8
 8004280:	2b00      	cmp	r3, #0
 8004282:	d005      	beq.n	8004290 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004288:	f043 0204 	orr.w	r2, r3, #4
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f003 0320 	and.w	r3, r3, #32
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	f043 0202 	orr.w	r2, r3, #2
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2229      	movs	r2, #41	; 0x29
 80042c2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2204      	movs	r2, #4
 80042c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e032      	b.n	800433e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042de:	d01a      	beq.n	8004316 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042e0:	f7ff fbfa 	bl	8003ad8 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <HAL_DMA2D_PollForTransfer+0x182>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2203      	movs	r2, #3
 8004306:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e013      	b.n	800433e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0a1      	beq.n	8004268 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2212      	movs	r2, #18
 800432a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <HAL_DMA2D_ConfigLayer+0x20>
 8004364:	2302      	movs	r3, #2
 8004366:	e079      	b.n	800445c <HAL_DMA2D_ConfigLayer+0x114>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2202      	movs	r2, #2
 8004374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	3318      	adds	r3, #24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004392:	4b35      	ldr	r3, [pc, #212]	; (8004468 <HAL_DMA2D_ConfigLayer+0x120>)
 8004394:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b0a      	cmp	r3, #10
 800439c:	d003      	beq.n	80043a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	d107      	bne.n	80043b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e005      	b.n	80043c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d120      	bne.n	800440a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	ea02 0103 	and.w	r1, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	430a      	orrs	r2, r1
 80043de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	2b0a      	cmp	r3, #10
 80043f0:	d003      	beq.n	80043fa <HAL_DMA2D_ConfigLayer+0xb2>
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d127      	bne.n	800444a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004406:	629a      	str	r2, [r3, #40]	; 0x28
 8004408:	e01f      	b.n	800444a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	43db      	mvns	r3, r3
 8004414:	ea02 0103 	and.w	r1, r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	430a      	orrs	r2, r1
 8004420:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b0a      	cmp	r3, #10
 8004432:	d003      	beq.n	800443c <HAL_DMA2D_ConfigLayer+0xf4>
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b09      	cmp	r3, #9
 800443a:	d106      	bne.n	800444a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004448:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	ff03000f 	.word	0xff03000f

0800446c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800446c:	b480      	push	{r7}
 800446e:	b08b      	sub	sp, #44	; 0x2c
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	041a      	lsls	r2, r3, #16
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	431a      	orrs	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80044a4:	d174      	bne.n	8004590 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80044b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	431a      	orrs	r2, r3
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e053      	b.n	8004586 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d106      	bne.n	80044f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
 80044f2:	e048      	b.n	8004586 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d111      	bne.n	8004520 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	0cdb      	lsrs	r3, r3, #19
 8004500:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	0a9b      	lsrs	r3, r3, #10
 8004506:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	08db      	lsrs	r3, r3, #3
 800450c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	02db      	lsls	r3, r3, #11
 8004516:	4313      	orrs	r3, r2
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
 800451e:	e032      	b.n	8004586 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b03      	cmp	r3, #3
 8004526:	d117      	bne.n	8004558 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	0fdb      	lsrs	r3, r3, #31
 800452c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	0cdb      	lsrs	r3, r3, #19
 8004532:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	0adb      	lsrs	r3, r3, #11
 8004538:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	08db      	lsrs	r3, r3, #3
 800453e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	029b      	lsls	r3, r3, #10
 8004548:	431a      	orrs	r2, r3
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	03db      	lsls	r3, r3, #15
 800454e:	4313      	orrs	r3, r2
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	e016      	b.n	8004586 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	0f1b      	lsrs	r3, r3, #28
 800455c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	0d1b      	lsrs	r3, r3, #20
 8004562:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	0b1b      	lsrs	r3, r3, #12
 8004568:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	011a      	lsls	r2, r3, #4
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	431a      	orrs	r2, r3
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	031b      	lsls	r3, r3, #12
 800457e:	4313      	orrs	r3, r2
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800458c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800458e:	e003      	b.n	8004598 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	60da      	str	r2, [r3, #12]
}
 8004598:	bf00      	nop
 800459a:	372c      	adds	r7, #44	; 0x2c
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b089      	sub	sp, #36	; 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	e177      	b.n	80048b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c0:	2201      	movs	r2, #1
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4013      	ands	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	429a      	cmp	r2, r3
 80045da:	f040 8166 	bne.w	80048aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d005      	beq.n	80045f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d130      	bne.n	8004658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	2203      	movs	r2, #3
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	4013      	ands	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4313      	orrs	r3, r2
 800461e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800462c:	2201      	movs	r2, #1
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	091b      	lsrs	r3, r3, #4
 8004642:	f003 0201 	and.w	r2, r3, #1
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	fa02 f303 	lsl.w	r3, r2, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4313      	orrs	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f003 0303 	and.w	r3, r3, #3
 8004660:	2b03      	cmp	r3, #3
 8004662:	d017      	beq.n	8004694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	2203      	movs	r2, #3
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d123      	bne.n	80046e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	08da      	lsrs	r2, r3, #3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3208      	adds	r2, #8
 80046a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	220f      	movs	r2, #15
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4013      	ands	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	08da      	lsrs	r2, r3, #3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3208      	adds	r2, #8
 80046e2:	69b9      	ldr	r1, [r7, #24]
 80046e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	2203      	movs	r2, #3
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f003 0203 	and.w	r2, r3, #3
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 80c0 	beq.w	80048aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_GPIO_Init+0x324>)
 8004730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004732:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_GPIO_Init+0x324>)
 8004734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004738:	6453      	str	r3, [r2, #68]	; 0x44
 800473a:	4b63      	ldr	r3, [pc, #396]	; (80048c8 <HAL_GPIO_Init+0x324>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004742:	60fb      	str	r3, [r7, #12]
 8004744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004746:	4a61      	ldr	r2, [pc, #388]	; (80048cc <HAL_GPIO_Init+0x328>)
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	089b      	lsrs	r3, r3, #2
 800474c:	3302      	adds	r3, #2
 800474e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	f003 0303 	and.w	r3, r3, #3
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	220f      	movs	r2, #15
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_GPIO_Init+0x32c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d037      	beq.n	80047e2 <HAL_GPIO_Init+0x23e>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a57      	ldr	r2, [pc, #348]	; (80048d4 <HAL_GPIO_Init+0x330>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_GPIO_Init+0x23a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a56      	ldr	r2, [pc, #344]	; (80048d8 <HAL_GPIO_Init+0x334>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d02b      	beq.n	80047da <HAL_GPIO_Init+0x236>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a55      	ldr	r2, [pc, #340]	; (80048dc <HAL_GPIO_Init+0x338>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d025      	beq.n	80047d6 <HAL_GPIO_Init+0x232>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a54      	ldr	r2, [pc, #336]	; (80048e0 <HAL_GPIO_Init+0x33c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d01f      	beq.n	80047d2 <HAL_GPIO_Init+0x22e>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a53      	ldr	r2, [pc, #332]	; (80048e4 <HAL_GPIO_Init+0x340>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d019      	beq.n	80047ce <HAL_GPIO_Init+0x22a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a52      	ldr	r2, [pc, #328]	; (80048e8 <HAL_GPIO_Init+0x344>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_GPIO_Init+0x226>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a51      	ldr	r2, [pc, #324]	; (80048ec <HAL_GPIO_Init+0x348>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00d      	beq.n	80047c6 <HAL_GPIO_Init+0x222>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a50      	ldr	r2, [pc, #320]	; (80048f0 <HAL_GPIO_Init+0x34c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d007      	beq.n	80047c2 <HAL_GPIO_Init+0x21e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4f      	ldr	r2, [pc, #316]	; (80048f4 <HAL_GPIO_Init+0x350>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d101      	bne.n	80047be <HAL_GPIO_Init+0x21a>
 80047ba:	2309      	movs	r3, #9
 80047bc:	e012      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047be:	230a      	movs	r3, #10
 80047c0:	e010      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047c2:	2308      	movs	r3, #8
 80047c4:	e00e      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047c6:	2307      	movs	r3, #7
 80047c8:	e00c      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047ca:	2306      	movs	r3, #6
 80047cc:	e00a      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047ce:	2305      	movs	r3, #5
 80047d0:	e008      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047d2:	2304      	movs	r3, #4
 80047d4:	e006      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e004      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047da:	2302      	movs	r3, #2
 80047dc:	e002      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_GPIO_Init+0x240>
 80047e2:	2300      	movs	r3, #0
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	f002 0203 	and.w	r2, r2, #3
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	4093      	lsls	r3, r2
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f4:	4935      	ldr	r1, [pc, #212]	; (80048cc <HAL_GPIO_Init+0x328>)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004802:	4b3d      	ldr	r3, [pc, #244]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004826:	4a34      	ldr	r2, [pc, #208]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800482c:	4b32      	ldr	r3, [pc, #200]	; (80048f8 <HAL_GPIO_Init+0x354>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004850:	4a29      	ldr	r2, [pc, #164]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004856:	4b28      	ldr	r3, [pc, #160]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800487a:	4a1f      	ldr	r2, [pc, #124]	; (80048f8 <HAL_GPIO_Init+0x354>)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004880:	4b1d      	ldr	r3, [pc, #116]	; (80048f8 <HAL_GPIO_Init+0x354>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a4:	4a14      	ldr	r2, [pc, #80]	; (80048f8 <HAL_GPIO_Init+0x354>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	f67f ae84 	bls.w	80045c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3724      	adds	r7, #36	; 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40013800 	.word	0x40013800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40020400 	.word	0x40020400
 80048d8:	40020800 	.word	0x40020800
 80048dc:	40020c00 	.word	0x40020c00
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40021400 	.word	0x40021400
 80048e8:	40021800 	.word	0x40021800
 80048ec:	40021c00 	.word	0x40021c00
 80048f0:	40022000 	.word	0x40022000
 80048f4:	40022400 	.word	0x40022400
 80048f8:	40013c00 	.word	0x40013c00

080048fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	460b      	mov	r3, r1
 8004906:	807b      	strh	r3, [r7, #2]
 8004908:	4613      	mov	r3, r2
 800490a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800490c:	787b      	ldrb	r3, [r7, #1]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004912:	887a      	ldrh	r2, [r7, #2]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004918:	e003      	b.n	8004922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	041a      	lsls	r2, r3, #16
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	619a      	str	r2, [r3, #24]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0bf      	b.n	8004ac2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8ba 	bl	8004ad0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	699a      	ldr	r2, [r3, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004972:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004988:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	430a      	orrs	r2, r1
 8004996:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6899      	ldr	r1, [r3, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <HAL_LTDC_Init+0x19c>)
 80049a4:	400b      	ands	r3, r1
 80049a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	041b      	lsls	r3, r3, #16
 80049ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6899      	ldr	r1, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699a      	ldr	r2, [r3, #24]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68d9      	ldr	r1, [r3, #12]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_LTDC_Init+0x19c>)
 80049d2:	400b      	ands	r3, r1
 80049d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68d9      	ldr	r1, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1a      	ldr	r2, [r3, #32]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6919      	ldr	r1, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_LTDC_Init+0x19c>)
 8004a00:	400b      	ands	r3, r1
 8004a02:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	041b      	lsls	r3, r3, #16
 8004a0a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6919      	ldr	r1, [r3, #16]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6959      	ldr	r1, [r3, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_LTDC_Init+0x19c>)
 8004a2e:	400b      	ands	r3, r1
 8004a30:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	6959      	ldr	r1, [r3, #20]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004a60:	041b      	lsls	r3, r3, #16
 8004a62:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0206 	orr.w	r2, r2, #6
 8004a9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	f000f800 	.word	0xf000f800

08004ad0 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ae4:	b5b0      	push	{r4, r5, r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_LTDC_ConfigLayer+0x1a>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e02c      	b.n	8004b58 <HAL_LTDC_ConfigLayer+0x74>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2134      	movs	r1, #52	; 0x34
 8004b14:	fb01 f303 	mul.w	r3, r1, r3
 8004b18:	4413      	add	r3, r2
 8004b1a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	4614      	mov	r4, r2
 8004b22:	461d      	mov	r5, r3
 8004b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f83b 	bl	8004bb4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2201      	movs	r2, #1
 8004b44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bdb0      	pop	{r4, r5, r7, pc}

08004b60 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_LTDC_EnableDither+0x16>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e016      	b.n	8004ba4 <HAL_LTDC_EnableDither+0x44>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_LTDC_EnableDither+0x50>)
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_LTDC_EnableDither+0x50>)
 8004b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b90:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	40016800 	.word	0x40016800

08004bb4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	0c1b      	lsrs	r3, r3, #16
 8004bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd0:	4413      	add	r3, r2
 8004bd2:	041b      	lsls	r3, r3, #16
 8004bd4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	4413      	add	r3, r2
 8004be2:	3384      	adds	r3, #132	; 0x84
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	4611      	mov	r1, r2
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	01d2      	lsls	r2, r2, #7
 8004bf0:	440a      	add	r2, r1
 8004bf2:	3284      	adds	r2, #132	; 0x84
 8004bf4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004bf8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c0a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c0c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	440b      	add	r3, r1
 8004c1a:	3384      	adds	r3, #132	; 0x84
 8004c1c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c22:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	68da      	ldr	r2, [r3, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c32:	4413      	add	r3, r2
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	01db      	lsls	r3, r3, #7
 8004c42:	4413      	add	r3, r2
 8004c44:	3384      	adds	r3, #132	; 0x84
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	4611      	mov	r1, r2
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	01d2      	lsls	r2, r2, #7
 8004c52:	440a      	add	r2, r1
 8004c54:	3284      	adds	r2, #132	; 0x84
 8004c56:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c5a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c6a:	4413      	add	r3, r2
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4619      	mov	r1, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	01db      	lsls	r3, r3, #7
 8004c78:	440b      	add	r3, r1
 8004c7a:	3384      	adds	r3, #132	; 0x84
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	01db      	lsls	r3, r3, #7
 8004c8e:	4413      	add	r3, r2
 8004c90:	3384      	adds	r3, #132	; 0x84
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	01d2      	lsls	r2, r2, #7
 8004c9e:	440a      	add	r2, r1
 8004ca0:	3284      	adds	r2, #132	; 0x84
 8004ca2:	f023 0307 	bic.w	r3, r3, #7
 8004ca6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	01db      	lsls	r3, r3, #7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3384      	adds	r3, #132	; 0x84
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004cc4:	021b      	lsls	r3, r3, #8
 8004cc6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	061b      	lsls	r3, r3, #24
 8004cd8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	01db      	lsls	r3, r3, #7
 8004ce4:	4413      	add	r3, r2
 8004ce6:	3384      	adds	r3, #132	; 0x84
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	01db      	lsls	r3, r3, #7
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3384      	adds	r3, #132	; 0x84
 8004cf8:	461a      	mov	r2, r3
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d04:	461a      	mov	r2, r3
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	01db      	lsls	r3, r3, #7
 8004d18:	440b      	add	r3, r1
 8004d1a:	3384      	adds	r3, #132	; 0x84
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	01db      	lsls	r3, r3, #7
 8004d2e:	4413      	add	r3, r2
 8004d30:	3384      	adds	r3, #132	; 0x84
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	4611      	mov	r1, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	01d2      	lsls	r2, r2, #7
 8004d3e:	440a      	add	r2, r1
 8004d40:	3284      	adds	r2, #132	; 0x84
 8004d42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d46:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	01db      	lsls	r3, r3, #7
 8004d52:	4413      	add	r3, r2
 8004d54:	3384      	adds	r3, #132	; 0x84
 8004d56:	461a      	mov	r2, r3
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	01db      	lsls	r3, r3, #7
 8004d68:	4413      	add	r3, r2
 8004d6a:	3384      	adds	r3, #132	; 0x84
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	4611      	mov	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	01d2      	lsls	r2, r2, #7
 8004d78:	440a      	add	r2, r1
 8004d7a:	3284      	adds	r2, #132	; 0x84
 8004d7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004d80:	f023 0307 	bic.w	r3, r3, #7
 8004d84:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	69da      	ldr	r2, [r3, #28]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6809      	ldr	r1, [r1, #0]
 8004d92:	4608      	mov	r0, r1
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	01c9      	lsls	r1, r1, #7
 8004d98:	4401      	add	r1, r0
 8004d9a:	3184      	adds	r1, #132	; 0x84
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	01db      	lsls	r3, r3, #7
 8004daa:	4413      	add	r3, r2
 8004dac:	3384      	adds	r3, #132	; 0x84
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	4413      	add	r3, r2
 8004dbc:	3384      	adds	r3, #132	; 0x84
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	461a      	mov	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	01db      	lsls	r3, r3, #7
 8004dce:	4413      	add	r3, r2
 8004dd0:	3384      	adds	r3, #132	; 0x84
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d102      	bne.n	8004de8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004de2:	2304      	movs	r3, #4
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e01b      	b.n	8004e20 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d102      	bne.n	8004df6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004df0:	2303      	movs	r3, #3
 8004df2:	61fb      	str	r3, [r7, #28]
 8004df4:	e014      	b.n	8004e20 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	2b04      	cmp	r3, #4
 8004dfc:	d00b      	beq.n	8004e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d007      	beq.n	8004e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e0a:	2b03      	cmp	r3, #3
 8004e0c:	d003      	beq.n	8004e16 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e12:	2b07      	cmp	r3, #7
 8004e14:	d102      	bne.n	8004e1c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e16:	2302      	movs	r3, #2
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e001      	b.n	8004e20 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	461a      	mov	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	01db      	lsls	r3, r3, #7
 8004e2a:	4413      	add	r3, r2
 8004e2c:	3384      	adds	r3, #132	; 0x84
 8004e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4611      	mov	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	01d2      	lsls	r2, r2, #7
 8004e3a:	440a      	add	r2, r1
 8004e3c:	3284      	adds	r2, #132	; 0x84
 8004e3e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004e42:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	69fa      	ldr	r2, [r7, #28]
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1acb      	subs	r3, r1, r3
 8004e5a:	69f9      	ldr	r1, [r7, #28]
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e62:	68f9      	ldr	r1, [r7, #12]
 8004e64:	6809      	ldr	r1, [r1, #0]
 8004e66:	4608      	mov	r0, r1
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	01c9      	lsls	r1, r1, #7
 8004e6c:	4401      	add	r1, r0
 8004e6e:	3184      	adds	r1, #132	; 0x84
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	01db      	lsls	r3, r3, #7
 8004e7e:	4413      	add	r3, r2
 8004e80:	3384      	adds	r3, #132	; 0x84
 8004e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	4611      	mov	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	01d2      	lsls	r2, r2, #7
 8004e8e:	440a      	add	r2, r1
 8004e90:	3284      	adds	r2, #132	; 0x84
 8004e92:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e96:	f023 0307 	bic.w	r3, r3, #7
 8004e9a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	01db      	lsls	r3, r3, #7
 8004ea6:	4413      	add	r3, r2
 8004ea8:	3384      	adds	r3, #132	; 0x84
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	01db      	lsls	r3, r3, #7
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3384      	adds	r3, #132	; 0x84
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	01d2      	lsls	r2, r2, #7
 8004ecc:	440a      	add	r2, r1
 8004ece:	3284      	adds	r2, #132	; 0x84
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6013      	str	r3, [r2, #0]
}
 8004ed6:	bf00      	nop
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ee4:	b08f      	sub	sp, #60	; 0x3c
 8004ee6:	af0a      	add	r7, sp, #40	; 0x28
 8004ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e10f      	b.n	8005114 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f009 ff08 	bl	800ed24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2203      	movs	r2, #3
 8004f18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d102      	bne.n	8004f2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f003 fc5b 	bl	80087ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	603b      	str	r3, [r7, #0]
 8004f3e:	687e      	ldr	r6, [r7, #4]
 8004f40:	466d      	mov	r5, sp
 8004f42:	f106 0410 	add.w	r4, r6, #16
 8004f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f56:	1d33      	adds	r3, r6, #4
 8004f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f5a:	6838      	ldr	r0, [r7, #0]
 8004f5c:	f003 fb32 	bl	80085c4 <USB_CoreInit>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2202      	movs	r2, #2
 8004f6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e0d0      	b.n	8005114 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f003 fc49 	bl	8008810 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e04a      	b.n	800501a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	333d      	adds	r3, #61	; 0x3d
 8004f94:	2201      	movs	r2, #1
 8004f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f98:	7bfa      	ldrb	r2, [r7, #15]
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	00db      	lsls	r3, r3, #3
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	440b      	add	r3, r1
 8004fa6:	333c      	adds	r3, #60	; 0x3c
 8004fa8:	7bfa      	ldrb	r2, [r7, #15]
 8004faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	b298      	uxth	r0, r3
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3344      	adds	r3, #68	; 0x44
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fc4:	7bfa      	ldrb	r2, [r7, #15]
 8004fc6:	6879      	ldr	r1, [r7, #4]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	00db      	lsls	r3, r3, #3
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	440b      	add	r3, r1
 8004fd2:	3340      	adds	r3, #64	; 0x40
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	4613      	mov	r3, r2
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	440b      	add	r3, r1
 8004fe6:	3348      	adds	r3, #72	; 0x48
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	334c      	adds	r3, #76	; 0x4c
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3354      	adds	r3, #84	; 0x54
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	3301      	adds	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
 800501a:	7bfa      	ldrb	r2, [r7, #15]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d3af      	bcc.n	8004f84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005024:	2300      	movs	r3, #0
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e044      	b.n	80050b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800502a:	7bfa      	ldrb	r2, [r7, #15]
 800502c:	6879      	ldr	r1, [r7, #4]
 800502e:	4613      	mov	r3, r2
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005052:	7bfa      	ldrb	r2, [r7, #15]
 8005054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005056:	7bfa      	ldrb	r2, [r7, #15]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800506c:	7bfa      	ldrb	r2, [r7, #15]
 800506e:	6879      	ldr	r1, [r7, #4]
 8005070:	4613      	mov	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	4413      	add	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	440b      	add	r3, r1
 800507a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	6879      	ldr	r1, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	440b      	add	r3, r1
 8005090:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005098:	7bfa      	ldrb	r2, [r7, #15]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	3301      	adds	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d3b5      	bcc.n	800502a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	687e      	ldr	r6, [r7, #4]
 80050c6:	466d      	mov	r5, sp
 80050c8:	f106 0410 	add.w	r4, r6, #16
 80050cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050dc:	1d33      	adds	r3, r6, #4
 80050de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050e0:	6838      	ldr	r0, [r7, #0]
 80050e2:	f003 fbe1 	bl	80088a8 <USB_DevInit>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d005      	beq.n	80050f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e00d      	b.n	8005114 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f004 fd30 	bl	8009b72 <USB_DevDisconnect>

  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800511c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_PCD_Start+0x1c>
 8005134:	2302      	movs	r3, #2
 8005136:	e020      	b.n	800517a <HAL_PCD_Start+0x5e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	2b01      	cmp	r3, #1
 8005146:	d109      	bne.n	800515c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800514c:	2b01      	cmp	r3, #1
 800514e:	d005      	beq.n	800515c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f003 fb33 	bl	80087cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f004 fce0 	bl	8009b30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005182:	b590      	push	{r4, r7, lr}
 8005184:	b08d      	sub	sp, #52	; 0x34
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f004 fd9e 	bl	8009cda <USB_GetMode>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 848a 	bne.w	8005aba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fd02 	bl	8009bb4 <USB_ReadInterrupts>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f000 8480 	beq.w	8005ab8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	0a1b      	lsrs	r3, r3, #8
 80051c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f004 fcef 	bl	8009bb4 <USB_ReadInterrupts>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d107      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f002 0202 	and.w	r2, r2, #2
 80051ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 fcdd 	bl	8009bb4 <USB_ReadInterrupts>
 80051fa:	4603      	mov	r3, r0
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b10      	cmp	r3, #16
 8005202:	d161      	bne.n	80052c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0210 	bic.w	r2, r2, #16
 8005212:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f003 020f 	and.w	r2, r3, #15
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	4413      	add	r3, r2
 8005230:	3304      	adds	r3, #4
 8005232:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	0c5b      	lsrs	r3, r3, #17
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	2b02      	cmp	r3, #2
 800523e:	d124      	bne.n	800528a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005246:	4013      	ands	r3, r2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d035      	beq.n	80052b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	091b      	lsrs	r3, r3, #4
 8005254:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800525a:	b29b      	uxth	r3, r3
 800525c:	461a      	mov	r2, r3
 800525e:	6a38      	ldr	r0, [r7, #32]
 8005260:	f004 fb14 	bl	800988c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005270:	441a      	add	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	6a1a      	ldr	r2, [r3, #32]
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	091b      	lsrs	r3, r3, #4
 800527e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005282:	441a      	add	r2, r3
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
 8005288:	e016      	b.n	80052b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	0c5b      	lsrs	r3, r3, #17
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	2b06      	cmp	r3, #6
 8005294:	d110      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800529c:	2208      	movs	r2, #8
 800529e:	4619      	mov	r1, r3
 80052a0:	6a38      	ldr	r0, [r7, #32]
 80052a2:	f004 faf3 	bl	800988c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	6a1a      	ldr	r2, [r3, #32]
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	091b      	lsrs	r3, r3, #4
 80052ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052b2:	441a      	add	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0210 	orr.w	r2, r2, #16
 80052c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fc71 	bl	8009bb4 <USB_ReadInterrupts>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052dc:	f040 80a7 	bne.w	800542e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f004 fc76 	bl	8009bda <USB_ReadDevAllOutEpInterrupt>
 80052ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80052f0:	e099      	b.n	8005426 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 808e 	beq.w	800541a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005304:	b2d2      	uxtb	r2, r2
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fc9a 	bl	8009c42 <USB_ReadDevOutEPInterrupt>
 800530e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00c      	beq.n	8005334 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	461a      	mov	r2, r3
 8005328:	2301      	movs	r3, #1
 800532a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800532c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fec2 	bl	80060b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00c      	beq.n	8005358 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2308      	movs	r3, #8
 800534e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 ff98 	bl	8006288 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	f003 0310 	and.w	r3, r3, #16
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	2310      	movs	r3, #16
 8005372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d030      	beq.n	80053e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d109      	bne.n	800539e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800539c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800539e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	4413      	add	r3, r2
 80053b0:	3304      	adds	r3, #4
 80053b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	78db      	ldrb	r3, [r3, #3]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d108      	bne.n	80053ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	4619      	mov	r1, r3
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f009 fdad 	bl	800ef28 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	461a      	mov	r2, r3
 80053dc:	2302      	movs	r3, #2
 80053de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d008      	beq.n	80053fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f6:	461a      	mov	r2, r3
 80053f8:	2320      	movs	r3, #32
 80053fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	4413      	add	r3, r2
 800540e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005412:	461a      	mov	r2, r3
 8005414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005418:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	3301      	adds	r3, #1
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005422:	085b      	lsrs	r3, r3, #1
 8005424:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005428:	2b00      	cmp	r3, #0
 800542a:	f47f af62 	bne.w	80052f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f004 fbbe 	bl	8009bb4 <USB_ReadInterrupts>
 8005438:	4603      	mov	r3, r0
 800543a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005442:	f040 80db 	bne.w	80055fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f004 fbdf 	bl	8009c0e <USB_ReadDevAllInEpInterrupt>
 8005450:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005456:	e0cd      	b.n	80055f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 80c2 	beq.w	80055e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f004 fc05 	bl	8009c7e <USB_ReadDevInEPInterrupt>
 8005474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d057      	beq.n	8005530 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	2201      	movs	r2, #1
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	43db      	mvns	r3, r3
 800549a:	69f9      	ldr	r1, [r7, #28]
 800549c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054a0:	4013      	ands	r3, r2
 80054a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b0:	461a      	mov	r2, r3
 80054b2:	2301      	movs	r3, #1
 80054b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d132      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c2:	4613      	mov	r3, r2
 80054c4:	00db      	lsls	r3, r3, #3
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	334c      	adds	r3, #76	; 0x4c
 80054ce:	6819      	ldr	r1, [r3, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4403      	add	r3, r0
 80054de:	3348      	adds	r3, #72	; 0x48
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4419      	add	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e8:	4613      	mov	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4403      	add	r3, r0
 80054f2:	334c      	adds	r3, #76	; 0x4c
 80054f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d113      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	4613      	mov	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	3354      	adds	r3, #84	; 0x54
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d108      	bne.n	8005524 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800551c:	461a      	mov	r2, r3
 800551e:	2101      	movs	r1, #1
 8005520:	f004 fc0c 	bl	8009d3c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4619      	mov	r1, r3
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f009 fc77 	bl	800ee1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d008      	beq.n	800554c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	4413      	add	r3, r2
 8005542:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005546:	461a      	mov	r2, r3
 8005548:	2308      	movs	r3, #8
 800554a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 0310 	and.w	r3, r3, #16
 8005552:	2b00      	cmp	r3, #0
 8005554:	d008      	beq.n	8005568 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005562:	461a      	mov	r2, r3
 8005564:	2310      	movs	r3, #16
 8005566:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557e:	461a      	mov	r2, r3
 8005580:	2340      	movs	r3, #64	; 0x40
 8005582:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0302 	and.w	r3, r3, #2
 800558a:	2b00      	cmp	r3, #0
 800558c:	d023      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800558e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005590:	6a38      	ldr	r0, [r7, #32]
 8005592:	f003 faed 	bl	8008b70 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005598:	4613      	mov	r3, r2
 800559a:	00db      	lsls	r3, r3, #3
 800559c:	4413      	add	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	3338      	adds	r3, #56	; 0x38
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	3304      	adds	r3, #4
 80055a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	78db      	ldrb	r3, [r3, #3]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d108      	bne.n	80055c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2200      	movs	r2, #0
 80055b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f009 fcc4 	bl	800ef4c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d0:	461a      	mov	r2, r3
 80055d2:	2302      	movs	r3, #2
 80055d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80055e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fcdb 	bl	8005f9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	3301      	adds	r3, #1
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f47f af2e 	bne.w	8005458 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4618      	mov	r0, r3
 8005602:	f004 fad7 	bl	8009bb4 <USB_ReadInterrupts>
 8005606:	4603      	mov	r3, r0
 8005608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005610:	d122      	bne.n	8005658 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800562c:	2b01      	cmp	r3, #1
 800562e:	d108      	bne.n	8005642 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005638:	2100      	movs	r1, #0
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fec2 	bl	80063c4 <HAL_PCDEx_LPM_Callback>
 8005640:	e002      	b.n	8005648 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f009 fc62 	bl	800ef0c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f004 faa9 	bl	8009bb4 <USB_ReadInterrupts>
 8005662:	4603      	mov	r3, r0
 8005664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d112      	bne.n	8005694 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d102      	bne.n	8005684 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f009 fc1e 	bl	800eec0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695a      	ldr	r2, [r3, #20]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005692:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4618      	mov	r0, r3
 800569a:	f004 fa8b 	bl	8009bb4 <USB_ReadInterrupts>
 800569e:	4603      	mov	r3, r0
 80056a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a8:	f040 80b7 	bne.w	800581a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2110      	movs	r1, #16
 80056c6:	4618      	mov	r0, r3
 80056c8:	f003 fa52 	bl	8008b70 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d0:	e046      	b.n	8005760 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056de:	461a      	mov	r2, r3
 80056e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005704:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	461a      	mov	r2, r3
 8005714:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005718:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800571a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005734:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005738:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005758:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	3301      	adds	r3, #1
 800575e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005766:	429a      	cmp	r2, r3
 8005768:	d3b3      	bcc.n	80056d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005778:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800577c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005782:	2b00      	cmp	r3, #0
 8005784:	d016      	beq.n	80057b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005796:	f043 030b 	orr.w	r3, r3, #11
 800579a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ac:	f043 030b 	orr.w	r3, r3, #11
 80057b0:	6453      	str	r3, [r2, #68]	; 0x44
 80057b2:	e015      	b.n	80057e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	69fa      	ldr	r2, [r7, #28]
 80057be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80057c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80057ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	69fa      	ldr	r2, [r7, #28]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057da:	f043 030b 	orr.w	r3, r3, #11
 80057de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80057f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6818      	ldr	r0, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005804:	461a      	mov	r2, r3
 8005806:	f004 fa99 	bl	8009d3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005818:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f004 f9c8 	bl	8009bb4 <USB_ReadInterrupts>
 8005824:	4603      	mov	r3, r0
 8005826:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800582a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582e:	d124      	bne.n	800587a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f004 fa5e 	bl	8009cf6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f003 fa13 	bl	8008c6a <USB_GetDevSpeed>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681c      	ldr	r4, [r3, #0]
 8005850:	f001 fa34 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8005854:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800585a:	b2db      	uxtb	r3, r3
 800585c:	461a      	mov	r2, r3
 800585e:	4620      	mov	r0, r4
 8005860:	f002 ff12 	bl	8008688 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f009 fb02 	bl	800ee6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695a      	ldr	r2, [r3, #20]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005878:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f004 f998 	bl	8009bb4 <USB_ReadInterrupts>
 8005884:	4603      	mov	r3, r0
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b08      	cmp	r3, #8
 800588c:	d10a      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f009 fadf 	bl	800ee52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f002 0208 	and.w	r2, r2, #8
 80058a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f004 f983 	bl	8009bb4 <USB_ReadInterrupts>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d122      	bne.n	80058fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058c4:	2301      	movs	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	; 0x24
 80058c8:	e014      	b.n	80058f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ce:	4613      	mov	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	4413      	add	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	440b      	add	r3, r1
 80058d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d105      	bne.n	80058ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fb27 	bl	8005f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	3301      	adds	r3, #1
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3e5      	bcc.n	80058ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f004 f956 	bl	8009bb4 <USB_ReadInterrupts>
 8005908:	4603      	mov	r3, r0
 800590a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005912:	d13b      	bne.n	800598c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005914:	2301      	movs	r3, #1
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
 8005918:	e02b      	b.n	8005972 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	4613      	mov	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	440b      	add	r3, r1
 8005938:	3340      	adds	r3, #64	; 0x40
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d115      	bne.n	800596c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005940:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005942:	2b00      	cmp	r3, #0
 8005944:	da12      	bge.n	800596c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594a:	4613      	mov	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	4413      	add	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	440b      	add	r3, r1
 8005954:	333f      	adds	r3, #63	; 0x3f
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	b2db      	uxtb	r3, r3
 800595e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005962:	b2db      	uxtb	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fae8 	bl	8005f3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	3301      	adds	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005978:	429a      	cmp	r2, r3
 800597a:	d3ce      	bcc.n	800591a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695a      	ldr	r2, [r3, #20]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800598a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f004 f90f 	bl	8009bb4 <USB_ReadInterrupts>
 8005996:	4603      	mov	r3, r0
 8005998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800599c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80059a0:	d155      	bne.n	8005a4e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059a2:	2301      	movs	r3, #1
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
 80059a6:	e045      	b.n	8005a34 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	4613      	mov	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	4413      	add	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d12e      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	da2b      	bge.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80059e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d121      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ee:	4613      	mov	r3, r2
 80059f0:	00db      	lsls	r3, r3, #3
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	69fa      	ldr	r2, [r7, #28]
 8005a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a2a:	6053      	str	r3, [r2, #4]
            break;
 8005a2c:	e007      	b.n	8005a3e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a30:	3301      	adds	r3, #1
 8005a32:	627b      	str	r3, [r7, #36]	; 0x24
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d3b4      	bcc.n	80059a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695a      	ldr	r2, [r3, #20]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4618      	mov	r0, r3
 8005a54:	f004 f8ae 	bl	8009bb4 <USB_ReadInterrupts>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d10a      	bne.n	8005a7a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f009 fa83 	bl	800ef70 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f004 f898 	bl	8009bb4 <USB_ReadInterrupts>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d115      	bne.n	8005aba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f009 fa73 	bl	800ef8c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6859      	ldr	r1, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
 8005ab6:	e000      	b.n	8005aba <HAL_PCD_IRQHandler+0x938>
      return;
 8005ab8:	bf00      	nop
    }
  }
}
 8005aba:	3734      	adds	r7, #52	; 0x34
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd90      	pop	{r4, r7, pc}

08005ac0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	460b      	mov	r3, r1
 8005aca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d101      	bne.n	8005ada <HAL_PCD_SetAddress+0x1a>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	e013      	b.n	8005b02 <HAL_PCD_SetAddress+0x42>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	78fa      	ldrb	r2, [r7, #3]
 8005ae6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	78fa      	ldrb	r2, [r7, #3]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f003 fff6 	bl	8009ae4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	4608      	mov	r0, r1
 8005b14:	4611      	mov	r1, r2
 8005b16:	461a      	mov	r2, r3
 8005b18:	4603      	mov	r3, r0
 8005b1a:	70fb      	strb	r3, [r7, #3]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	803b      	strh	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b24:	2300      	movs	r3, #0
 8005b26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	da0f      	bge.n	8005b50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b30:	78fb      	ldrb	r3, [r7, #3]
 8005b32:	f003 020f 	and.w	r2, r3, #15
 8005b36:	4613      	mov	r3, r2
 8005b38:	00db      	lsls	r3, r3, #3
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	3338      	adds	r3, #56	; 0x38
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	3304      	adds	r3, #4
 8005b46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	705a      	strb	r2, [r3, #1]
 8005b4e:	e00f      	b.n	8005b70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b50:	78fb      	ldrb	r3, [r7, #3]
 8005b52:	f003 020f 	and.w	r2, r3, #15
 8005b56:	4613      	mov	r3, r2
 8005b58:	00db      	lsls	r3, r3, #3
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	3304      	adds	r3, #4
 8005b68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005b7c:	883a      	ldrh	r2, [r7, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	78ba      	ldrb	r2, [r7, #2]
 8005b86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005b9a:	78bb      	ldrb	r3, [r7, #2]
 8005b9c:	2b02      	cmp	r3, #2
 8005b9e:	d102      	bne.n	8005ba6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_PCD_EP_Open+0xaa>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e00e      	b.n	8005bd2 <HAL_PCD_EP_Open+0xc8>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68f9      	ldr	r1, [r7, #12]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f003 f876 	bl	8008cb4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005be6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	da0f      	bge.n	8005c0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bee:	78fb      	ldrb	r3, [r7, #3]
 8005bf0:	f003 020f 	and.w	r2, r3, #15
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3338      	adds	r3, #56	; 0x38
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	3304      	adds	r3, #4
 8005c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	705a      	strb	r2, [r3, #1]
 8005c0c:	e00f      	b.n	8005c2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	f003 020f 	and.w	r2, r3, #15
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c2e:	78fb      	ldrb	r3, [r7, #3]
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_PCD_EP_Close+0x6e>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e00e      	b.n	8005c66 <HAL_PCD_EP_Close+0x8c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f003 f8b4 	bl	8008dc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	60f8      	str	r0, [r7, #12]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c7e:	7afb      	ldrb	r3, [r7, #11]
 8005c80:	f003 020f 	and.w	r2, r3, #15
 8005c84:	4613      	mov	r3, r2
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	3304      	adds	r3, #4
 8005c96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	683a      	ldr	r2, [r7, #0]
 8005ca2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005cb0:	7afb      	ldrb	r3, [r7, #11]
 8005cb2:	f003 030f 	and.w	r3, r3, #15
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d102      	bne.n	8005cca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005cca:	7afb      	ldrb	r3, [r7, #11]
 8005ccc:	f003 030f 	and.w	r3, r3, #15
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	461a      	mov	r2, r3
 8005ce0:	6979      	ldr	r1, [r7, #20]
 8005ce2:	f003 fb93 	bl	800940c <USB_EP0StartXfer>
 8005ce6:	e008      	b.n	8005cfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6818      	ldr	r0, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	6979      	ldr	r1, [r7, #20]
 8005cf6:	f003 f941 	bl	8008f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3718      	adds	r7, #24
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	f003 020f 	and.w	r2, r3, #15
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4413      	add	r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	607a      	str	r2, [r7, #4]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	460b      	mov	r3, r1
 8005d42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	3338      	adds	r3, #56	; 0x38
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4413      	add	r3, r2
 8005d58:	3304      	adds	r3, #4
 8005d5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	2201      	movs	r2, #1
 8005d72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d74:	7afb      	ldrb	r3, [r7, #11]
 8005d76:	f003 030f 	and.w	r3, r3, #15
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d8e:	7afb      	ldrb	r3, [r7, #11]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	f003 fb31 	bl	800940c <USB_EP0StartXfer>
 8005daa:	e008      	b.n	8005dbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6818      	ldr	r0, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	461a      	mov	r2, r3
 8005db8:	6979      	ldr	r1, [r7, #20]
 8005dba:	f003 f8df 	bl	8008f7c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d901      	bls.n	8005de6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e050      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005de6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	da0f      	bge.n	8005e0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	f003 020f 	and.w	r2, r3, #15
 8005df4:	4613      	mov	r3, r2
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	3338      	adds	r3, #56	; 0x38
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	4413      	add	r3, r2
 8005e02:	3304      	adds	r3, #4
 8005e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	705a      	strb	r2, [r3, #1]
 8005e0c:	e00d      	b.n	8005e2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e0e:	78fa      	ldrb	r2, [r7, #3]
 8005e10:	4613      	mov	r3, r2
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	78fb      	ldrb	r3, [r7, #3]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_PCD_EP_SetStall+0x82>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e01e      	b.n	8005e88 <HAL_PCD_EP_SetStall+0xc0>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f003 fd6f 	bl	800993c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 030f 	and.w	r3, r3, #15
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6818      	ldr	r0, [r3, #0]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	b2d9      	uxtb	r1, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e78:	461a      	mov	r2, r3
 8005e7a:	f003 ff5f 	bl	8009d3c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3710      	adds	r7, #16
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	460b      	mov	r3, r1
 8005e9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005e9c:	78fb      	ldrb	r3, [r7, #3]
 8005e9e:	f003 020f 	and.w	r2, r3, #15
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d901      	bls.n	8005eae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e042      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	da0f      	bge.n	8005ed6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	00db      	lsls	r3, r3, #3
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	3338      	adds	r3, #56	; 0x38
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	3304      	adds	r3, #4
 8005ecc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	705a      	strb	r2, [r3, #1]
 8005ed4:	e00f      	b.n	8005ef6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ed6:	78fb      	ldrb	r3, [r7, #3]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	4613      	mov	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	3304      	adds	r3, #4
 8005eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_EP_ClrStall+0x86>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e00e      	b.n	8005f34 <HAL_PCD_EP_ClrStall+0xa4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f003 fd77 	bl	8009a18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	460b      	mov	r3, r1
 8005f46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005f48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da0c      	bge.n	8005f6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	f003 020f 	and.w	r2, r3, #15
 8005f56:	4613      	mov	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	3338      	adds	r3, #56	; 0x38
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4413      	add	r3, r2
 8005f64:	3304      	adds	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e00c      	b.n	8005f84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	f003 020f 	and.w	r2, r3, #15
 8005f70:	4613      	mov	r3, r2
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	4413      	add	r3, r2
 8005f80:	3304      	adds	r3, #4
 8005f82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f003 fb96 	bl	80096bc <USB_EPStopXfer>
 8005f90:	4603      	mov	r3, r0
 8005f92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08a      	sub	sp, #40	; 0x28
 8005fa2:	af02      	add	r7, sp, #8
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	00db      	lsls	r3, r3, #3
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	3338      	adds	r3, #56	; 0x38
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1a      	ldr	r2, [r3, #32]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d901      	bls.n	8005fd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e06c      	b.n	80060b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d902      	bls.n	8005ff2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3303      	adds	r3, #3
 8005ff6:	089b      	lsrs	r3, r3, #2
 8005ff8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ffa:	e02b      	b.n	8006054 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699a      	ldr	r2, [r3, #24]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	429a      	cmp	r2, r3
 8006010:	d902      	bls.n	8006018 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	3303      	adds	r3, #3
 800601c:	089b      	lsrs	r3, r3, #2
 800601e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6919      	ldr	r1, [r3, #16]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006030:	b2db      	uxtb	r3, r3
 8006032:	9300      	str	r3, [sp, #0]
 8006034:	4603      	mov	r3, r0
 8006036:	6978      	ldr	r0, [r7, #20]
 8006038:	f003 fbea 	bl	8009810 <USB_WritePacket>

    ep->xfer_buff  += len;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	691a      	ldr	r2, [r3, #16]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	441a      	add	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	441a      	add	r2, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	b29b      	uxth	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	429a      	cmp	r2, r3
 8006068:	d809      	bhi.n	800607e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006072:	429a      	cmp	r2, r3
 8006074:	d203      	bcs.n	800607e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1be      	bne.n	8005ffc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	429a      	cmp	r2, r3
 8006088:	d811      	bhi.n	80060ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	2201      	movs	r2, #1
 8006092:	fa02 f303 	lsl.w	r3, r2, r3
 8006096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	43db      	mvns	r3, r3
 80060a4:	6939      	ldr	r1, [r7, #16]
 80060a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060aa:	4013      	ands	r3, r2
 80060ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3720      	adds	r7, #32
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b088      	sub	sp, #32
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	333c      	adds	r3, #60	; 0x3c
 80060d0:	3304      	adds	r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d17b      	bne.n	80061e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d015      	beq.n	8006124 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	4a61      	ldr	r2, [pc, #388]	; (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f240 80b9 	bls.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80b3 	beq.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006120:	6093      	str	r3, [r2, #8]
 8006122:	e0a7      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	2320      	movs	r3, #32
 800613e:	6093      	str	r3, [r2, #8]
 8006140:	e098      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8093 	bne.w	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	4a4b      	ldr	r2, [pc, #300]	; (8006280 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d90f      	bls.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800616c:	461a      	mov	r2, r3
 800616e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006172:	6093      	str	r3, [r2, #8]
 8006174:	e07e      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	4613      	mov	r3, r2
 800617a:	00db      	lsls	r3, r3, #3
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
 8006188:	3304      	adds	r3, #4
 800618a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	69da      	ldr	r2, [r3, #28]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	0159      	lsls	r1, r3, #5
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	440b      	add	r3, r1
 8006198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d114      	bne.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80061c0:	461a      	mov	r2, r3
 80061c2:	2101      	movs	r1, #1
 80061c4:	f003 fdba 	bl	8009d3c <USB_EP0_OutStart>
 80061c8:	e006      	b.n	80061d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	441a      	add	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	4619      	mov	r1, r3
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f008 fe02 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
 80061e4:	e046      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4a26      	ldr	r2, [pc, #152]	; (8006284 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d124      	bne.n	8006238 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	461a      	mov	r2, r3
 8006206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	e032      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	f003 0320 	and.w	r3, r3, #32
 8006214:	2b00      	cmp	r3, #0
 8006216:	d008      	beq.n	800622a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006224:	461a      	mov	r2, r3
 8006226:	2320      	movs	r3, #32
 8006228:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	b2db      	uxtb	r3, r3
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f008 fdd9 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
 8006236:	e01d      	b.n	8006274 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d114      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d108      	bne.n	8006268 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006260:	461a      	mov	r2, r3
 8006262:	2100      	movs	r1, #0
 8006264:	f003 fd6a 	bl	8009d3c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	4619      	mov	r1, r3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f008 fdba 	bl	800ede8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3720      	adds	r7, #32
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	4f54300a 	.word	0x4f54300a
 8006284:	4f54310a 	.word	0x4f54310a

08006288 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	333c      	adds	r3, #60	; 0x3c
 80062a0:	3304      	adds	r3, #4
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d90e      	bls.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d009      	beq.n	80062dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f008 fd71 	bl	800edc4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <PCD_EP_OutSetupPacket_int+0x88>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d90c      	bls.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d108      	bne.n	8006304 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062fc:	461a      	mov	r2, r3
 80062fe:	2101      	movs	r1, #1
 8006300:	f003 fd1c 	bl	8009d3c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	4f54300a 	.word	0x4f54300a

08006314 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	4613      	mov	r3, r2
 8006322:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d107      	bne.n	8006342 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006332:	883b      	ldrh	r3, [r7, #0]
 8006334:	0419      	lsls	r1, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	430a      	orrs	r2, r1
 800633e:	629a      	str	r2, [r3, #40]	; 0x28
 8006340:	e028      	b.n	8006394 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	0c1b      	lsrs	r3, r3, #16
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006350:	2300      	movs	r3, #0
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e00d      	b.n	8006372 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	3340      	adds	r3, #64	; 0x40
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	0c1b      	lsrs	r3, r3, #16
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	4413      	add	r3, r2
 800636a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	3301      	adds	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	3b01      	subs	r3, #1
 8006378:	429a      	cmp	r2, r3
 800637a:	d3ec      	bcc.n	8006356 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800637c:	883b      	ldrh	r3, [r7, #0]
 800637e:	0418      	lsls	r0, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	3b01      	subs	r3, #1
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	4302      	orrs	r2, r0
 800638c:	3340      	adds	r3, #64	; 0x40
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	460b      	mov	r3, r1
 80063ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	887a      	ldrh	r2, [r7, #2]
 80063b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	460b      	mov	r3, r1
 80063ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b086      	sub	sp, #24
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e267      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0301 	and.w	r3, r3, #1
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d075      	beq.n	80064e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063fa:	4b88      	ldr	r3, [pc, #544]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 030c 	and.w	r3, r3, #12
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00c      	beq.n	8006420 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006406:	4b85      	ldr	r3, [pc, #532]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800640e:	2b08      	cmp	r3, #8
 8006410:	d112      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006412:	4b82      	ldr	r3, [pc, #520]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641e:	d10b      	bne.n	8006438 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006420:	4b7e      	ldr	r3, [pc, #504]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d05b      	beq.n	80064e4 <HAL_RCC_OscConfig+0x108>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d157      	bne.n	80064e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e242      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006440:	d106      	bne.n	8006450 <HAL_RCC_OscConfig+0x74>
 8006442:	4b76      	ldr	r3, [pc, #472]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a75      	ldr	r2, [pc, #468]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	e01d      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006458:	d10c      	bne.n	8006474 <HAL_RCC_OscConfig+0x98>
 800645a:	4b70      	ldr	r3, [pc, #448]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a6f      	ldr	r2, [pc, #444]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006464:	6013      	str	r3, [r2, #0]
 8006466:	4b6d      	ldr	r3, [pc, #436]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a6c      	ldr	r2, [pc, #432]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800646c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006470:	6013      	str	r3, [r2, #0]
 8006472:	e00b      	b.n	800648c <HAL_RCC_OscConfig+0xb0>
 8006474:	4b69      	ldr	r3, [pc, #420]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a68      	ldr	r2, [pc, #416]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800647a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800647e:	6013      	str	r3, [r2, #0]
 8006480:	4b66      	ldr	r3, [pc, #408]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a65      	ldr	r2, [pc, #404]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d013      	beq.n	80064bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fd fb20 	bl	8003ad8 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649c:	f7fd fb1c 	bl	8003ad8 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b64      	cmp	r3, #100	; 0x64
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e207      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ae:	4b5b      	ldr	r3, [pc, #364]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0f0      	beq.n	800649c <HAL_RCC_OscConfig+0xc0>
 80064ba:	e014      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064bc:	f7fd fb0c 	bl	8003ad8 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c4:	f7fd fb08 	bl	8003ad8 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b64      	cmp	r3, #100	; 0x64
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e1f3      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064d6:	4b51      	ldr	r3, [pc, #324]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0xe8>
 80064e2:	e000      	b.n	80064e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d063      	beq.n	80065ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064f2:	4b4a      	ldr	r3, [pc, #296]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d00b      	beq.n	8006516 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064fe:	4b47      	ldr	r3, [pc, #284]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006506:	2b08      	cmp	r3, #8
 8006508:	d11c      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800650a:	4b44      	ldr	r3, [pc, #272]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d116      	bne.n	8006544 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006516:	4b41      	ldr	r3, [pc, #260]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d001      	beq.n	800652e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e1c7      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652e:	4b3b      	ldr	r3, [pc, #236]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	4937      	ldr	r1, [pc, #220]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800653e:	4313      	orrs	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006542:	e03a      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d020      	beq.n	800658e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800654c:	4b34      	ldr	r3, [pc, #208]	; (8006620 <HAL_RCC_OscConfig+0x244>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006552:	f7fd fac1 	bl	8003ad8 <HAL_GetTick>
 8006556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006558:	e008      	b.n	800656c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800655a:	f7fd fabd 	bl	8003ad8 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e1a8      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656c:	4b2b      	ldr	r3, [pc, #172]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d0f0      	beq.n	800655a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006578:	4b28      	ldr	r3, [pc, #160]	; (800661c <HAL_RCC_OscConfig+0x240>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4925      	ldr	r1, [pc, #148]	; (800661c <HAL_RCC_OscConfig+0x240>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]
 800658c:	e015      	b.n	80065ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800658e:	4b24      	ldr	r3, [pc, #144]	; (8006620 <HAL_RCC_OscConfig+0x244>)
 8006590:	2200      	movs	r2, #0
 8006592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006594:	f7fd faa0 	bl	8003ad8 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659c:	f7fd fa9c 	bl	8003ad8 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e187      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065ae:	4b1b      	ldr	r3, [pc, #108]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0308 	and.w	r3, r3, #8
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d036      	beq.n	8006634 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	695b      	ldr	r3, [r3, #20]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065ce:	4b15      	ldr	r3, [pc, #84]	; (8006624 <HAL_RCC_OscConfig+0x248>)
 80065d0:	2201      	movs	r2, #1
 80065d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065d4:	f7fd fa80 	bl	8003ad8 <HAL_GetTick>
 80065d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065da:	e008      	b.n	80065ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065dc:	f7fd fa7c 	bl	8003ad8 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d901      	bls.n	80065ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e167      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065ee:	4b0b      	ldr	r3, [pc, #44]	; (800661c <HAL_RCC_OscConfig+0x240>)
 80065f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d0f0      	beq.n	80065dc <HAL_RCC_OscConfig+0x200>
 80065fa:	e01b      	b.n	8006634 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065fc:	4b09      	ldr	r3, [pc, #36]	; (8006624 <HAL_RCC_OscConfig+0x248>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006602:	f7fd fa69 	bl	8003ad8 <HAL_GetTick>
 8006606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006608:	e00e      	b.n	8006628 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800660a:	f7fd fa65 	bl	8003ad8 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d907      	bls.n	8006628 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e150      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800661c:	40023800 	.word	0x40023800
 8006620:	42470000 	.word	0x42470000
 8006624:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006628:	4b88      	ldr	r3, [pc, #544]	; (800684c <HAL_RCC_OscConfig+0x470>)
 800662a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	d1ea      	bne.n	800660a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0304 	and.w	r3, r3, #4
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 8097 	beq.w	8006770 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006642:	2300      	movs	r3, #0
 8006644:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006646:	4b81      	ldr	r3, [pc, #516]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d10f      	bne.n	8006672 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	4b7d      	ldr	r3, [pc, #500]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	4a7c      	ldr	r2, [pc, #496]	; (800684c <HAL_RCC_OscConfig+0x470>)
 800665c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006660:	6413      	str	r3, [r2, #64]	; 0x40
 8006662:	4b7a      	ldr	r3, [pc, #488]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800666e:	2301      	movs	r3, #1
 8006670:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006672:	4b77      	ldr	r3, [pc, #476]	; (8006850 <HAL_RCC_OscConfig+0x474>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	2b00      	cmp	r3, #0
 800667c:	d118      	bne.n	80066b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800667e:	4b74      	ldr	r3, [pc, #464]	; (8006850 <HAL_RCC_OscConfig+0x474>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a73      	ldr	r2, [pc, #460]	; (8006850 <HAL_RCC_OscConfig+0x474>)
 8006684:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800668a:	f7fd fa25 	bl	8003ad8 <HAL_GetTick>
 800668e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006690:	e008      	b.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006692:	f7fd fa21 	bl	8003ad8 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e10c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066a4:	4b6a      	ldr	r3, [pc, #424]	; (8006850 <HAL_RCC_OscConfig+0x474>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0f0      	beq.n	8006692 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d106      	bne.n	80066c6 <HAL_RCC_OscConfig+0x2ea>
 80066b8:	4b64      	ldr	r3, [pc, #400]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066bc:	4a63      	ldr	r2, [pc, #396]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6713      	str	r3, [r2, #112]	; 0x70
 80066c4:	e01c      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	2b05      	cmp	r3, #5
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0x30c>
 80066ce:	4b5f      	ldr	r3, [pc, #380]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	4a5e      	ldr	r2, [pc, #376]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066d4:	f043 0304 	orr.w	r3, r3, #4
 80066d8:	6713      	str	r3, [r2, #112]	; 0x70
 80066da:	4b5c      	ldr	r3, [pc, #368]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066de:	4a5b      	ldr	r2, [pc, #364]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066e0:	f043 0301 	orr.w	r3, r3, #1
 80066e4:	6713      	str	r3, [r2, #112]	; 0x70
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0x324>
 80066e8:	4b58      	ldr	r3, [pc, #352]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ec:	4a57      	ldr	r2, [pc, #348]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	6713      	str	r3, [r2, #112]	; 0x70
 80066f4:	4b55      	ldr	r3, [pc, #340]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066f8:	4a54      	ldr	r2, [pc, #336]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80066fa:	f023 0304 	bic.w	r3, r3, #4
 80066fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d015      	beq.n	8006734 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006708:	f7fd f9e6 	bl	8003ad8 <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670e:	e00a      	b.n	8006726 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006710:	f7fd f9e2 	bl	8003ad8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	f241 3288 	movw	r2, #5000	; 0x1388
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e0cb      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006726:	4b49      	ldr	r3, [pc, #292]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d0ee      	beq.n	8006710 <HAL_RCC_OscConfig+0x334>
 8006732:	e014      	b.n	800675e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006734:	f7fd f9d0 	bl	8003ad8 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800673a:	e00a      	b.n	8006752 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800673c:	f7fd f9cc 	bl	8003ad8 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	f241 3288 	movw	r2, #5000	; 0x1388
 800674a:	4293      	cmp	r3, r2
 800674c:	d901      	bls.n	8006752 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e0b5      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006752:	4b3e      	ldr	r3, [pc, #248]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1ee      	bne.n	800673c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d105      	bne.n	8006770 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006764:	4b39      	ldr	r3, [pc, #228]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	4a38      	ldr	r2, [pc, #224]	; (800684c <HAL_RCC_OscConfig+0x470>)
 800676a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800676e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 80a1 	beq.w	80068bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800677a:	4b34      	ldr	r3, [pc, #208]	; (800684c <HAL_RCC_OscConfig+0x470>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	f003 030c 	and.w	r3, r3, #12
 8006782:	2b08      	cmp	r3, #8
 8006784:	d05c      	beq.n	8006840 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b02      	cmp	r3, #2
 800678c:	d141      	bne.n	8006812 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_RCC_OscConfig+0x478>)
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006794:	f7fd f9a0 	bl	8003ad8 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800679a:	e008      	b.n	80067ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800679c:	f7fd f99c 	bl	8003ad8 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d901      	bls.n	80067ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e087      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067ae:	4b27      	ldr	r3, [pc, #156]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d1f0      	bne.n	800679c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	431a      	orrs	r2, r3
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	085b      	lsrs	r3, r3, #1
 80067d2:	3b01      	subs	r3, #1
 80067d4:	041b      	lsls	r3, r3, #16
 80067d6:	431a      	orrs	r2, r3
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067dc:	061b      	lsls	r3, r3, #24
 80067de:	491b      	ldr	r1, [pc, #108]	; (800684c <HAL_RCC_OscConfig+0x470>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80067e4:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <HAL_RCC_OscConfig+0x478>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067ea:	f7fd f975 	bl	8003ad8 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067f2:	f7fd f971 	bl	8003ad8 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e05c      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006804:	4b11      	ldr	r3, [pc, #68]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x416>
 8006810:	e054      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006812:	4b10      	ldr	r3, [pc, #64]	; (8006854 <HAL_RCC_OscConfig+0x478>)
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006818:	f7fd f95e 	bl	8003ad8 <HAL_GetTick>
 800681c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800681e:	e008      	b.n	8006832 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006820:	f7fd f95a 	bl	8003ad8 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	2b02      	cmp	r3, #2
 800682c:	d901      	bls.n	8006832 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e045      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <HAL_RCC_OscConfig+0x470>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f0      	bne.n	8006820 <HAL_RCC_OscConfig+0x444>
 800683e:	e03d      	b.n	80068bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e038      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
 800684c:	40023800 	.word	0x40023800
 8006850:	40007000 	.word	0x40007000
 8006854:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <HAL_RCC_OscConfig+0x4ec>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d028      	beq.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006870:	429a      	cmp	r2, r3
 8006872:	d121      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d11a      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006888:	4013      	ands	r3, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800688e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006890:	4293      	cmp	r3, r2
 8006892:	d111      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	3b01      	subs	r3, #1
 80068a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d107      	bne.n	80068b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d001      	beq.n	80068bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	40023800 	.word	0x40023800

080068cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0cc      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80068e0:	4b68      	ldr	r3, [pc, #416]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 030f 	and.w	r3, r3, #15
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d90c      	bls.n	8006908 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f6:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 030f 	and.w	r3, r3, #15
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d001      	beq.n	8006908 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0b8      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d020      	beq.n	8006956 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006920:	4b59      	ldr	r3, [pc, #356]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	4a58      	ldr	r2, [pc, #352]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006926:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800692a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006938:	4b53      	ldr	r3, [pc, #332]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	4a52      	ldr	r2, [pc, #328]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800693e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006942:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006944:	4b50      	ldr	r3, [pc, #320]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	494d      	ldr	r1, [pc, #308]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006952:	4313      	orrs	r3, r2
 8006954:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d044      	beq.n	80069ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d107      	bne.n	800697a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	4b47      	ldr	r3, [pc, #284]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d119      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e07f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d003      	beq.n	800698a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006986:	2b03      	cmp	r3, #3
 8006988:	d107      	bne.n	800699a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800698a:	4b3f      	ldr	r3, [pc, #252]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e06f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800699a:	4b3b      	ldr	r3, [pc, #236]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e067      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069aa:	4b37      	ldr	r3, [pc, #220]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f023 0203 	bic.w	r2, r3, #3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	4934      	ldr	r1, [pc, #208]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069bc:	f7fd f88c 	bl	8003ad8 <HAL_GetTick>
 80069c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	e00a      	b.n	80069da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069c4:	f7fd f888 	bl	8003ad8 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e04f      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069da:	4b2b      	ldr	r3, [pc, #172]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	f003 020c 	and.w	r2, r3, #12
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d1eb      	bne.n	80069c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d20c      	bcs.n	8006a14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069fa:	4b22      	ldr	r3, [pc, #136]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 80069fc:	683a      	ldr	r2, [r7, #0]
 80069fe:	b2d2      	uxtb	r2, r2
 8006a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a02:	4b20      	ldr	r3, [pc, #128]	; (8006a84 <HAL_RCC_ClockConfig+0x1b8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 030f 	and.w	r3, r3, #15
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d001      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e032      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d008      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a20:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	4916      	ldr	r1, [pc, #88]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d009      	beq.n	8006a52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a3e:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	490e      	ldr	r1, [pc, #56]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a52:	f000 f82d 	bl	8006ab0 <HAL_RCC_GetSysClockFreq>
 8006a56:	4602      	mov	r2, r0
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	091b      	lsrs	r3, r3, #4
 8006a5e:	f003 030f 	and.w	r3, r3, #15
 8006a62:	490a      	ldr	r1, [pc, #40]	; (8006a8c <HAL_RCC_ClockConfig+0x1c0>)
 8006a64:	5ccb      	ldrb	r3, [r1, r3]
 8006a66:	fa22 f303 	lsr.w	r3, r2, r3
 8006a6a:	4a09      	ldr	r2, [pc, #36]	; (8006a90 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a6e:	4b09      	ldr	r3, [pc, #36]	; (8006a94 <HAL_RCC_ClockConfig+0x1c8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fa ff86 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	40023c00 	.word	0x40023c00
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	08013de0 	.word	0x08013de0
 8006a90:	20000000 	.word	0x20000000
 8006a94:	20000080 	.word	0x20000080

08006a98 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_RCC_EnableCSS+0x14>)
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	4247004c 	.word	0x4247004c

08006ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab4:	b094      	sub	sp, #80	; 0x50
 8006ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	647b      	str	r3, [r7, #68]	; 0x44
 8006abc:	2300      	movs	r3, #0
 8006abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ac8:	4b79      	ldr	r3, [pc, #484]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 030c 	and.w	r3, r3, #12
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d00d      	beq.n	8006af0 <HAL_RCC_GetSysClockFreq+0x40>
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	f200 80e1 	bhi.w	8006c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d003      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x3a>
 8006ae2:	e0db      	b.n	8006c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ae4:	4b73      	ldr	r3, [pc, #460]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006ae8:	e0db      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006aea:	4b73      	ldr	r3, [pc, #460]	; (8006cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aee:	e0d8      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006af0:	4b6f      	ldr	r3, [pc, #444]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006afa:	4b6d      	ldr	r3, [pc, #436]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d063      	beq.n	8006bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b06:	4b6a      	ldr	r3, [pc, #424]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	099b      	lsrs	r3, r3, #6
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b18:	633b      	str	r3, [r7, #48]	; 0x30
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b22:	4622      	mov	r2, r4
 8006b24:	462b      	mov	r3, r5
 8006b26:	f04f 0000 	mov.w	r0, #0
 8006b2a:	f04f 0100 	mov.w	r1, #0
 8006b2e:	0159      	lsls	r1, r3, #5
 8006b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b34:	0150      	lsls	r0, r2, #5
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	1a51      	subs	r1, r2, r1
 8006b3e:	6139      	str	r1, [r7, #16]
 8006b40:	4629      	mov	r1, r5
 8006b42:	eb63 0301 	sbc.w	r3, r3, r1
 8006b46:	617b      	str	r3, [r7, #20]
 8006b48:	f04f 0200 	mov.w	r2, #0
 8006b4c:	f04f 0300 	mov.w	r3, #0
 8006b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b54:	4659      	mov	r1, fp
 8006b56:	018b      	lsls	r3, r1, #6
 8006b58:	4651      	mov	r1, sl
 8006b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006b5e:	4651      	mov	r1, sl
 8006b60:	018a      	lsls	r2, r1, #6
 8006b62:	4651      	mov	r1, sl
 8006b64:	ebb2 0801 	subs.w	r8, r2, r1
 8006b68:	4659      	mov	r1, fp
 8006b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8006b6e:	f04f 0200 	mov.w	r2, #0
 8006b72:	f04f 0300 	mov.w	r3, #0
 8006b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b82:	4690      	mov	r8, r2
 8006b84:	4699      	mov	r9, r3
 8006b86:	4623      	mov	r3, r4
 8006b88:	eb18 0303 	adds.w	r3, r8, r3
 8006b8c:	60bb      	str	r3, [r7, #8]
 8006b8e:	462b      	mov	r3, r5
 8006b90:	eb49 0303 	adc.w	r3, r9, r3
 8006b94:	60fb      	str	r3, [r7, #12]
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	024b      	lsls	r3, r1, #9
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006bac:	4621      	mov	r1, r4
 8006bae:	024a      	lsls	r2, r1, #9
 8006bb0:	4610      	mov	r0, r2
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bc0:	f7fa f872 	bl	8000ca8 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4613      	mov	r3, r2
 8006bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bcc:	e058      	b.n	8006c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bce:	4b38      	ldr	r3, [pc, #224]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	099b      	lsrs	r3, r3, #6
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	4611      	mov	r1, r2
 8006bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006bde:	623b      	str	r3, [r7, #32]
 8006be0:	2300      	movs	r3, #0
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
 8006be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006be8:	4642      	mov	r2, r8
 8006bea:	464b      	mov	r3, r9
 8006bec:	f04f 0000 	mov.w	r0, #0
 8006bf0:	f04f 0100 	mov.w	r1, #0
 8006bf4:	0159      	lsls	r1, r3, #5
 8006bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006bfa:	0150      	lsls	r0, r2, #5
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4641      	mov	r1, r8
 8006c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c06:	4649      	mov	r1, r9
 8006c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	f04f 0300 	mov.w	r3, #0
 8006c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c20:	ebb2 040a 	subs.w	r4, r2, sl
 8006c24:	eb63 050b 	sbc.w	r5, r3, fp
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	00eb      	lsls	r3, r5, #3
 8006c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c36:	00e2      	lsls	r2, r4, #3
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	4643      	mov	r3, r8
 8006c3e:	18e3      	adds	r3, r4, r3
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	464b      	mov	r3, r9
 8006c44:	eb45 0303 	adc.w	r3, r5, r3
 8006c48:	607b      	str	r3, [r7, #4]
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	f04f 0300 	mov.w	r3, #0
 8006c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c56:	4629      	mov	r1, r5
 8006c58:	028b      	lsls	r3, r1, #10
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c60:	4621      	mov	r1, r4
 8006c62:	028a      	lsls	r2, r1, #10
 8006c64:	4610      	mov	r0, r2
 8006c66:	4619      	mov	r1, r3
 8006c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	61fa      	str	r2, [r7, #28]
 8006c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c74:	f7fa f818 	bl	8000ca8 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	f003 0303 	and.w	r3, r3, #3
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c9a:	e002      	b.n	8006ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006c9c:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3750      	adds	r7, #80	; 0x50
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cae:	bf00      	nop
 8006cb0:	40023800 	.word	0x40023800
 8006cb4:	00f42400 	.word	0x00f42400
 8006cb8:	007a1200 	.word	0x007a1200

08006cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cc0:	4b03      	ldr	r3, [pc, #12]	; (8006cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	20000000 	.word	0x20000000

08006cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006cd8:	f7ff fff0 	bl	8006cbc <HAL_RCC_GetHCLKFreq>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	0a9b      	lsrs	r3, r3, #10
 8006ce4:	f003 0307 	and.w	r3, r3, #7
 8006ce8:	4903      	ldr	r1, [pc, #12]	; (8006cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006cea:	5ccb      	ldrb	r3, [r1, r3]
 8006cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40023800 	.word	0x40023800
 8006cf8:	08013df0 	.word	0x08013df0

08006cfc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	220f      	movs	r2, #15
 8006d0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <HAL_RCC_GetClockConfig+0x5c>)
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0203 	and.w	r2, r3, #3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d18:	4b0f      	ldr	r3, [pc, #60]	; (8006d58 <HAL_RCC_GetClockConfig+0x5c>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d24:	4b0c      	ldr	r3, [pc, #48]	; (8006d58 <HAL_RCC_GetClockConfig+0x5c>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d30:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <HAL_RCC_GetClockConfig+0x5c>)
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	08db      	lsrs	r3, r3, #3
 8006d36:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <HAL_RCC_GetClockConfig+0x60>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 020f 	and.w	r2, r3, #15
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	601a      	str	r2, [r3, #0]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40023c00 	.word	0x40023c00

08006d60 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006d64:	4b06      	ldr	r3, [pc, #24]	; (8006d80 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d104      	bne.n	8006d7a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006d70:	f000 f80a 	bl	8006d88 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006d74:	4b03      	ldr	r3, [pc, #12]	; (8006d84 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	701a      	strb	r2, [r3, #0]
  }
}
 8006d7a:	bf00      	nop
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40023800 	.word	0x40023800
 8006d84:	4002380e 	.word	0x4002380e

08006d88 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0301 	and.w	r3, r3, #1
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10b      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d075      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006dcc:	4b91      	ldr	r3, [pc, #580]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006dd2:	f7fc fe81 	bl	8003ad8 <HAL_GetTick>
 8006dd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dd8:	e008      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006dda:	f7fc fe7d 	bl	8003ad8 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d901      	bls.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e189      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006dec:	4b8a      	ldr	r3, [pc, #552]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1f0      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d009      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	019a      	lsls	r2, r3, #6
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	071b      	lsls	r3, r3, #28
 8006e10:	4981      	ldr	r1, [pc, #516]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01f      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e24:	4b7c      	ldr	r3, [pc, #496]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e2a:	0f1b      	lsrs	r3, r3, #28
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	019a      	lsls	r2, r3, #6
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	061b      	lsls	r3, r3, #24
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	071b      	lsls	r3, r3, #28
 8006e44:	4974      	ldr	r1, [pc, #464]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e4c:	4b72      	ldr	r3, [pc, #456]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e52:	f023 021f 	bic.w	r2, r3, #31
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	496e      	ldr	r1, [pc, #440]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00d      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	019a      	lsls	r2, r3, #6
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	061b      	lsls	r3, r3, #24
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	4964      	ldr	r1, [pc, #400]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e8c:	4b61      	ldr	r3, [pc, #388]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e8e:	2201      	movs	r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e92:	f7fc fe21 	bl	8003ad8 <HAL_GetTick>
 8006e96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e98:	e008      	b.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e9a:	f7fc fe1d 	bl	8003ad8 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	2b02      	cmp	r3, #2
 8006ea6:	d901      	bls.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e129      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eac:	4b5a      	ldr	r3, [pc, #360]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d0f0      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d105      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d079      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ed0:	4b52      	ldr	r3, [pc, #328]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ed6:	f7fc fdff 	bl	8003ad8 <HAL_GetTick>
 8006eda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006edc:	e008      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ede:	f7fc fdfb 	bl	8003ad8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d901      	bls.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e107      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ef0:	4b49      	ldr	r3, [pc, #292]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006efc:	d0ef      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0304 	and.w	r3, r3, #4
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d020      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f0a:	4b43      	ldr	r3, [pc, #268]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f10:	0f1b      	lsrs	r3, r3, #28
 8006f12:	f003 0307 	and.w	r3, r3, #7
 8006f16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	019a      	lsls	r2, r3, #6
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	695b      	ldr	r3, [r3, #20]
 8006f22:	061b      	lsls	r3, r3, #24
 8006f24:	431a      	orrs	r2, r3
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	071b      	lsls	r3, r3, #28
 8006f2a:	493b      	ldr	r1, [pc, #236]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f32:	4b39      	ldr	r3, [pc, #228]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	3b01      	subs	r3, #1
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	4934      	ldr	r1, [pc, #208]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d01e      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f58:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f5e:	0e1b      	lsrs	r3, r3, #24
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	019a      	lsls	r2, r3, #6
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	061b      	lsls	r3, r3, #24
 8006f70:	431a      	orrs	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	4927      	ldr	r1, [pc, #156]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	4922      	ldr	r1, [pc, #136]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006f96:	4b21      	ldr	r3, [pc, #132]	; (800701c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f98:	2201      	movs	r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f9c:	f7fc fd9c 	bl	8003ad8 <HAL_GetTick>
 8006fa0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fa2:	e008      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006fa4:	f7fc fd98 	bl	8003ad8 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d901      	bls.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e0a4      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fb6:	4b18      	ldr	r3, [pc, #96]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fc2:	d1ef      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	f000 808b 	beq.w	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
 8006fd6:	4b10      	ldr	r3, [pc, #64]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006fee:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a0b      	ldr	r2, [pc, #44]	; (8007020 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ff8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006ffa:	f7fc fd6d 	bl	8003ad8 <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007000:	e010      	b.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007002:	f7fc fd69 	bl	8003ad8 <HAL_GetTick>
 8007006:	4602      	mov	r2, r0
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d909      	bls.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007010:	2303      	movs	r3, #3
 8007012:	e075      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007014:	42470068 	.word	0x42470068
 8007018:	40023800 	.word	0x40023800
 800701c:	42470070 	.word	0x42470070
 8007020:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007024:	4b38      	ldr	r3, [pc, #224]	; (8007108 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d0e8      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007030:	4b36      	ldr	r3, [pc, #216]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007038:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d02f      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007044:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007048:	693a      	ldr	r2, [r7, #16]
 800704a:	429a      	cmp	r2, r3
 800704c:	d028      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800704e:	4b2f      	ldr	r3, [pc, #188]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007056:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007058:	4b2d      	ldr	r3, [pc, #180]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800705a:	2201      	movs	r2, #1
 800705c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800705e:	4b2c      	ldr	r3, [pc, #176]	; (8007110 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007064:	4a29      	ldr	r2, [pc, #164]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800706a:	4b28      	ldr	r3, [pc, #160]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b01      	cmp	r3, #1
 8007074:	d114      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007076:	f7fc fd2f 	bl	8003ad8 <HAL_GetTick>
 800707a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800707c:	e00a      	b.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800707e:	f7fc fd2b 	bl	8003ad8 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	f241 3288 	movw	r2, #5000	; 0x1388
 800708c:	4293      	cmp	r3, r2
 800708e:	d901      	bls.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e035      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007094:	4b1d      	ldr	r3, [pc, #116]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0ee      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ac:	d10d      	bne.n	80070ca <HAL_RCCEx_PeriphCLKConfig+0x332>
 80070ae:	4b17      	ldr	r3, [pc, #92]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070c2:	4912      	ldr	r1, [pc, #72]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070c4:	4313      	orrs	r3, r2
 80070c6:	608b      	str	r3, [r1, #8]
 80070c8:	e005      	b.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80070ca:	4b10      	ldr	r3, [pc, #64]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	4a0f      	ldr	r2, [pc, #60]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070d4:	6093      	str	r3, [r2, #8]
 80070d6:	4b0d      	ldr	r3, [pc, #52]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070e2:	490a      	ldr	r1, [pc, #40]	; (800710c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d004      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070fa:	4b06      	ldr	r3, [pc, #24]	; (8007114 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80070fc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40007000 	.word	0x40007000
 800710c:	40023800 	.word	0x40023800
 8007110:	42470e40 	.word	0x42470e40
 8007114:	424711e0 	.word	0x424711e0

08007118 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d101      	bne.n	800712c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e025      	b.n	8007178 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f81d 	bl	8007180 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3304      	adds	r3, #4
 8007156:	4619      	mov	r1, r3
 8007158:	4610      	mov	r0, r2
 800715a:	f001 f919 	bl	8008390 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	461a      	mov	r2, r3
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	f001 f96e 	bl	800844a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007176:	2300      	movs	r3, #0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071a6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80071a8:	7dfb      	ldrb	r3, [r7, #23]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d101      	bne.n	80071b2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80071ae:	2302      	movs	r3, #2
 80071b0:	e021      	b.n	80071f6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d002      	beq.n	80071be <HAL_SDRAM_SendCommand+0x2a>
 80071b8:	7dfb      	ldrb	r3, [r7, #23]
 80071ba:	2b05      	cmp	r3, #5
 80071bc:	d118      	bne.n	80071f0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	68b9      	ldr	r1, [r7, #8]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f001 f9a4 	bl	800851c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d104      	bne.n	80071e6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2205      	movs	r2, #5
 80071e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071e4:	e006      	b.n	80071f4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80071ee:	e001      	b.n	80071f4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e000      	b.n	80071f6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3718      	adds	r7, #24
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d101      	bne.n	8007218 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007214:	2302      	movs	r3, #2
 8007216:	e016      	b.n	8007246 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10f      	bne.n	8007244 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4618      	mov	r0, r3
 8007234:	f001 f9af 	bl	8008596 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
 8007242:	e000      	b.n	8007246 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
}
 8007246:	4618      	mov	r0, r3
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b082      	sub	sp, #8
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e07b      	b.n	8007358 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d108      	bne.n	800727a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007270:	d009      	beq.n	8007286 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	61da      	str	r2, [r3, #28]
 8007278:	e005      	b.n	8007286 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d106      	bne.n	80072a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f885 	bl	80073b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	f003 0302 	and.w	r3, r3, #2
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	695b      	ldr	r3, [r3, #20]
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f6:	431a      	orrs	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800730a:	ea42 0103 	orr.w	r1, r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	0c1b      	lsrs	r3, r3, #16
 8007324:	f003 0104 	and.w	r1, r3, #4
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0210 	and.w	r2, r3, #16
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	69da      	ldr	r2, [r3, #28]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d101      	bne.n	8007372 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e01a      	b.n	80073a8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007388:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f81a 	bl	80073c4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_SPI_Transmit+0x22>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e126      	b.n	8007648 <HAL_SPI_Transmit+0x270>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007402:	f7fc fb69 	bl	8003ad8 <HAL_GetTick>
 8007406:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d002      	beq.n	800741e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007418:	2302      	movs	r3, #2
 800741a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800741c:	e10b      	b.n	8007636 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d002      	beq.n	800742a <HAL_SPI_Transmit+0x52>
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d102      	bne.n	8007430 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800742e:	e102      	b.n	8007636 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2203      	movs	r2, #3
 8007434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	88fa      	ldrh	r2, [r7, #6]
 8007448:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007476:	d10f      	bne.n	8007498 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007486:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007496:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d007      	beq.n	80074b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074be:	d14b      	bne.n	8007558 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d002      	beq.n	80074ce <HAL_SPI_Transmit+0xf6>
 80074c8:	8afb      	ldrh	r3, [r7, #22]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d13e      	bne.n	800754c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	881a      	ldrh	r2, [r3, #0]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074de:	1c9a      	adds	r2, r3, #2
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	3b01      	subs	r3, #1
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074f2:	e02b      	b.n	800754c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d112      	bne.n	8007528 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007506:	881a      	ldrh	r2, [r3, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	1c9a      	adds	r2, r3, #2
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29a      	uxth	r2, r3
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	86da      	strh	r2, [r3, #54]	; 0x36
 8007526:	e011      	b.n	800754c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007528:	f7fc fad6 	bl	8003ad8 <HAL_GetTick>
 800752c:	4602      	mov	r2, r0
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d803      	bhi.n	8007540 <HAL_SPI_Transmit+0x168>
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800753e:	d102      	bne.n	8007546 <HAL_SPI_Transmit+0x16e>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d102      	bne.n	800754c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007546:	2303      	movs	r3, #3
 8007548:	77fb      	strb	r3, [r7, #31]
          goto error;
 800754a:	e074      	b.n	8007636 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1ce      	bne.n	80074f4 <HAL_SPI_Transmit+0x11c>
 8007556:	e04c      	b.n	80075f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_SPI_Transmit+0x18e>
 8007560:	8afb      	ldrh	r3, [r7, #22]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d140      	bne.n	80075e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	330c      	adds	r3, #12
 8007570:	7812      	ldrb	r2, [r2, #0]
 8007572:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800758c:	e02c      	b.n	80075e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f003 0302 	and.w	r3, r3, #2
 8007598:	2b02      	cmp	r3, #2
 800759a:	d113      	bne.n	80075c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	330c      	adds	r3, #12
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ae:	1c5a      	adds	r2, r3, #1
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	3b01      	subs	r3, #1
 80075bc:	b29a      	uxth	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80075c2:	e011      	b.n	80075e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075c4:	f7fc fa88 	bl	8003ad8 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d803      	bhi.n	80075dc <HAL_SPI_Transmit+0x204>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075da:	d102      	bne.n	80075e2 <HAL_SPI_Transmit+0x20a>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d102      	bne.n	80075e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075e6:	e026      	b.n	8007636 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1cd      	bne.n	800758e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f000 fbda 	bl	8007db0 <SPI_EndRxTxTransaction>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2220      	movs	r2, #32
 8007606:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007610:	2300      	movs	r3, #0
 8007612:	613b      	str	r3, [r7, #16]
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	613b      	str	r3, [r7, #16]
 8007624:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	77fb      	strb	r3, [r7, #31]
 8007632:	e000      	b.n	8007636 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007634:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007646:	7ffb      	ldrb	r3, [r7, #31]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b088      	sub	sp, #32
 8007654:	af02      	add	r7, sp, #8
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	603b      	str	r3, [r7, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800766c:	d112      	bne.n	8007694 <HAL_SPI_Receive+0x44>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10e      	bne.n	8007694 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2204      	movs	r2, #4
 800767a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800767e:	88fa      	ldrh	r2, [r7, #6]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	4613      	mov	r3, r2
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	68b9      	ldr	r1, [r7, #8]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 f8f1 	bl	8007872 <HAL_SPI_TransmitReceive>
 8007690:	4603      	mov	r3, r0
 8007692:	e0ea      	b.n	800786a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_SPI_Receive+0x52>
 800769e:	2302      	movs	r3, #2
 80076a0:	e0e3      	b.n	800786a <HAL_SPI_Receive+0x21a>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076aa:	f7fc fa15 	bl	8003ad8 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80076bc:	2302      	movs	r3, #2
 80076be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076c0:	e0ca      	b.n	8007858 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_SPI_Receive+0x7e>
 80076c8:	88fb      	ldrh	r3, [r7, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d102      	bne.n	80076d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80076d2:	e0c1      	b.n	8007858 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2204      	movs	r2, #4
 80076d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	88fa      	ldrh	r2, [r7, #6]
 80076ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800771a:	d10f      	bne.n	800773c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800772a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800773a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b40      	cmp	r3, #64	; 0x40
 8007748:	d007      	beq.n	800775a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007758:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d162      	bne.n	8007828 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007762:	e02e      	b.n	80077c2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b01      	cmp	r3, #1
 8007770:	d115      	bne.n	800779e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f103 020c 	add.w	r2, r3, #12
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777e:	7812      	ldrb	r2, [r2, #0]
 8007780:	b2d2      	uxtb	r2, r2
 8007782:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	1c5a      	adds	r2, r3, #1
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007792:	b29b      	uxth	r3, r3
 8007794:	3b01      	subs	r3, #1
 8007796:	b29a      	uxth	r2, r3
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800779c:	e011      	b.n	80077c2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800779e:	f7fc f99b 	bl	8003ad8 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	683a      	ldr	r2, [r7, #0]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d803      	bhi.n	80077b6 <HAL_SPI_Receive+0x166>
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b4:	d102      	bne.n	80077bc <HAL_SPI_Receive+0x16c>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80077c0:	e04a      	b.n	8007858 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1cb      	bne.n	8007764 <HAL_SPI_Receive+0x114>
 80077cc:	e031      	b.n	8007832 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d113      	bne.n	8007804 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68da      	ldr	r2, [r3, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	b292      	uxth	r2, r2
 80077e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ee:	1c9a      	adds	r2, r3, #2
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	b29a      	uxth	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007802:	e011      	b.n	8007828 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007804:	f7fc f968 	bl	8003ad8 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d803      	bhi.n	800781c <HAL_SPI_Receive+0x1cc>
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781a:	d102      	bne.n	8007822 <HAL_SPI_Receive+0x1d2>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d102      	bne.n	8007828 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007822:	2303      	movs	r3, #3
 8007824:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007826:	e017      	b.n	8007858 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782c:	b29b      	uxth	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1cd      	bne.n	80077ce <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fa54 	bl	8007ce4 <SPI_EndRxTransaction>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2220      	movs	r2, #32
 8007846:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	75fb      	strb	r3, [r7, #23]
 8007854:	e000      	b.n	8007858 <HAL_SPI_Receive+0x208>
  }

error :
 8007856:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3718      	adds	r7, #24
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b08c      	sub	sp, #48	; 0x30
 8007876:	af00      	add	r7, sp, #0
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007880:	2301      	movs	r3, #1
 8007882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_SPI_TransmitReceive+0x26>
 8007894:	2302      	movs	r3, #2
 8007896:	e18a      	b.n	8007bae <HAL_SPI_TransmitReceive+0x33c>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a0:	f7fc f91a 	bl	8003ad8 <HAL_GetTick>
 80078a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d00f      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x70>
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078c8:	d107      	bne.n	80078da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d103      	bne.n	80078da <HAL_SPI_TransmitReceive+0x68>
 80078d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d6:	2b04      	cmp	r3, #4
 80078d8:	d003      	beq.n	80078e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80078da:	2302      	movs	r3, #2
 80078dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078e0:	e15b      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d005      	beq.n	80078f4 <HAL_SPI_TransmitReceive+0x82>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <HAL_SPI_TransmitReceive+0x82>
 80078ee:	887b      	ldrh	r3, [r7, #2]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d103      	bne.n	80078fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80078fa:	e14e      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b04      	cmp	r3, #4
 8007906:	d003      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2205      	movs	r2, #5
 800790c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	887a      	ldrh	r2, [r7, #2]
 8007920:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	887a      	ldrh	r2, [r7, #2]
 8007926:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	887a      	ldrh	r2, [r7, #2]
 8007932:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	887a      	ldrh	r2, [r7, #2]
 8007938:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2200      	movs	r2, #0
 800793e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007950:	2b40      	cmp	r3, #64	; 0x40
 8007952:	d007      	beq.n	8007964 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007962:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800796c:	d178      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <HAL_SPI_TransmitReceive+0x10a>
 8007976:	8b7b      	ldrh	r3, [r7, #26]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d166      	bne.n	8007a4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	881a      	ldrh	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800798c:	1c9a      	adds	r2, r3, #2
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079a0:	e053      	b.n	8007a4a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0302 	and.w	r3, r3, #2
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d11b      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x176>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d016      	beq.n	80079e8 <HAL_SPI_TransmitReceive+0x176>
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d113      	bne.n	80079e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	881a      	ldrh	r2, [r3, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d0:	1c9a      	adds	r2, r3, #2
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079da:	b29b      	uxth	r3, r3
 80079dc:	3b01      	subs	r3, #1
 80079de:	b29a      	uxth	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079e4:	2300      	movs	r3, #0
 80079e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d119      	bne.n	8007a2a <HAL_SPI_TransmitReceive+0x1b8>
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d014      	beq.n	8007a2a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0a:	b292      	uxth	r2, r2
 8007a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	1c9a      	adds	r2, r3, #2
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a26:	2301      	movs	r3, #1
 8007a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a2a:	f7fc f855 	bl	8003ad8 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d807      	bhi.n	8007a4a <HAL_SPI_TransmitReceive+0x1d8>
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a40:	d003      	beq.n	8007a4a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007a48:	e0a7      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1a6      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x130>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1a1      	bne.n	80079a2 <HAL_SPI_TransmitReceive+0x130>
 8007a5e:	e07c      	b.n	8007b5a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_SPI_TransmitReceive+0x1fc>
 8007a68:	8b7b      	ldrh	r3, [r7, #26]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d16b      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	330c      	adds	r3, #12
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a94:	e057      	b.n	8007b46 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d11c      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x26c>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d017      	beq.n	8007ade <HAL_SPI_TransmitReceive+0x26c>
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d114      	bne.n	8007ade <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	330c      	adds	r3, #12
 8007abe:	7812      	ldrb	r2, [r2, #0]
 8007ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac6:	1c5a      	adds	r2, r3, #1
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d119      	bne.n	8007b20 <HAL_SPI_TransmitReceive+0x2ae>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d014      	beq.n	8007b20 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b20:	f7fb ffda 	bl	8003ad8 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d803      	bhi.n	8007b38 <HAL_SPI_TransmitReceive+0x2c6>
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b36:	d102      	bne.n	8007b3e <HAL_SPI_TransmitReceive+0x2cc>
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d103      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007b44:	e029      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1a2      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x224>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d19d      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b5e:	68f8      	ldr	r0, [r7, #12]
 8007b60:	f000 f926 	bl	8007db0 <SPI_EndRxTxTransaction>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2220      	movs	r2, #32
 8007b74:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007b76:	e010      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	689b      	ldr	r3, [r3, #8]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10b      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	617b      	str	r3, [r7, #20]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	e000      	b.n	8007b9a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007b98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007baa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3730      	adds	r7, #48	; 0x30
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bc4:	b2db      	uxtb	r3, r3
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
	...

08007bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b088      	sub	sp, #32
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4613      	mov	r3, r2
 8007be2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be4:	f7fb ff78 	bl	8003ad8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	1a9b      	subs	r3, r3, r2
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf4:	f7fb ff70 	bl	8003ad8 <HAL_GetTick>
 8007bf8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bfa:	4b39      	ldr	r3, [pc, #228]	; (8007ce0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	015b      	lsls	r3, r3, #5
 8007c00:	0d1b      	lsrs	r3, r3, #20
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
 8007c08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c0a:	e054      	b.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c12:	d050      	beq.n	8007cb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c14:	f7fb ff60 	bl	8003ad8 <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	69fa      	ldr	r2, [r7, #28]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d902      	bls.n	8007c2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d13d      	bne.n	8007ca6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c42:	d111      	bne.n	8007c68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c4c:	d004      	beq.n	8007c58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c56:	d107      	bne.n	8007c68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c70:	d10f      	bne.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	681a      	ldr	r2, [r3, #0]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e017      	b.n	8007cd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d101      	bne.n	8007cb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	689a      	ldr	r2, [r3, #8]
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	68ba      	ldr	r2, [r7, #8]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	bf0c      	ite	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	2300      	movne	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d19b      	bne.n	8007c0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000000 	.word	0x20000000

08007ce4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cf8:	d111      	bne.n	8007d1e <SPI_EndRxTransaction+0x3a>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d02:	d004      	beq.n	8007d0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d0c:	d107      	bne.n	8007d1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d1c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d26:	d12a      	bne.n	8007d7e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d30:	d012      	beq.n	8007d58 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	2180      	movs	r1, #128	; 0x80
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff ff49 	bl	8007bd4 <SPI_WaitFlagStateUntilTimeout>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02d      	beq.n	8007da4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4c:	f043 0220 	orr.w	r2, r3, #32
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e026      	b.n	8007da6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	2101      	movs	r1, #1
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff ff36 	bl	8007bd4 <SPI_WaitFlagStateUntilTimeout>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01a      	beq.n	8007da4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d72:	f043 0220 	orr.w	r2, r3, #32
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e013      	b.n	8007da6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	9300      	str	r3, [sp, #0]
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	2101      	movs	r1, #1
 8007d88:	68f8      	ldr	r0, [r7, #12]
 8007d8a:	f7ff ff23 	bl	8007bd4 <SPI_WaitFlagStateUntilTimeout>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d007      	beq.n	8007da4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d98:	f043 0220 	orr.w	r2, r3, #32
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e000      	b.n	8007da6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
	...

08007db0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af02      	add	r7, sp, #8
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <SPI_EndRxTxTransaction+0x7c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <SPI_EndRxTxTransaction+0x80>)
 8007dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007dc6:	0d5b      	lsrs	r3, r3, #21
 8007dc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007dcc:	fb02 f303 	mul.w	r3, r2, r3
 8007dd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007dda:	d112      	bne.n	8007e02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2200      	movs	r2, #0
 8007de4:	2180      	movs	r1, #128	; 0x80
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f7ff fef4 	bl	8007bd4 <SPI_WaitFlagStateUntilTimeout>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d016      	beq.n	8007e20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	f043 0220 	orr.w	r2, r3, #32
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e00f      	b.n	8007e22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e18:	2b80      	cmp	r3, #128	; 0x80
 8007e1a:	d0f2      	beq.n	8007e02 <SPI_EndRxTxTransaction+0x52>
 8007e1c:	e000      	b.n	8007e20 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e1e:	bf00      	nop
  }

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000000 	.word	0x20000000
 8007e30:	165e9f81 	.word	0x165e9f81

08007e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d101      	bne.n	8007e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	e041      	b.n	8007eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d106      	bne.n	8007e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f839 	bl	8007ed2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2202      	movs	r2, #2
 8007e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f000 f9d8 	bl	8008228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d001      	beq.n	8007f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e04e      	b.n	8007f9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2202      	movs	r2, #2
 8007f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68da      	ldr	r2, [r3, #12]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f042 0201 	orr.w	r2, r2, #1
 8007f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a23      	ldr	r2, [pc, #140]	; (8007fac <HAL_TIM_Base_Start_IT+0xc4>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d022      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2a:	d01d      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1f      	ldr	r2, [pc, #124]	; (8007fb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d018      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a1e      	ldr	r2, [pc, #120]	; (8007fb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d013      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a1c      	ldr	r2, [pc, #112]	; (8007fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d00e      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a1b      	ldr	r2, [pc, #108]	; (8007fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d009      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a19      	ldr	r2, [pc, #100]	; (8007fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x80>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a18      	ldr	r2, [pc, #96]	; (8007fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d111      	bne.n	8007f8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 0307 	and.w	r3, r3, #7
 8007f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2b06      	cmp	r3, #6
 8007f78:	d010      	beq.n	8007f9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8a:	e007      	b.n	8007f9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3714      	adds	r7, #20
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	40000400 	.word	0x40000400
 8007fb4:	40000800 	.word	0x40000800
 8007fb8:	40000c00 	.word	0x40000c00
 8007fbc:	40010400 	.word	0x40010400
 8007fc0:	40014000 	.word	0x40014000
 8007fc4:	40001800 	.word	0x40001800

08007fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f003 0302 	and.w	r3, r3, #2
 8007fda:	2b02      	cmp	r3, #2
 8007fdc:	d122      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d11b      	bne.n	8008024 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f06f 0202 	mvn.w	r2, #2
 8007ff4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	f003 0303 	and.w	r3, r3, #3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f000 f8ee 	bl	80081ec <HAL_TIM_IC_CaptureCallback>
 8008010:	e005      	b.n	800801e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f8e0 	bl	80081d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f8f1 	bl	8008200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b04      	cmp	r3, #4
 8008030:	d122      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d11b      	bne.n	8008078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f06f 0204 	mvn.w	r2, #4
 8008048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2202      	movs	r2, #2
 800804e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	2b00      	cmp	r3, #0
 800805c:	d003      	beq.n	8008066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f8c4 	bl	80081ec <HAL_TIM_IC_CaptureCallback>
 8008064:	e005      	b.n	8008072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f8b6 	bl	80081d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f8c7 	bl	8008200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	f003 0308 	and.w	r3, r3, #8
 8008082:	2b08      	cmp	r3, #8
 8008084:	d122      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	f003 0308 	and.w	r3, r3, #8
 8008090:	2b08      	cmp	r3, #8
 8008092:	d11b      	bne.n	80080cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f06f 0208 	mvn.w	r2, #8
 800809c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2204      	movs	r2, #4
 80080a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	f003 0303 	and.w	r3, r3, #3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f89a 	bl	80081ec <HAL_TIM_IC_CaptureCallback>
 80080b8:	e005      	b.n	80080c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f88c 	bl	80081d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f89d 	bl	8008200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b10      	cmp	r3, #16
 80080d8:	d122      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f003 0310 	and.w	r3, r3, #16
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d11b      	bne.n	8008120 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f06f 0210 	mvn.w	r2, #16
 80080f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2208      	movs	r2, #8
 80080f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	69db      	ldr	r3, [r3, #28]
 80080fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008102:	2b00      	cmp	r3, #0
 8008104:	d003      	beq.n	800810e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f870 	bl	80081ec <HAL_TIM_IC_CaptureCallback>
 800810c:	e005      	b.n	800811a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f862 	bl	80081d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f873 	bl	8008200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b01      	cmp	r3, #1
 800812c:	d10e      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b01      	cmp	r3, #1
 800813a:	d107      	bne.n	800814c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f06f 0201 	mvn.w	r2, #1
 8008144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f7f9 fbd8 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d10e      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008164:	2b80      	cmp	r3, #128	; 0x80
 8008166:	d107      	bne.n	8008178 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f902 	bl	800837c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008182:	2b40      	cmp	r3, #64	; 0x40
 8008184:	d10e      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b40      	cmp	r3, #64	; 0x40
 8008192:	d107      	bne.n	80081a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800819c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f838 	bl	8008214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	691b      	ldr	r3, [r3, #16]
 80081aa:	f003 0320 	and.w	r3, r3, #32
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	d10e      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d107      	bne.n	80081d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0220 	mvn.w	r2, #32
 80081c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8cc 	bl	8008368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a40      	ldr	r2, [pc, #256]	; (800833c <TIM_Base_SetConfig+0x114>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d013      	beq.n	8008268 <TIM_Base_SetConfig+0x40>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008246:	d00f      	beq.n	8008268 <TIM_Base_SetConfig+0x40>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a3d      	ldr	r2, [pc, #244]	; (8008340 <TIM_Base_SetConfig+0x118>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00b      	beq.n	8008268 <TIM_Base_SetConfig+0x40>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <TIM_Base_SetConfig+0x11c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d007      	beq.n	8008268 <TIM_Base_SetConfig+0x40>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a3b      	ldr	r2, [pc, #236]	; (8008348 <TIM_Base_SetConfig+0x120>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d003      	beq.n	8008268 <TIM_Base_SetConfig+0x40>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a3a      	ldr	r2, [pc, #232]	; (800834c <TIM_Base_SetConfig+0x124>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d108      	bne.n	800827a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	68fa      	ldr	r2, [r7, #12]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a2f      	ldr	r2, [pc, #188]	; (800833c <TIM_Base_SetConfig+0x114>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d02b      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008288:	d027      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a2c      	ldr	r2, [pc, #176]	; (8008340 <TIM_Base_SetConfig+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d023      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a2b      	ldr	r2, [pc, #172]	; (8008344 <TIM_Base_SetConfig+0x11c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d01f      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a2a      	ldr	r2, [pc, #168]	; (8008348 <TIM_Base_SetConfig+0x120>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d01b      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a29      	ldr	r2, [pc, #164]	; (800834c <TIM_Base_SetConfig+0x124>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d017      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a28      	ldr	r2, [pc, #160]	; (8008350 <TIM_Base_SetConfig+0x128>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d013      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a27      	ldr	r2, [pc, #156]	; (8008354 <TIM_Base_SetConfig+0x12c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00f      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a26      	ldr	r2, [pc, #152]	; (8008358 <TIM_Base_SetConfig+0x130>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00b      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a25      	ldr	r2, [pc, #148]	; (800835c <TIM_Base_SetConfig+0x134>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d007      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a24      	ldr	r2, [pc, #144]	; (8008360 <TIM_Base_SetConfig+0x138>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d003      	beq.n	80082da <TIM_Base_SetConfig+0xb2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a23      	ldr	r2, [pc, #140]	; (8008364 <TIM_Base_SetConfig+0x13c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d108      	bne.n	80082ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	695b      	ldr	r3, [r3, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a0a      	ldr	r2, [pc, #40]	; (800833c <TIM_Base_SetConfig+0x114>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_Base_SetConfig+0xf8>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a0c      	ldr	r2, [pc, #48]	; (800834c <TIM_Base_SetConfig+0x124>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d103      	bne.n	8008328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	615a      	str	r2, [r3, #20]
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	40010000 	.word	0x40010000
 8008340:	40000400 	.word	0x40000400
 8008344:	40000800 	.word	0x40000800
 8008348:	40000c00 	.word	0x40000c00
 800834c:	40010400 	.word	0x40010400
 8008350:	40014000 	.word	0x40014000
 8008354:	40014400 	.word	0x40014400
 8008358:	40014800 	.word	0x40014800
 800835c:	40001800 	.word	0x40001800
 8008360:	40001c00 	.word	0x40001c00
 8008364:	40002000 	.word	0x40002000

08008368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d123      	bne.n	80083ea <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80083aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	6851      	ldr	r1, [r2, #4]
 80083b2:	683a      	ldr	r2, [r7, #0]
 80083b4:	6892      	ldr	r2, [r2, #8]
 80083b6:	4311      	orrs	r1, r2
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	68d2      	ldr	r2, [r2, #12]
 80083bc:	4311      	orrs	r1, r2
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	6912      	ldr	r2, [r2, #16]
 80083c2:	4311      	orrs	r1, r2
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	6952      	ldr	r2, [r2, #20]
 80083c8:	4311      	orrs	r1, r2
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	6992      	ldr	r2, [r2, #24]
 80083ce:	4311      	orrs	r1, r2
 80083d0:	683a      	ldr	r2, [r7, #0]
 80083d2:	69d2      	ldr	r2, [r2, #28]
 80083d4:	4311      	orrs	r1, r2
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	6a12      	ldr	r2, [r2, #32]
 80083da:	4311      	orrs	r1, r2
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80083e0:	430a      	orrs	r2, r1
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e028      	b.n	800843c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	69d9      	ldr	r1, [r3, #28]
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	4319      	orrs	r1, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008400:	430b      	orrs	r3, r1
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008410:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	6851      	ldr	r1, [r2, #4]
 8008418:	683a      	ldr	r2, [r7, #0]
 800841a:	6892      	ldr	r2, [r2, #8]
 800841c:	4311      	orrs	r1, r2
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	68d2      	ldr	r2, [r2, #12]
 8008422:	4311      	orrs	r1, r2
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	6912      	ldr	r2, [r2, #16]
 8008428:	4311      	orrs	r1, r2
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	6952      	ldr	r2, [r2, #20]
 800842e:	4311      	orrs	r1, r2
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	6992      	ldr	r2, [r2, #24]
 8008434:	430a      	orrs	r2, r1
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800843c:	2300      	movs	r3, #0
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	60f8      	str	r0, [r7, #12]
 8008452:	60b9      	str	r1, [r7, #8]
 8008454:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d128      	bne.n	80084ae <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	1e59      	subs	r1, r3, #1
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	3b01      	subs	r3, #1
 8008470:	011b      	lsls	r3, r3, #4
 8008472:	4319      	orrs	r1, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	3b01      	subs	r3, #1
 800847a:	021b      	lsls	r3, r3, #8
 800847c:	4319      	orrs	r1, r3
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	3b01      	subs	r3, #1
 8008484:	031b      	lsls	r3, r3, #12
 8008486:	4319      	orrs	r1, r3
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	3b01      	subs	r3, #1
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	4319      	orrs	r1, r3
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	3b01      	subs	r3, #1
 8008498:	051b      	lsls	r3, r3, #20
 800849a:	4319      	orrs	r1, r3
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	3b01      	subs	r3, #1
 80084a2:	061b      	lsls	r3, r3, #24
 80084a4:	430b      	orrs	r3, r1
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	e02f      	b.n	800850e <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80084b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	68d2      	ldr	r2, [r2, #12]
 80084be:	3a01      	subs	r2, #1
 80084c0:	0311      	lsls	r1, r2, #12
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	6952      	ldr	r2, [r2, #20]
 80084c6:	3a01      	subs	r2, #1
 80084c8:	0512      	lsls	r2, r2, #20
 80084ca:	430a      	orrs	r2, r1
 80084cc:	431a      	orrs	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	1e59      	subs	r1, r3, #1
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	4319      	orrs	r1, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	3b01      	subs	r3, #1
 80084f0:	021b      	lsls	r3, r3, #8
 80084f2:	4319      	orrs	r1, r3
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	3b01      	subs	r3, #1
 80084fa:	041b      	lsls	r3, r3, #16
 80084fc:	4319      	orrs	r1, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	3b01      	subs	r3, #1
 8008504:	061b      	lsls	r3, r3, #24
 8008506:	430b      	orrs	r3, r1
 8008508:	431a      	orrs	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	0d9b      	lsrs	r3, r3, #22
 8008532:	059b      	lsls	r3, r3, #22
 8008534:	68ba      	ldr	r2, [r7, #8]
 8008536:	6811      	ldr	r1, [r2, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	6852      	ldr	r2, [r2, #4]
 800853c:	4311      	orrs	r1, r2
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	6892      	ldr	r2, [r2, #8]
 8008542:	3a01      	subs	r2, #1
 8008544:	0152      	lsls	r2, r2, #5
 8008546:	4311      	orrs	r1, r2
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	68d2      	ldr	r2, [r2, #12]
 800854c:	0252      	lsls	r2, r2, #9
 800854e:	430a      	orrs	r2, r1
 8008550:	431a      	orrs	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008556:	f7fb fabf 	bl	8003ad8 <HAL_GetTick>
 800855a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800855c:	e010      	b.n	8008580 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008564:	d00c      	beq.n	8008580 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d007      	beq.n	800857c <FMC_SDRAM_SendCommand+0x60>
 800856c:	f7fb fab4 	bl	8003ad8 <HAL_GetTick>
 8008570:	4602      	mov	r2, r0
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	d201      	bcs.n	8008580 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800857c:	2303      	movs	r3, #3
 800857e:	e006      	b.n	800858e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	699b      	ldr	r3, [r3, #24]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b20      	cmp	r3, #32
 800858a:	d0e8      	beq.n	800855e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3718      	adds	r7, #24
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
 800859e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80085a8:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	0052      	lsls	r2, r2, #1
 80085b0:	431a      	orrs	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085c4:	b084      	sub	sp, #16
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
 80085ce:	f107 001c 	add.w	r0, r7, #28
 80085d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d122      	bne.n	8008622 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80085f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008606:	2b01      	cmp	r3, #1
 8008608:	d105      	bne.n	8008616 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fbee 	bl	8009df8 <USB_CoreReset>
 800861c:	4603      	mov	r3, r0
 800861e:	73fb      	strb	r3, [r7, #15]
 8008620:	e01a      	b.n	8008658 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 fbe2 	bl	8009df8 <USB_CoreReset>
 8008634:	4603      	mov	r3, r0
 8008636:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d106      	bne.n	800864c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	639a      	str	r2, [r3, #56]	; 0x38
 800864a:	e005      	b.n	8008658 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865a:	2b01      	cmp	r3, #1
 800865c:	d10b      	bne.n	8008676 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f043 0206 	orr.w	r2, r3, #6
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008676:	7bfb      	ldrb	r3, [r7, #15]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008682:	b004      	add	sp, #16
 8008684:	4770      	bx	lr
	...

08008688 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	4613      	mov	r3, r2
 8008694:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008696:	79fb      	ldrb	r3, [r7, #7]
 8008698:	2b02      	cmp	r3, #2
 800869a:	d165      	bne.n	8008768 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4a41      	ldr	r2, [pc, #260]	; (80087a4 <USB_SetTurnaroundTime+0x11c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d906      	bls.n	80086b2 <USB_SetTurnaroundTime+0x2a>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	4a40      	ldr	r2, [pc, #256]	; (80087a8 <USB_SetTurnaroundTime+0x120>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d202      	bcs.n	80086b2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086ac:	230f      	movs	r3, #15
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e062      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4a3c      	ldr	r2, [pc, #240]	; (80087a8 <USB_SetTurnaroundTime+0x120>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d306      	bcc.n	80086c8 <USB_SetTurnaroundTime+0x40>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4a3b      	ldr	r2, [pc, #236]	; (80087ac <USB_SetTurnaroundTime+0x124>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d202      	bcs.n	80086c8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086c2:	230e      	movs	r3, #14
 80086c4:	617b      	str	r3, [r7, #20]
 80086c6:	e057      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	4a38      	ldr	r2, [pc, #224]	; (80087ac <USB_SetTurnaroundTime+0x124>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d306      	bcc.n	80086de <USB_SetTurnaroundTime+0x56>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4a37      	ldr	r2, [pc, #220]	; (80087b0 <USB_SetTurnaroundTime+0x128>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d202      	bcs.n	80086de <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086d8:	230d      	movs	r3, #13
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e04c      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4a33      	ldr	r2, [pc, #204]	; (80087b0 <USB_SetTurnaroundTime+0x128>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d306      	bcc.n	80086f4 <USB_SetTurnaroundTime+0x6c>
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	4a32      	ldr	r2, [pc, #200]	; (80087b4 <USB_SetTurnaroundTime+0x12c>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d802      	bhi.n	80086f4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086ee:	230c      	movs	r3, #12
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	e041      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	4a2f      	ldr	r2, [pc, #188]	; (80087b4 <USB_SetTurnaroundTime+0x12c>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d906      	bls.n	800870a <USB_SetTurnaroundTime+0x82>
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	4a2e      	ldr	r2, [pc, #184]	; (80087b8 <USB_SetTurnaroundTime+0x130>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d802      	bhi.n	800870a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008704:	230b      	movs	r3, #11
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	e036      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	4a2a      	ldr	r2, [pc, #168]	; (80087b8 <USB_SetTurnaroundTime+0x130>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d906      	bls.n	8008720 <USB_SetTurnaroundTime+0x98>
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	4a29      	ldr	r2, [pc, #164]	; (80087bc <USB_SetTurnaroundTime+0x134>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d802      	bhi.n	8008720 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800871a:	230a      	movs	r3, #10
 800871c:	617b      	str	r3, [r7, #20]
 800871e:	e02b      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	4a26      	ldr	r2, [pc, #152]	; (80087bc <USB_SetTurnaroundTime+0x134>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d906      	bls.n	8008736 <USB_SetTurnaroundTime+0xae>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <USB_SetTurnaroundTime+0x138>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d202      	bcs.n	8008736 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008730:	2309      	movs	r3, #9
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e020      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	4a21      	ldr	r2, [pc, #132]	; (80087c0 <USB_SetTurnaroundTime+0x138>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d306      	bcc.n	800874c <USB_SetTurnaroundTime+0xc4>
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4a20      	ldr	r2, [pc, #128]	; (80087c4 <USB_SetTurnaroundTime+0x13c>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d802      	bhi.n	800874c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008746:	2308      	movs	r3, #8
 8008748:	617b      	str	r3, [r7, #20]
 800874a:	e015      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <USB_SetTurnaroundTime+0x13c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d906      	bls.n	8008762 <USB_SetTurnaroundTime+0xda>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	4a1c      	ldr	r2, [pc, #112]	; (80087c8 <USB_SetTurnaroundTime+0x140>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d202      	bcs.n	8008762 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800875c:	2307      	movs	r3, #7
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e00a      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008762:	2306      	movs	r3, #6
 8008764:	617b      	str	r3, [r7, #20]
 8008766:	e007      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800876e:	2309      	movs	r3, #9
 8008770:	617b      	str	r3, [r7, #20]
 8008772:	e001      	b.n	8008778 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008774:	2309      	movs	r3, #9
 8008776:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	029b      	lsls	r3, r3, #10
 800878c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	00d8acbf 	.word	0x00d8acbf
 80087a8:	00e4e1c0 	.word	0x00e4e1c0
 80087ac:	00f42400 	.word	0x00f42400
 80087b0:	01067380 	.word	0x01067380
 80087b4:	011a499f 	.word	0x011a499f
 80087b8:	01312cff 	.word	0x01312cff
 80087bc:	014ca43f 	.word	0x014ca43f
 80087c0:	016e3600 	.word	0x016e3600
 80087c4:	01a6ab1f 	.word	0x01a6ab1f
 80087c8:	01e84800 	.word	0x01e84800

080087cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f043 0201 	orr.w	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d115      	bne.n	800885e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800883e:	2001      	movs	r0, #1
 8008840:	f7fb f956 	bl	8003af0 <HAL_Delay>
      ms++;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	3301      	adds	r3, #1
 8008848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f001 fa45 	bl	8009cda <USB_GetMode>
 8008850:	4603      	mov	r3, r0
 8008852:	2b01      	cmp	r3, #1
 8008854:	d01e      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2b31      	cmp	r3, #49	; 0x31
 800885a:	d9f0      	bls.n	800883e <USB_SetCurrentMode+0x2e>
 800885c:	e01a      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d115      	bne.n	8008890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008870:	2001      	movs	r0, #1
 8008872:	f7fb f93d 	bl	8003af0 <HAL_Delay>
      ms++;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fa2c 	bl	8009cda <USB_GetMode>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b31      	cmp	r3, #49	; 0x31
 800888c:	d9f0      	bls.n	8008870 <USB_SetCurrentMode+0x60>
 800888e:	e001      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e005      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b32      	cmp	r3, #50	; 0x32
 8008898:	d101      	bne.n	800889e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088a8:	b084      	sub	sp, #16
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b086      	sub	sp, #24
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
 80088b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ba:	2300      	movs	r3, #0
 80088bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	613b      	str	r3, [r7, #16]
 80088c6:	e009      	b.n	80088dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	3340      	adds	r3, #64	; 0x40
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4413      	add	r3, r2
 80088d2:	2200      	movs	r2, #0
 80088d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	3301      	adds	r3, #1
 80088da:	613b      	str	r3, [r7, #16]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	2b0e      	cmp	r3, #14
 80088e0:	d9f2      	bls.n	80088c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d11c      	bne.n	8008922 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f6:	f043 0302 	orr.w	r3, r3, #2
 80088fa:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
 8008920:	e00b      	b.n	800893a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008926:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008940:	461a      	mov	r2, r3
 8008942:	2300      	movs	r3, #0
 8008944:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800894c:	4619      	mov	r1, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008954:	461a      	mov	r2, r3
 8008956:	680b      	ldr	r3, [r1, #0]
 8008958:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	2b01      	cmp	r3, #1
 800895e:	d10c      	bne.n	800897a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008966:	2100      	movs	r1, #0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f965 	bl	8008c38 <USB_SetDevSpeed>
 800896e:	e008      	b.n	8008982 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008970:	2101      	movs	r1, #1
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f960 	bl	8008c38 <USB_SetDevSpeed>
 8008978:	e003      	b.n	8008982 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800897a:	2103      	movs	r1, #3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 f95b 	bl	8008c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008982:	2110      	movs	r1, #16
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 f8f3 	bl	8008b70 <USB_FlushTxFifo>
 800898a:	4603      	mov	r3, r0
 800898c:	2b00      	cmp	r3, #0
 800898e:	d001      	beq.n	8008994 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f91f 	bl	8008bd8 <USB_FlushRxFifo>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089aa:	461a      	mov	r2, r3
 80089ac:	2300      	movs	r3, #0
 80089ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b6:	461a      	mov	r2, r3
 80089b8:	2300      	movs	r3, #0
 80089ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c2:	461a      	mov	r2, r3
 80089c4:	2300      	movs	r3, #0
 80089c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089c8:	2300      	movs	r3, #0
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	e043      	b.n	8008a56 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089e4:	d118      	bne.n	8008a18 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	015a      	lsls	r2, r3, #5
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4413      	add	r3, r2
 80089f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f8:	461a      	mov	r2, r3
 80089fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e013      	b.n	8008a2a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	015a      	lsls	r2, r3, #5
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	4413      	add	r3, r2
 8008a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0e:	461a      	mov	r2, r3
 8008a10:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	e008      	b.n	8008a2a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	461a      	mov	r2, r3
 8008a26:	2300      	movs	r3, #0
 8008a28:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	461a      	mov	r2, r3
 8008a38:	2300      	movs	r3, #0
 8008a3a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a48:	461a      	mov	r2, r3
 8008a4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a4e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	3301      	adds	r3, #1
 8008a54:	613b      	str	r3, [r7, #16]
 8008a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d3b7      	bcc.n	80089ce <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	e043      	b.n	8008aec <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	015a      	lsls	r2, r3, #5
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7a:	d118      	bne.n	8008aae <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10a      	bne.n	8008a98 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	e013      	b.n	8008ac0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aaa:	6013      	str	r3, [r2, #0]
 8008aac:	e008      	b.n	8008ac0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	461a      	mov	r2, r3
 8008abc:	2300      	movs	r3, #0
 8008abe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	461a      	mov	r2, r3
 8008ace:	2300      	movs	r3, #0
 8008ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	015a      	lsls	r2, r3, #5
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	4413      	add	r3, r2
 8008ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ae4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	613b      	str	r3, [r7, #16]
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d3b7      	bcc.n	8008a64 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b06:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b14:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d105      	bne.n	8008b28 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	f043 0210 	orr.w	r2, r3, #16
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	4b0f      	ldr	r3, [pc, #60]	; (8008b6c <USB_DevInit+0x2c4>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d005      	beq.n	8008b46 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	f043 0208 	orr.w	r2, r3, #8
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d107      	bne.n	8008b5c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b54:	f043 0304 	orr.w	r3, r3, #4
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b68:	b004      	add	sp, #16
 8008b6a:	4770      	bx	lr
 8008b6c:	803c3800 	.word	0x803c3800

08008b70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	4a13      	ldr	r2, [pc, #76]	; (8008bd4 <USB_FlushTxFifo+0x64>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d901      	bls.n	8008b90 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e01b      	b.n	8008bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	daf2      	bge.n	8008b7e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	019b      	lsls	r3, r3, #6
 8008ba0:	f043 0220 	orr.w	r2, r3, #32
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	3301      	adds	r3, #1
 8008bac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <USB_FlushTxFifo+0x64>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d901      	bls.n	8008bba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e006      	b.n	8008bc8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0320 	and.w	r3, r3, #32
 8008bc2:	2b20      	cmp	r3, #32
 8008bc4:	d0f0      	beq.n	8008ba8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	00030d40 	.word	0x00030d40

08008bd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a11      	ldr	r2, [pc, #68]	; (8008c34 <USB_FlushRxFifo+0x5c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e018      	b.n	8008c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	daf2      	bge.n	8008be4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2210      	movs	r2, #16
 8008c06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4a08      	ldr	r2, [pc, #32]	; (8008c34 <USB_FlushRxFifo+0x5c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d901      	bls.n	8008c1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	e006      	b.n	8008c28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d0f0      	beq.n	8008c08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3714      	adds	r7, #20
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr
 8008c34:	00030d40 	.word	0x00030d40

08008c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	460b      	mov	r3, r1
 8008c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c4e:	681a      	ldr	r2, [r3, #0]
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	68f9      	ldr	r1, [r7, #12]
 8008c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c5c:	2300      	movs	r3, #0
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3714      	adds	r7, #20
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b087      	sub	sp, #28
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f003 0306 	and.w	r3, r3, #6
 8008c82:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75fb      	strb	r3, [r7, #23]
 8008c8e:	e00a      	b.n	8008ca6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d002      	beq.n	8008c9c <USB_GetDevSpeed+0x32>
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d102      	bne.n	8008ca2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	75fb      	strb	r3, [r7, #23]
 8008ca0:	e001      	b.n	8008ca6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008ca2:	230f      	movs	r3, #15
 8008ca4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	371c      	adds	r7, #28
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	785b      	ldrb	r3, [r3, #1]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d13a      	bne.n	8008d46 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	69da      	ldr	r2, [r3, #28]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	f003 030f 	and.w	r3, r3, #15
 8008ce0:	2101      	movs	r1, #1
 8008ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	68f9      	ldr	r1, [r7, #12]
 8008cea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d155      	bne.n	8008db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	015a      	lsls	r2, r3, #5
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	4413      	add	r3, r2
 8008d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	791b      	ldrb	r3, [r3, #4]
 8008d22:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d24:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	059b      	lsls	r3, r3, #22
 8008d2a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	0151      	lsls	r1, r2, #5
 8008d32:	68fa      	ldr	r2, [r7, #12]
 8008d34:	440a      	add	r2, r1
 8008d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	e036      	b.n	8008db4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d4c:	69da      	ldr	r2, [r3, #28]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	f003 030f 	and.w	r3, r3, #15
 8008d56:	2101      	movs	r1, #1
 8008d58:	fa01 f303 	lsl.w	r3, r1, r3
 8008d5c:	041b      	lsls	r3, r3, #16
 8008d5e:	68f9      	ldr	r1, [r7, #12]
 8008d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d64:	4313      	orrs	r3, r2
 8008d66:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11a      	bne.n	8008db4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	791b      	ldrb	r3, [r3, #4]
 8008d98:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	68ba      	ldr	r2, [r7, #8]
 8008da0:	0151      	lsls	r1, r2, #5
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	440a      	add	r2, r1
 8008da6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008db2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr
	...

08008dc4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	785b      	ldrb	r3, [r3, #1]
 8008ddc:	2b01      	cmp	r3, #1
 8008dde:	d161      	bne.n	8008ea4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	015a      	lsls	r2, r3, #5
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4413      	add	r3, r2
 8008de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008df6:	d11f      	bne.n	8008e38 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	015a      	lsls	r2, r3, #5
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4413      	add	r3, r2
 8008e00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e16:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68ba      	ldr	r2, [r7, #8]
 8008e28:	0151      	lsls	r1, r2, #5
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	440a      	add	r2, r1
 8008e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	f003 030f 	and.w	r3, r3, #15
 8008e48:	2101      	movs	r1, #1
 8008e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	43db      	mvns	r3, r3
 8008e52:	68f9      	ldr	r1, [r7, #12]
 8008e54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e58:	4013      	ands	r3, r2
 8008e5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	69da      	ldr	r2, [r3, #28]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f003 030f 	and.w	r3, r3, #15
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	43db      	mvns	r3, r3
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	0159      	lsls	r1, r3, #5
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	440b      	add	r3, r1
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4b35      	ldr	r3, [pc, #212]	; (8008f74 <USB_DeactivateEndpoint+0x1b0>)
 8008e9e:	4013      	ands	r3, r2
 8008ea0:	600b      	str	r3, [r1, #0]
 8008ea2:	e060      	b.n	8008f66 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	015a      	lsls	r2, r3, #5
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eba:	d11f      	bne.n	8008efc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	0151      	lsls	r1, r2, #5
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	440a      	add	r2, r1
 8008ed2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eda:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008efa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	f003 030f 	and.w	r3, r3, #15
 8008f0c:	2101      	movs	r1, #1
 8008f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	43db      	mvns	r3, r3
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f26:	69da      	ldr	r2, [r3, #28]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	2101      	movs	r1, #1
 8008f32:	fa01 f303 	lsl.w	r3, r1, r3
 8008f36:	041b      	lsls	r3, r3, #16
 8008f38:	43db      	mvns	r3, r3
 8008f3a:	68f9      	ldr	r1, [r7, #12]
 8008f3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f40:	4013      	ands	r3, r2
 8008f42:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	0159      	lsls	r1, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	440b      	add	r3, r1
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	4619      	mov	r1, r3
 8008f60:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <USB_DeactivateEndpoint+0x1b4>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f66:	2300      	movs	r3, #0
}
 8008f68:	4618      	mov	r0, r3
 8008f6a:	3714      	adds	r7, #20
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr
 8008f74:	ec337800 	.word	0xec337800
 8008f78:	eff37800 	.word	0xeff37800

08008f7c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af02      	add	r7, sp, #8
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	4613      	mov	r3, r2
 8008f88:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	f040 815c 	bne.w	8009256 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d132      	bne.n	800900c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	0151      	lsls	r1, r2, #5
 8008fb8:	69fa      	ldr	r2, [r7, #28]
 8008fba:	440a      	add	r2, r1
 8008fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fc8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	69fa      	ldr	r2, [r7, #28]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008fe8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	69ba      	ldr	r2, [r7, #24]
 8008ffa:	0151      	lsls	r1, r2, #5
 8008ffc:	69fa      	ldr	r2, [r7, #28]
 8008ffe:	440a      	add	r2, r1
 8009000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009004:	0cdb      	lsrs	r3, r3, #19
 8009006:	04db      	lsls	r3, r3, #19
 8009008:	6113      	str	r3, [r2, #16]
 800900a:	e074      	b.n	80090f6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	015a      	lsls	r2, r3, #5
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	4413      	add	r3, r2
 8009014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	0151      	lsls	r1, r2, #5
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	440a      	add	r2, r1
 8009022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009026:	0cdb      	lsrs	r3, r3, #19
 8009028:	04db      	lsls	r3, r3, #19
 800902a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	015a      	lsls	r2, r3, #5
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	4413      	add	r3, r2
 8009034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	69ba      	ldr	r2, [r7, #24]
 800903c:	0151      	lsls	r1, r2, #5
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	440a      	add	r2, r1
 8009042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009046:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800904a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800904e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	015a      	lsls	r2, r3, #5
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4413      	add	r3, r2
 8009058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6999      	ldr	r1, [r3, #24]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	440b      	add	r3, r1
 8009068:	1e59      	subs	r1, r3, #1
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009072:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009074:	4b9d      	ldr	r3, [pc, #628]	; (80092ec <USB_EPStartXfer+0x370>)
 8009076:	400b      	ands	r3, r1
 8009078:	69b9      	ldr	r1, [r7, #24]
 800907a:	0148      	lsls	r0, r1, #5
 800907c:	69f9      	ldr	r1, [r7, #28]
 800907e:	4401      	add	r1, r0
 8009080:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009084:	4313      	orrs	r3, r2
 8009086:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009088:	69bb      	ldr	r3, [r7, #24]
 800908a:	015a      	lsls	r2, r3, #5
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	4413      	add	r3, r2
 8009090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009094:	691a      	ldr	r2, [r3, #16]
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800909e:	69b9      	ldr	r1, [r7, #24]
 80090a0:	0148      	lsls	r0, r1, #5
 80090a2:	69f9      	ldr	r1, [r7, #28]
 80090a4:	4401      	add	r1, r0
 80090a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090aa:	4313      	orrs	r3, r2
 80090ac:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	791b      	ldrb	r3, [r3, #4]
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d11f      	bne.n	80090f6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	015a      	lsls	r2, r3, #5
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	4413      	add	r3, r2
 80090be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	69ba      	ldr	r2, [r7, #24]
 80090c6:	0151      	lsls	r1, r2, #5
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	440a      	add	r2, r1
 80090cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090d0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80090d4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	015a      	lsls	r2, r3, #5
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	4413      	add	r3, r2
 80090de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	69ba      	ldr	r2, [r7, #24]
 80090e6:	0151      	lsls	r1, r2, #5
 80090e8:	69fa      	ldr	r2, [r7, #28]
 80090ea:	440a      	add	r2, r1
 80090ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090f4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d14b      	bne.n	8009194 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	695b      	ldr	r3, [r3, #20]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d009      	beq.n	8009118 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009110:	461a      	mov	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	791b      	ldrb	r3, [r3, #4]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d128      	bne.n	8009172 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912c:	2b00      	cmp	r3, #0
 800912e:	d110      	bne.n	8009152 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69ba      	ldr	r2, [r7, #24]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	69fa      	ldr	r2, [r7, #28]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800914a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800914e:	6013      	str	r3, [r2, #0]
 8009150:	e00f      	b.n	8009172 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	015a      	lsls	r2, r3, #5
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	0151      	lsls	r1, r2, #5
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	440a      	add	r2, r1
 8009168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800916c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009170:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	0151      	lsls	r1, r2, #5
 8009184:	69fa      	ldr	r2, [r7, #28]
 8009186:	440a      	add	r2, r1
 8009188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009190:	6013      	str	r3, [r2, #0]
 8009192:	e133      	b.n	80093fc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	69fa      	ldr	r2, [r7, #28]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091b2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	791b      	ldrb	r3, [r3, #4]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d015      	beq.n	80091e8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 811b 	beq.w	80093fc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	f003 030f 	and.w	r3, r3, #15
 80091d6:	2101      	movs	r1, #1
 80091d8:	fa01 f303 	lsl.w	r3, r1, r3
 80091dc:	69f9      	ldr	r1, [r7, #28]
 80091de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091e2:	4313      	orrs	r3, r2
 80091e4:	634b      	str	r3, [r1, #52]	; 0x34
 80091e6:	e109      	b.n	80093fc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091e8:	69fb      	ldr	r3, [r7, #28]
 80091ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d110      	bne.n	800921a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80091f8:	69bb      	ldr	r3, [r7, #24]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	4413      	add	r3, r2
 8009200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	69ba      	ldr	r2, [r7, #24]
 8009208:	0151      	lsls	r1, r2, #5
 800920a:	69fa      	ldr	r2, [r7, #28]
 800920c:	440a      	add	r2, r1
 800920e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009212:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	e00f      	b.n	800923a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	0151      	lsls	r1, r2, #5
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	440a      	add	r2, r1
 8009230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009238:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6919      	ldr	r1, [r3, #16]
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	699b      	ldr	r3, [r3, #24]
 8009246:	b298      	uxth	r0, r3
 8009248:	79fb      	ldrb	r3, [r7, #7]
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	4603      	mov	r3, r0
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 fade 	bl	8009810 <USB_WritePacket>
 8009254:	e0d2      	b.n	80093fc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009256:	69bb      	ldr	r3, [r7, #24]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009262:	691b      	ldr	r3, [r3, #16]
 8009264:	69ba      	ldr	r2, [r7, #24]
 8009266:	0151      	lsls	r1, r2, #5
 8009268:	69fa      	ldr	r2, [r7, #28]
 800926a:	440a      	add	r2, r1
 800926c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009270:	0cdb      	lsrs	r3, r3, #19
 8009272:	04db      	lsls	r3, r3, #19
 8009274:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009276:	69bb      	ldr	r3, [r7, #24]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	0151      	lsls	r1, r2, #5
 8009288:	69fa      	ldr	r2, [r7, #28]
 800928a:	440a      	add	r2, r1
 800928c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009298:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	699b      	ldr	r3, [r3, #24]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d126      	bne.n	80092f0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	691a      	ldr	r2, [r3, #16]
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b8:	69b9      	ldr	r1, [r7, #24]
 80092ba:	0148      	lsls	r0, r1, #5
 80092bc:	69f9      	ldr	r1, [r7, #28]
 80092be:	4401      	add	r1, r0
 80092c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092c4:	4313      	orrs	r3, r2
 80092c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	69ba      	ldr	r2, [r7, #24]
 80092d8:	0151      	lsls	r1, r2, #5
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	440a      	add	r2, r1
 80092de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e6:	6113      	str	r3, [r2, #16]
 80092e8:	e03a      	b.n	8009360 <USB_EPStartXfer+0x3e4>
 80092ea:	bf00      	nop
 80092ec:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	699a      	ldr	r2, [r3, #24]
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	4413      	add	r3, r2
 80092fa:	1e5a      	subs	r2, r3, #1
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	fbb2 f3f3 	udiv	r3, r2, r3
 8009304:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	8afa      	ldrh	r2, [r7, #22]
 800930c:	fb03 f202 	mul.w	r2, r3, r2
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	015a      	lsls	r2, r3, #5
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	4413      	add	r3, r2
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	691a      	ldr	r2, [r3, #16]
 8009322:	8afb      	ldrh	r3, [r7, #22]
 8009324:	04d9      	lsls	r1, r3, #19
 8009326:	4b38      	ldr	r3, [pc, #224]	; (8009408 <USB_EPStartXfer+0x48c>)
 8009328:	400b      	ands	r3, r1
 800932a:	69b9      	ldr	r1, [r7, #24]
 800932c:	0148      	lsls	r0, r1, #5
 800932e:	69f9      	ldr	r1, [r7, #28]
 8009330:	4401      	add	r1, r0
 8009332:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009336:	4313      	orrs	r3, r2
 8009338:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009346:	691a      	ldr	r2, [r3, #16]
 8009348:	68bb      	ldr	r3, [r7, #8]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009350:	69b9      	ldr	r1, [r7, #24]
 8009352:	0148      	lsls	r0, r1, #5
 8009354:	69f9      	ldr	r1, [r7, #28]
 8009356:	4401      	add	r1, r0
 8009358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800935c:	4313      	orrs	r3, r2
 800935e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d10d      	bne.n	8009382 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	6919      	ldr	r1, [r3, #16]
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800937e:	460a      	mov	r2, r1
 8009380:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	791b      	ldrb	r3, [r3, #4]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d128      	bne.n	80093dc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009390:	689b      	ldr	r3, [r3, #8]
 8009392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009396:	2b00      	cmp	r3, #0
 8009398:	d110      	bne.n	80093bc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800939a:	69bb      	ldr	r3, [r7, #24]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	69fb      	ldr	r3, [r7, #28]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	0151      	lsls	r1, r2, #5
 80093ac:	69fa      	ldr	r2, [r7, #28]
 80093ae:	440a      	add	r2, r1
 80093b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	e00f      	b.n	80093dc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	0151      	lsls	r1, r2, #5
 80093ce:	69fa      	ldr	r2, [r7, #28]
 80093d0:	440a      	add	r2, r1
 80093d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	69fa      	ldr	r2, [r7, #28]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3720      	adds	r7, #32
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	1ff80000 	.word	0x1ff80000

0800940c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b01      	cmp	r3, #1
 800942a:	f040 80ce 	bne.w	80095ca <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d132      	bne.n	800949c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009450:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009454:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009458:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	4413      	add	r3, r2
 8009462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	693a      	ldr	r2, [r7, #16]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	440a      	add	r2, r1
 8009470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	4413      	add	r3, r2
 8009482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	0151      	lsls	r1, r2, #5
 800948c:	697a      	ldr	r2, [r7, #20]
 800948e:	440a      	add	r2, r1
 8009490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009494:	0cdb      	lsrs	r3, r3, #19
 8009496:	04db      	lsls	r3, r3, #19
 8009498:	6113      	str	r3, [r2, #16]
 800949a:	e04e      	b.n	800953a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	015a      	lsls	r2, r3, #5
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	0151      	lsls	r1, r2, #5
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	440a      	add	r2, r1
 80094b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b6:	0cdb      	lsrs	r3, r3, #19
 80094b8:	04db      	lsls	r3, r3, #19
 80094ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	015a      	lsls	r2, r3, #5
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	4413      	add	r3, r2
 80094c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c8:	691b      	ldr	r3, [r3, #16]
 80094ca:	693a      	ldr	r2, [r7, #16]
 80094cc:	0151      	lsls	r1, r2, #5
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	440a      	add	r2, r1
 80094d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	699a      	ldr	r2, [r3, #24]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d903      	bls.n	80094f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009500:	691b      	ldr	r3, [r3, #16]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	0151      	lsls	r1, r2, #5
 8009506:	697a      	ldr	r2, [r7, #20]
 8009508:	440a      	add	r2, r1
 800950a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800950e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	015a      	lsls	r2, r3, #5
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	4413      	add	r3, r2
 800951c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800952a:	6939      	ldr	r1, [r7, #16]
 800952c:	0148      	lsls	r0, r1, #5
 800952e:	6979      	ldr	r1, [r7, #20]
 8009530:	4401      	add	r1, r0
 8009532:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009536:	4313      	orrs	r3, r2
 8009538:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800953a:	79fb      	ldrb	r3, [r7, #7]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d11e      	bne.n	800957e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	695b      	ldr	r3, [r3, #20]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d009      	beq.n	800955c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	015a      	lsls	r2, r3, #5
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	4413      	add	r3, r2
 8009550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009554:	461a      	mov	r2, r3
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009576:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	e097      	b.n	80096ae <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800959c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8083 	beq.w	80096ae <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	f003 030f 	and.w	r3, r3, #15
 80095b8:	2101      	movs	r1, #1
 80095ba:	fa01 f303 	lsl.w	r3, r1, r3
 80095be:	6979      	ldr	r1, [r7, #20]
 80095c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095c4:	4313      	orrs	r3, r2
 80095c6:	634b      	str	r3, [r1, #52]	; 0x34
 80095c8:	e071      	b.n	80096ae <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	693a      	ldr	r2, [r7, #16]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e4:	0cdb      	lsrs	r3, r3, #19
 80095e6:	04db      	lsls	r3, r3, #19
 80095e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800960c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d003      	beq.n	800961e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	68da      	ldr	r2, [r3, #12]
 800961a:	68bb      	ldr	r3, [r7, #8]
 800961c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	015a      	lsls	r2, r3, #5
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	4413      	add	r3, r2
 800962e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	0151      	lsls	r1, r2, #5
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	440a      	add	r2, r1
 800963c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800965c:	6939      	ldr	r1, [r7, #16]
 800965e:	0148      	lsls	r0, r1, #5
 8009660:	6979      	ldr	r1, [r7, #20]
 8009662:	4401      	add	r1, r0
 8009664:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009668:	4313      	orrs	r3, r2
 800966a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800966c:	79fb      	ldrb	r3, [r7, #7]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d10d      	bne.n	800968e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d009      	beq.n	800968e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	6919      	ldr	r1, [r3, #16]
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	015a      	lsls	r2, r3, #5
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	4413      	add	r3, r2
 8009686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800968a:	460a      	mov	r2, r1
 800968c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096ac:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	371c      	adds	r7, #28
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096c6:	2300      	movs	r3, #0
 80096c8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d14a      	bne.n	8009770 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f2:	f040 8086 	bne.w	8009802 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	683a      	ldr	r2, [r7, #0]
 8009708:	7812      	ldrb	r2, [r2, #0]
 800970a:	0151      	lsls	r1, r2, #5
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	440a      	add	r2, r1
 8009710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009714:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009718:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	781b      	ldrb	r3, [r3, #0]
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	7812      	ldrb	r2, [r2, #0]
 800972e:	0151      	lsls	r1, r2, #5
 8009730:	693a      	ldr	r2, [r7, #16]
 8009732:	440a      	add	r2, r1
 8009734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009738:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800973c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3301      	adds	r3, #1
 8009742:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f242 7210 	movw	r2, #10000	; 0x2710
 800974a:	4293      	cmp	r3, r2
 800974c:	d902      	bls.n	8009754 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
          break;
 8009752:	e056      	b.n	8009802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	015a      	lsls	r2, r3, #5
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	4413      	add	r3, r2
 800975e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009768:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800976c:	d0e7      	beq.n	800973e <USB_EPStopXfer+0x82>
 800976e:	e048      	b.n	8009802 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	015a      	lsls	r2, r3, #5
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	4413      	add	r3, r2
 800977a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009784:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009788:	d13b      	bne.n	8009802 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	0151      	lsls	r1, r2, #5
 80097a0:	693a      	ldr	r2, [r7, #16]
 80097a2:	440a      	add	r2, r1
 80097a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097ac:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	015a      	lsls	r2, r3, #5
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	4413      	add	r3, r2
 80097b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	683a      	ldr	r2, [r7, #0]
 80097c0:	7812      	ldrb	r2, [r2, #0]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3301      	adds	r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f242 7210 	movw	r2, #10000	; 0x2710
 80097de:	4293      	cmp	r3, r2
 80097e0:	d902      	bls.n	80097e8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	75fb      	strb	r3, [r7, #23]
          break;
 80097e6:	e00c      	b.n	8009802 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009800:	d0e7      	beq.n	80097d2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009802:	7dfb      	ldrb	r3, [r7, #23]
}
 8009804:	4618      	mov	r0, r3
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009810:	b480      	push	{r7}
 8009812:	b089      	sub	sp, #36	; 0x24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	4611      	mov	r1, r2
 800981c:	461a      	mov	r2, r3
 800981e:	460b      	mov	r3, r1
 8009820:	71fb      	strb	r3, [r7, #7]
 8009822:	4613      	mov	r3, r2
 8009824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800982e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009832:	2b00      	cmp	r3, #0
 8009834:	d123      	bne.n	800987e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009836:	88bb      	ldrh	r3, [r7, #4]
 8009838:	3303      	adds	r3, #3
 800983a:	089b      	lsrs	r3, r3, #2
 800983c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800983e:	2300      	movs	r3, #0
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	e018      	b.n	8009876 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009844:	79fb      	ldrb	r3, [r7, #7]
 8009846:	031a      	lsls	r2, r3, #12
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	4413      	add	r3, r2
 800984c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009850:	461a      	mov	r2, r3
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	3301      	adds	r3, #1
 800985c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	3301      	adds	r3, #1
 8009862:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	3301      	adds	r3, #1
 8009868:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	3301      	adds	r3, #1
 800986e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	3301      	adds	r3, #1
 8009874:	61bb      	str	r3, [r7, #24]
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	429a      	cmp	r2, r3
 800987c:	d3e2      	bcc.n	8009844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	3724      	adds	r7, #36	; 0x24
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800988c:	b480      	push	{r7}
 800988e:	b08b      	sub	sp, #44	; 0x2c
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	f003 0303 	and.w	r3, r3, #3
 80098b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098b2:	2300      	movs	r3, #0
 80098b4:	623b      	str	r3, [r7, #32]
 80098b6:	e014      	b.n	80098e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098b8:	69bb      	ldr	r3, [r7, #24]
 80098ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	3301      	adds	r3, #1
 80098c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	3301      	adds	r3, #1
 80098ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	3301      	adds	r3, #1
 80098d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	3301      	adds	r3, #1
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	3301      	adds	r3, #1
 80098e0:	623b      	str	r3, [r7, #32]
 80098e2:	6a3a      	ldr	r2, [r7, #32]
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d3e6      	bcc.n	80098b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098ea:	8bfb      	ldrh	r3, [r7, #30]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01e      	beq.n	800992e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098fa:	461a      	mov	r2, r3
 80098fc:	f107 0310 	add.w	r3, r7, #16
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009904:	693a      	ldr	r2, [r7, #16]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	00db      	lsls	r3, r3, #3
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	b2da      	uxtb	r2, r3
 8009912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009914:	701a      	strb	r2, [r3, #0]
      i++;
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	3301      	adds	r3, #1
 800991a:	623b      	str	r3, [r7, #32]
      pDest++;
 800991c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991e:	3301      	adds	r3, #1
 8009920:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009922:	8bfb      	ldrh	r3, [r7, #30]
 8009924:	3b01      	subs	r3, #1
 8009926:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009928:	8bfb      	ldrh	r3, [r7, #30]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1ea      	bne.n	8009904 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009930:	4618      	mov	r0, r3
 8009932:	372c      	adds	r7, #44	; 0x2c
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	785b      	ldrb	r3, [r3, #1]
 8009954:	2b01      	cmp	r3, #1
 8009956:	d12c      	bne.n	80099b2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2b00      	cmp	r3, #0
 8009968:	db12      	blt.n	8009990 <USB_EPSetStall+0x54>
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00f      	beq.n	8009990 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	015a      	lsls	r2, r3, #5
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68ba      	ldr	r2, [r7, #8]
 8009980:	0151      	lsls	r1, r2, #5
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	440a      	add	r2, r1
 8009986:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800998a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800998e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	015a      	lsls	r2, r3, #5
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	4413      	add	r3, r2
 8009998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	0151      	lsls	r1, r2, #5
 80099a2:	68fa      	ldr	r2, [r7, #12]
 80099a4:	440a      	add	r2, r1
 80099a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	e02b      	b.n	8009a0a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	015a      	lsls	r2, r3, #5
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	4413      	add	r3, r2
 80099ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db12      	blt.n	80099ea <USB_EPSetStall+0xae>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00f      	beq.n	80099ea <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	015a      	lsls	r2, r3, #5
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	4413      	add	r3, r2
 80099d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68ba      	ldr	r2, [r7, #8]
 80099da:	0151      	lsls	r1, r2, #5
 80099dc:	68fa      	ldr	r2, [r7, #12]
 80099de:	440a      	add	r2, r1
 80099e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099e8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	0151      	lsls	r1, r2, #5
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	440a      	add	r2, r1
 8009a00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a08:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3714      	adds	r7, #20
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d128      	bne.n	8009a86 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	0151      	lsls	r1, r2, #5
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	440a      	add	r2, r1
 8009a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a52:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	791b      	ldrb	r3, [r3, #4]
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d003      	beq.n	8009a64 <USB_EPClearStall+0x4c>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	791b      	ldrb	r3, [r3, #4]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d138      	bne.n	8009ad6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	015a      	lsls	r2, r3, #5
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	0151      	lsls	r1, r2, #5
 8009a76:	68fa      	ldr	r2, [r7, #12]
 8009a78:	440a      	add	r2, r1
 8009a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a82:	6013      	str	r3, [r2, #0]
 8009a84:	e027      	b.n	8009ad6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	015a      	lsls	r2, r3, #5
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68ba      	ldr	r2, [r7, #8]
 8009a96:	0151      	lsls	r1, r2, #5
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	440a      	add	r2, r1
 8009a9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aa4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	791b      	ldrb	r3, [r3, #4]
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d003      	beq.n	8009ab6 <USB_EPClearStall+0x9e>
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	791b      	ldrb	r3, [r3, #4]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d10f      	bne.n	8009ad6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ad4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ad6:	2300      	movs	r3, #0
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3714      	adds	r7, #20
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b06:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	78fb      	ldrb	r3, [r7, #3]
 8009b12:	011b      	lsls	r3, r3, #4
 8009b14:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b18:	68f9      	ldr	r1, [r7, #12]
 8009b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68fa      	ldr	r2, [r7, #12]
 8009b46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b4a:	f023 0303 	bic.w	r3, r3, #3
 8009b4e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b5e:	f023 0302 	bic.w	r3, r3, #2
 8009b62:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b8c:	f023 0303 	bic.w	r3, r3, #3
 8009b90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ba0:	f043 0302 	orr.w	r3, r3, #2
 8009ba4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ba6:	2300      	movs	r3, #0
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	4013      	ands	r3, r2
 8009bca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bec:	699b      	ldr	r3, [r3, #24]
 8009bee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	4013      	ands	r3, r2
 8009bfc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	0c1b      	lsrs	r3, r3, #16
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr

08009c0e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c0e:	b480      	push	{r7}
 8009c10:	b085      	sub	sp, #20
 8009c12:	af00      	add	r7, sp, #0
 8009c14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c20:	699b      	ldr	r3, [r3, #24]
 8009c22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2a:	69db      	ldr	r3, [r3, #28]
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	b29b      	uxth	r3, r3
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c5e:	689b      	ldr	r3, [r3, #8]
 8009c60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c68:	695b      	ldr	r3, [r3, #20]
 8009c6a:	68ba      	ldr	r2, [r7, #8]
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c70:	68bb      	ldr	r3, [r7, #8]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b087      	sub	sp, #28
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	6078      	str	r0, [r7, #4]
 8009c86:	460b      	mov	r3, r1
 8009c88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c94:	691b      	ldr	r3, [r3, #16]
 8009c96:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ca0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	f003 030f 	and.w	r3, r3, #15
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	01db      	lsls	r3, r3, #7
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cb8:	78fb      	ldrb	r3, [r7, #3]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	4013      	ands	r3, r2
 8009cca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	371c      	adds	r7, #28
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	f003 0301 	and.w	r3, r3, #1
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	370c      	adds	r7, #12
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d14:	f023 0307 	bic.w	r3, r3, #7
 8009d18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3714      	adds	r7, #20
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	460b      	mov	r3, r1
 8009d46:	607a      	str	r2, [r7, #4]
 8009d48:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	333c      	adds	r3, #60	; 0x3c
 8009d52:	3304      	adds	r3, #4
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	4a26      	ldr	r2, [pc, #152]	; (8009df4 <USB_EP0_OutStart+0xb8>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d90a      	bls.n	8009d76 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d70:	d101      	bne.n	8009d76 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	e037      	b.n	8009de6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	2300      	movs	r3, #0
 8009d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da4:	f043 0318 	orr.w	r3, r3, #24
 8009da8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	697a      	ldr	r2, [r7, #20]
 8009db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009dbc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009dbe:	7afb      	ldrb	r3, [r7, #11]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d10f      	bne.n	8009de4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dde:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	371c      	adds	r7, #28
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	4f54300a 	.word	0x4f54300a

08009df8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	3301      	adds	r3, #1
 8009e08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a13      	ldr	r2, [pc, #76]	; (8009e5c <USB_CoreReset+0x64>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d901      	bls.n	8009e16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e01b      	b.n	8009e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	daf2      	bge.n	8009e04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	f043 0201 	orr.w	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	4a09      	ldr	r2, [pc, #36]	; (8009e5c <USB_CoreReset+0x64>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d901      	bls.n	8009e40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	e006      	b.n	8009e4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d0f0      	beq.n	8009e2e <USB_CoreReset+0x36>

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	00030d40 	.word	0x00030d40

08009e60 <__NVIC_SetPriority>:
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	6039      	str	r1, [r7, #0]
 8009e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	db0a      	blt.n	8009e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	490c      	ldr	r1, [pc, #48]	; (8009eac <__NVIC_SetPriority+0x4c>)
 8009e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7e:	0112      	lsls	r2, r2, #4
 8009e80:	b2d2      	uxtb	r2, r2
 8009e82:	440b      	add	r3, r1
 8009e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e88:	e00a      	b.n	8009ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	b2da      	uxtb	r2, r3
 8009e8e:	4908      	ldr	r1, [pc, #32]	; (8009eb0 <__NVIC_SetPriority+0x50>)
 8009e90:	79fb      	ldrb	r3, [r7, #7]
 8009e92:	f003 030f 	and.w	r3, r3, #15
 8009e96:	3b04      	subs	r3, #4
 8009e98:	0112      	lsls	r2, r2, #4
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	761a      	strb	r2, [r3, #24]
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	e000e100 	.word	0xe000e100
 8009eb0:	e000ed00 	.word	0xe000ed00

08009eb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <SysTick_Handler+0x1c>)
 8009eba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009ebc:	f002 f936 	bl	800c12c <xTaskGetSchedulerState>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d001      	beq.n	8009eca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009ec6:	f000 fd97 	bl	800a9f8 <xPortSysTickHandler>
  }
}
 8009eca:	bf00      	nop
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	e000e010 	.word	0xe000e010

08009ed4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ed8:	2100      	movs	r1, #0
 8009eda:	f06f 0004 	mvn.w	r0, #4
 8009ede:	f7ff ffbf 	bl	8009e60 <__NVIC_SetPriority>
#endif
}
 8009ee2:	bf00      	nop
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eee:	f3ef 8305 	mrs	r3, IPSR
 8009ef2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ef4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009efa:	f06f 0305 	mvn.w	r3, #5
 8009efe:	607b      	str	r3, [r7, #4]
 8009f00:	e00c      	b.n	8009f1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f02:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <osKernelInitialize+0x44>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d105      	bne.n	8009f16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f0a:	4b08      	ldr	r3, [pc, #32]	; (8009f2c <osKernelInitialize+0x44>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	607b      	str	r3, [r7, #4]
 8009f14:	e002      	b.n	8009f1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f16:	f04f 33ff 	mov.w	r3, #4294967295
 8009f1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f1c:	687b      	ldr	r3, [r7, #4]
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	2000064c 	.word	0x2000064c

08009f30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f36:	f3ef 8305 	mrs	r3, IPSR
 8009f3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009f42:	f06f 0305 	mvn.w	r3, #5
 8009f46:	607b      	str	r3, [r7, #4]
 8009f48:	e010      	b.n	8009f6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <osKernelStart+0x48>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d109      	bne.n	8009f66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009f52:	f7ff ffbf 	bl	8009ed4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009f56:	4b08      	ldr	r3, [pc, #32]	; (8009f78 <osKernelStart+0x48>)
 8009f58:	2202      	movs	r2, #2
 8009f5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009f5c:	f001 fc9e 	bl	800b89c <vTaskStartScheduler>
      stat = osOK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	607b      	str	r3, [r7, #4]
 8009f64:	e002      	b.n	8009f6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009f66:	f04f 33ff 	mov.w	r3, #4294967295
 8009f6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f6c:	687b      	ldr	r3, [r7, #4]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	2000064c 	.word	0x2000064c

08009f7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08e      	sub	sp, #56	; 0x38
 8009f80:	af04      	add	r7, sp, #16
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f8c:	f3ef 8305 	mrs	r3, IPSR
 8009f90:	617b      	str	r3, [r7, #20]
  return(result);
 8009f92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d17e      	bne.n	800a096 <osThreadNew+0x11a>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d07b      	beq.n	800a096 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f9e:	2380      	movs	r3, #128	; 0x80
 8009fa0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009fa2:	2318      	movs	r3, #24
 8009fa4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009faa:	f04f 33ff 	mov.w	r3, #4294967295
 8009fae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d045      	beq.n	800a042 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <osThreadNew+0x48>
        name = attr->name;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d008      	beq.n	8009fea <osThreadNew+0x6e>
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b38      	cmp	r3, #56	; 0x38
 8009fdc:	d805      	bhi.n	8009fea <osThreadNew+0x6e>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <osThreadNew+0x72>
        return (NULL);
 8009fea:	2300      	movs	r3, #0
 8009fec:	e054      	b.n	800a098 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695b      	ldr	r3, [r3, #20]
 8009ffa:	089b      	lsrs	r3, r3, #2
 8009ffc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00e      	beq.n	800a024 <osThreadNew+0xa8>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	2b5b      	cmp	r3, #91	; 0x5b
 800a00c:	d90a      	bls.n	800a024 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a012:	2b00      	cmp	r3, #0
 800a014:	d006      	beq.n	800a024 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d002      	beq.n	800a024 <osThreadNew+0xa8>
        mem = 1;
 800a01e:	2301      	movs	r3, #1
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	e010      	b.n	800a046 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10c      	bne.n	800a046 <osThreadNew+0xca>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d108      	bne.n	800a046 <osThreadNew+0xca>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	691b      	ldr	r3, [r3, #16]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d104      	bne.n	800a046 <osThreadNew+0xca>
          mem = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	e001      	b.n	800a046 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a042:	2300      	movs	r3, #0
 800a044:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d110      	bne.n	800a06e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a054:	9202      	str	r2, [sp, #8]
 800a056:	9301      	str	r3, [sp, #4]
 800a058:	69fb      	ldr	r3, [r7, #28]
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	6a3a      	ldr	r2, [r7, #32]
 800a060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f001 fa44 	bl	800b4f0 <xTaskCreateStatic>
 800a068:	4603      	mov	r3, r0
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	e013      	b.n	800a096 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d110      	bne.n	800a096 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a074:	6a3b      	ldr	r3, [r7, #32]
 800a076:	b29a      	uxth	r2, r3
 800a078:	f107 0310 	add.w	r3, r7, #16
 800a07c:	9301      	str	r3, [sp, #4]
 800a07e:	69fb      	ldr	r3, [r7, #28]
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f001 fa8f 	bl	800b5aa <xTaskCreate>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d001      	beq.n	800a096 <osThreadNew+0x11a>
            hTask = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a096:	693b      	ldr	r3, [r7, #16]
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3728      	adds	r7, #40	; 0x28
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0a8:	f3ef 8305 	mrs	r3, IPSR
 800a0ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d003      	beq.n	800a0bc <osDelay+0x1c>
    stat = osErrorISR;
 800a0b4:	f06f 0305 	mvn.w	r3, #5
 800a0b8:	60fb      	str	r3, [r7, #12]
 800a0ba:	e007      	b.n	800a0cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f001 fbb4 	bl	800b834 <vTaskDelay>
    }
  }

  return (stat);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	4a07      	ldr	r2, [pc, #28]	; (800a104 <vApplicationGetIdleTaskMemory+0x2c>)
 800a0e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4a06      	ldr	r2, [pc, #24]	; (800a108 <vApplicationGetIdleTaskMemory+0x30>)
 800a0ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2280      	movs	r2, #128	; 0x80
 800a0f4:	601a      	str	r2, [r3, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr
 800a102:	bf00      	nop
 800a104:	20000650 	.word	0x20000650
 800a108:	200006ac 	.word	0x200006ac

0800a10c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4a07      	ldr	r2, [pc, #28]	; (800a138 <vApplicationGetTimerTaskMemory+0x2c>)
 800a11c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4a06      	ldr	r2, [pc, #24]	; (800a13c <vApplicationGetTimerTaskMemory+0x30>)
 800a122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a12a:	601a      	str	r2, [r3, #0]
}
 800a12c:	bf00      	nop
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr
 800a138:	200008ac 	.word	0x200008ac
 800a13c:	20000908 	.word	0x20000908

0800a140 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b08a      	sub	sp, #40	; 0x28
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a14c:	f001 fc0c 	bl	800b968 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a150:	4b5b      	ldr	r3, [pc, #364]	; (800a2c0 <pvPortMalloc+0x180>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d101      	bne.n	800a15c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a158:	f000 f920 	bl	800a39c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a15c:	4b59      	ldr	r3, [pc, #356]	; (800a2c4 <pvPortMalloc+0x184>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4013      	ands	r3, r2
 800a164:	2b00      	cmp	r3, #0
 800a166:	f040 8093 	bne.w	800a290 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d01d      	beq.n	800a1ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a170:	2208      	movs	r2, #8
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f003 0307 	and.w	r3, r3, #7
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d014      	beq.n	800a1ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f023 0307 	bic.w	r3, r3, #7
 800a188:	3308      	adds	r3, #8
 800a18a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f003 0307 	and.w	r3, r3, #7
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00a      	beq.n	800a1ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19a:	f383 8811 	msr	BASEPRI, r3
 800a19e:	f3bf 8f6f 	isb	sy
 800a1a2:	f3bf 8f4f 	dsb	sy
 800a1a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a1a8:	bf00      	nop
 800a1aa:	e7fe      	b.n	800a1aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d06e      	beq.n	800a290 <pvPortMalloc+0x150>
 800a1b2:	4b45      	ldr	r3, [pc, #276]	; (800a2c8 <pvPortMalloc+0x188>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	687a      	ldr	r2, [r7, #4]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d869      	bhi.n	800a290 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1bc:	4b43      	ldr	r3, [pc, #268]	; (800a2cc <pvPortMalloc+0x18c>)
 800a1be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1c0:	4b42      	ldr	r3, [pc, #264]	; (800a2cc <pvPortMalloc+0x18c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1c6:	e004      	b.n	800a1d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d903      	bls.n	800a1e4 <pvPortMalloc+0xa4>
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1f1      	bne.n	800a1c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1e4:	4b36      	ldr	r3, [pc, #216]	; (800a2c0 <pvPortMalloc+0x180>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d050      	beq.n	800a290 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1ee:	6a3b      	ldr	r3, [r7, #32]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2208      	movs	r2, #8
 800a1f4:	4413      	add	r3, r2
 800a1f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	685a      	ldr	r2, [r3, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	1ad2      	subs	r2, r2, r3
 800a208:	2308      	movs	r3, #8
 800a20a:	005b      	lsls	r3, r3, #1
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d91f      	bls.n	800a250 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4413      	add	r3, r2
 800a216:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	f003 0307 	and.w	r3, r3, #7
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <pvPortMalloc+0xf8>
	__asm volatile
 800a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a226:	f383 8811 	msr	BASEPRI, r3
 800a22a:	f3bf 8f6f 	isb	sy
 800a22e:	f3bf 8f4f 	dsb	sy
 800a232:	613b      	str	r3, [r7, #16]
}
 800a234:	bf00      	nop
 800a236:	e7fe      	b.n	800a236 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a24a:	69b8      	ldr	r0, [r7, #24]
 800a24c:	f000 f908 	bl	800a460 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a250:	4b1d      	ldr	r3, [pc, #116]	; (800a2c8 <pvPortMalloc+0x188>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	4a1b      	ldr	r2, [pc, #108]	; (800a2c8 <pvPortMalloc+0x188>)
 800a25c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a25e:	4b1a      	ldr	r3, [pc, #104]	; (800a2c8 <pvPortMalloc+0x188>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	4b1b      	ldr	r3, [pc, #108]	; (800a2d0 <pvPortMalloc+0x190>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	429a      	cmp	r2, r3
 800a268:	d203      	bcs.n	800a272 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a26a:	4b17      	ldr	r3, [pc, #92]	; (800a2c8 <pvPortMalloc+0x188>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a18      	ldr	r2, [pc, #96]	; (800a2d0 <pvPortMalloc+0x190>)
 800a270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	4b13      	ldr	r3, [pc, #76]	; (800a2c4 <pvPortMalloc+0x184>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	431a      	orrs	r2, r3
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a286:	4b13      	ldr	r3, [pc, #76]	; (800a2d4 <pvPortMalloc+0x194>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a11      	ldr	r2, [pc, #68]	; (800a2d4 <pvPortMalloc+0x194>)
 800a28e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a290:	f001 fb78 	bl	800b984 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f003 0307 	and.w	r3, r3, #7
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d00a      	beq.n	800a2b4 <pvPortMalloc+0x174>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
}
 800a2b0:	bf00      	nop
 800a2b2:	e7fe      	b.n	800a2b2 <pvPortMalloc+0x172>
	return pvReturn;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3728      	adds	r7, #40	; 0x28
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	20004910 	.word	0x20004910
 800a2c4:	20004924 	.word	0x20004924
 800a2c8:	20004914 	.word	0x20004914
 800a2cc:	20004908 	.word	0x20004908
 800a2d0:	20004918 	.word	0x20004918
 800a2d4:	2000491c 	.word	0x2000491c

0800a2d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d04d      	beq.n	800a386 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2ea:	2308      	movs	r3, #8
 800a2ec:	425b      	negs	r3, r3
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	685a      	ldr	r2, [r3, #4]
 800a2fc:	4b24      	ldr	r3, [pc, #144]	; (800a390 <vPortFree+0xb8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4013      	ands	r3, r2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10a      	bne.n	800a31c <vPortFree+0x44>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60fb      	str	r3, [r7, #12]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00a      	beq.n	800a33a <vPortFree+0x62>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	60bb      	str	r3, [r7, #8]
}
 800a336:	bf00      	nop
 800a338:	e7fe      	b.n	800a338 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	4b14      	ldr	r3, [pc, #80]	; (800a390 <vPortFree+0xb8>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4013      	ands	r3, r2
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01e      	beq.n	800a386 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d11a      	bne.n	800a386 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	4b0e      	ldr	r3, [pc, #56]	; (800a390 <vPortFree+0xb8>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	43db      	mvns	r3, r3
 800a35a:	401a      	ands	r2, r3
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a360:	f001 fb02 	bl	800b968 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	685a      	ldr	r2, [r3, #4]
 800a368:	4b0a      	ldr	r3, [pc, #40]	; (800a394 <vPortFree+0xbc>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4413      	add	r3, r2
 800a36e:	4a09      	ldr	r2, [pc, #36]	; (800a394 <vPortFree+0xbc>)
 800a370:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a372:	6938      	ldr	r0, [r7, #16]
 800a374:	f000 f874 	bl	800a460 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <vPortFree+0xc0>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	3301      	adds	r3, #1
 800a37e:	4a06      	ldr	r2, [pc, #24]	; (800a398 <vPortFree+0xc0>)
 800a380:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a382:	f001 faff 	bl	800b984 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a386:	bf00      	nop
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	20004924 	.word	0x20004924
 800a394:	20004914 	.word	0x20004914
 800a398:	20004920 	.word	0x20004920

0800a39c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a3a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3a8:	4b27      	ldr	r3, [pc, #156]	; (800a448 <prvHeapInit+0xac>)
 800a3aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00c      	beq.n	800a3d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	3307      	adds	r3, #7
 800a3ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	f023 0307 	bic.w	r3, r3, #7
 800a3c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	1ad3      	subs	r3, r2, r3
 800a3ca:	4a1f      	ldr	r2, [pc, #124]	; (800a448 <prvHeapInit+0xac>)
 800a3cc:	4413      	add	r3, r2
 800a3ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3d4:	4a1d      	ldr	r2, [pc, #116]	; (800a44c <prvHeapInit+0xb0>)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3da:	4b1c      	ldr	r3, [pc, #112]	; (800a44c <prvHeapInit+0xb0>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f023 0307 	bic.w	r3, r3, #7
 800a3f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4a15      	ldr	r2, [pc, #84]	; (800a450 <prvHeapInit+0xb4>)
 800a3fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3fe:	4b14      	ldr	r3, [pc, #80]	; (800a450 <prvHeapInit+0xb4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a406:	4b12      	ldr	r3, [pc, #72]	; (800a450 <prvHeapInit+0xb4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	68fa      	ldr	r2, [r7, #12]
 800a416:	1ad2      	subs	r2, r2, r3
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a41c:	4b0c      	ldr	r3, [pc, #48]	; (800a450 <prvHeapInit+0xb4>)
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	4a0a      	ldr	r2, [pc, #40]	; (800a454 <prvHeapInit+0xb8>)
 800a42a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	4a09      	ldr	r2, [pc, #36]	; (800a458 <prvHeapInit+0xbc>)
 800a432:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a434:	4b09      	ldr	r3, [pc, #36]	; (800a45c <prvHeapInit+0xc0>)
 800a436:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a43a:	601a      	str	r2, [r3, #0]
}
 800a43c:	bf00      	nop
 800a43e:	3714      	adds	r7, #20
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr
 800a448:	20000d08 	.word	0x20000d08
 800a44c:	20004908 	.word	0x20004908
 800a450:	20004910 	.word	0x20004910
 800a454:	20004918 	.word	0x20004918
 800a458:	20004914 	.word	0x20004914
 800a45c:	20004924 	.word	0x20004924

0800a460 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a468:	4b28      	ldr	r3, [pc, #160]	; (800a50c <prvInsertBlockIntoFreeList+0xac>)
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	e002      	b.n	800a474 <prvInsertBlockIntoFreeList+0x14>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60fb      	str	r3, [r7, #12]
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d8f7      	bhi.n	800a46e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	4413      	add	r3, r2
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d108      	bne.n	800a4a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	685a      	ldr	r2, [r3, #4]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	441a      	add	r2, r3
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	441a      	add	r2, r3
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d118      	bne.n	800a4e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	4b15      	ldr	r3, [pc, #84]	; (800a510 <prvInsertBlockIntoFreeList+0xb0>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d00d      	beq.n	800a4de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	441a      	add	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	e008      	b.n	800a4f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4de:	4b0c      	ldr	r3, [pc, #48]	; (800a510 <prvInsertBlockIntoFreeList+0xb0>)
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]
 800a4e6:	e003      	b.n	800a4f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4f0:	68fa      	ldr	r2, [r7, #12]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d002      	beq.n	800a4fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4fe:	bf00      	nop
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	20004908 	.word	0x20004908
 800a510:	20004910 	.word	0x20004910

0800a514 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f103 0208 	add.w	r2, r3, #8
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f04f 32ff 	mov.w	r2, #4294967295
 800a52c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f103 0208 	add.w	r2, r3, #8
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f103 0208 	add.w	r2, r3, #8
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a548:	bf00      	nop
 800a54a:	370c      	adds	r7, #12
 800a54c:	46bd      	mov	sp, r7
 800a54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a552:	4770      	bx	lr

0800a554 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a562:	bf00      	nop
 800a564:	370c      	adds	r7, #12
 800a566:	46bd      	mov	sp, r7
 800a568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56c:	4770      	bx	lr

0800a56e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a56e:	b480      	push	{r7}
 800a570:	b085      	sub	sp, #20
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
 800a576:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	68fa      	ldr	r2, [r7, #12]
 800a582:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	689a      	ldr	r2, [r3, #8]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	601a      	str	r2, [r3, #0]
}
 800a5aa:	bf00      	nop
 800a5ac:	3714      	adds	r7, #20
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5b6:	b480      	push	{r7}
 800a5b8:	b085      	sub	sp, #20
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5cc:	d103      	bne.n	800a5d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	691b      	ldr	r3, [r3, #16]
 800a5d2:	60fb      	str	r3, [r7, #12]
 800a5d4:	e00c      	b.n	800a5f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3308      	adds	r3, #8
 800a5da:	60fb      	str	r3, [r7, #12]
 800a5dc:	e002      	b.n	800a5e4 <vListInsert+0x2e>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d2f6      	bcs.n	800a5de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	685a      	ldr	r2, [r3, #4]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	683a      	ldr	r2, [r7, #0]
 800a5fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	683a      	ldr	r2, [r7, #0]
 800a60a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	1c5a      	adds	r2, r3, #1
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	601a      	str	r2, [r3, #0]
}
 800a61c:	bf00      	nop
 800a61e:	3714      	adds	r7, #20
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	6892      	ldr	r2, [r2, #8]
 800a63e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	6852      	ldr	r2, [r2, #4]
 800a648:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d103      	bne.n	800a65c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689a      	ldr	r2, [r3, #8]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	1e5a      	subs	r2, r3, #1
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3b04      	subs	r3, #4
 800a68c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	3b04      	subs	r3, #4
 800a69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	f023 0201 	bic.w	r2, r3, #1
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	3b04      	subs	r3, #4
 800a6aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6ac:	4a0c      	ldr	r2, [pc, #48]	; (800a6e0 <pxPortInitialiseStack+0x64>)
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3b14      	subs	r3, #20
 800a6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f06f 0202 	mvn.w	r2, #2
 800a6ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	3b20      	subs	r3, #32
 800a6d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr
 800a6e0:	0800a6e5 	.word	0x0800a6e5

0800a6e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a6ee:	4b12      	ldr	r3, [pc, #72]	; (800a738 <prvTaskExitError+0x54>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f6:	d00a      	beq.n	800a70e <prvTaskExitError+0x2a>
	__asm volatile
 800a6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fc:	f383 8811 	msr	BASEPRI, r3
 800a700:	f3bf 8f6f 	isb	sy
 800a704:	f3bf 8f4f 	dsb	sy
 800a708:	60fb      	str	r3, [r7, #12]
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <prvTaskExitError+0x28>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	60bb      	str	r3, [r7, #8]
}
 800a720:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a722:	bf00      	nop
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d0fc      	beq.n	800a724 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	3714      	adds	r7, #20
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr
 800a738:	20000088 	.word	0x20000088
 800a73c:	00000000 	.word	0x00000000

0800a740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a740:	4b07      	ldr	r3, [pc, #28]	; (800a760 <pxCurrentTCBConst2>)
 800a742:	6819      	ldr	r1, [r3, #0]
 800a744:	6808      	ldr	r0, [r1, #0]
 800a746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	f380 8809 	msr	PSP, r0
 800a74e:	f3bf 8f6f 	isb	sy
 800a752:	f04f 0000 	mov.w	r0, #0
 800a756:	f380 8811 	msr	BASEPRI, r0
 800a75a:	4770      	bx	lr
 800a75c:	f3af 8000 	nop.w

0800a760 <pxCurrentTCBConst2>:
 800a760:	20004970 	.word	0x20004970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a764:	bf00      	nop
 800a766:	bf00      	nop

0800a768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a768:	4808      	ldr	r0, [pc, #32]	; (800a78c <prvPortStartFirstTask+0x24>)
 800a76a:	6800      	ldr	r0, [r0, #0]
 800a76c:	6800      	ldr	r0, [r0, #0]
 800a76e:	f380 8808 	msr	MSP, r0
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8814 	msr	CONTROL, r0
 800a77a:	b662      	cpsie	i
 800a77c:	b661      	cpsie	f
 800a77e:	f3bf 8f4f 	dsb	sy
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	df00      	svc	0
 800a788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a78a:	bf00      	nop
 800a78c:	e000ed08 	.word	0xe000ed08

0800a790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a796:	4b46      	ldr	r3, [pc, #280]	; (800a8b0 <xPortStartScheduler+0x120>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a46      	ldr	r2, [pc, #280]	; (800a8b4 <xPortStartScheduler+0x124>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d10a      	bne.n	800a7b6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	613b      	str	r3, [r7, #16]
}
 800a7b2:	bf00      	nop
 800a7b4:	e7fe      	b.n	800a7b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7b6:	4b3e      	ldr	r3, [pc, #248]	; (800a8b0 <xPortStartScheduler+0x120>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a3f      	ldr	r2, [pc, #252]	; (800a8b8 <xPortStartScheduler+0x128>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d10a      	bne.n	800a7d6 <xPortStartScheduler+0x46>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	60fb      	str	r3, [r7, #12]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7d6:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <xPortStartScheduler+0x12c>)
 800a7d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	22ff      	movs	r2, #255	; 0xff
 800a7e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a7f8:	b2da      	uxtb	r2, r3
 800a7fa:	4b31      	ldr	r3, [pc, #196]	; (800a8c0 <xPortStartScheduler+0x130>)
 800a7fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a7fe:	4b31      	ldr	r3, [pc, #196]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a804:	e009      	b.n	800a81a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a806:	4b2f      	ldr	r3, [pc, #188]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3b01      	subs	r3, #1
 800a80c:	4a2d      	ldr	r2, [pc, #180]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a80e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	b2db      	uxtb	r3, r3
 800a818:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a81a:	78fb      	ldrb	r3, [r7, #3]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d0ef      	beq.n	800a806 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a826:	4b27      	ldr	r3, [pc, #156]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f1c3 0307 	rsb	r3, r3, #7
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d00a      	beq.n	800a848 <xPortStartScheduler+0xb8>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	f383 8811 	msr	BASEPRI, r3
 800a83a:	f3bf 8f6f 	isb	sy
 800a83e:	f3bf 8f4f 	dsb	sy
 800a842:	60bb      	str	r3, [r7, #8]
}
 800a844:	bf00      	nop
 800a846:	e7fe      	b.n	800a846 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a848:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	4a1d      	ldr	r2, [pc, #116]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a850:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a852:	4b1c      	ldr	r3, [pc, #112]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a85a:	4a1a      	ldr	r2, [pc, #104]	; (800a8c4 <xPortStartScheduler+0x134>)
 800a85c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	b2da      	uxtb	r2, r3
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a866:	4b18      	ldr	r3, [pc, #96]	; (800a8c8 <xPortStartScheduler+0x138>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a17      	ldr	r2, [pc, #92]	; (800a8c8 <xPortStartScheduler+0x138>)
 800a86c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a872:	4b15      	ldr	r3, [pc, #84]	; (800a8c8 <xPortStartScheduler+0x138>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a14      	ldr	r2, [pc, #80]	; (800a8c8 <xPortStartScheduler+0x138>)
 800a878:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a87c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a87e:	f000 f8dd 	bl	800aa3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a882:	4b12      	ldr	r3, [pc, #72]	; (800a8cc <xPortStartScheduler+0x13c>)
 800a884:	2200      	movs	r2, #0
 800a886:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a888:	f000 f8fc 	bl	800aa84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <xPortStartScheduler+0x140>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a0f      	ldr	r2, [pc, #60]	; (800a8d0 <xPortStartScheduler+0x140>)
 800a892:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a896:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a898:	f7ff ff66 	bl	800a768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a89c:	f001 f9da 	bl	800bc54 <vTaskSwitchContext>
	prvTaskExitError();
 800a8a0:	f7ff ff20 	bl	800a6e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8a4:	2300      	movs	r3, #0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3718      	adds	r7, #24
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	e000ed00 	.word	0xe000ed00
 800a8b4:	410fc271 	.word	0x410fc271
 800a8b8:	410fc270 	.word	0x410fc270
 800a8bc:	e000e400 	.word	0xe000e400
 800a8c0:	20004928 	.word	0x20004928
 800a8c4:	2000492c 	.word	0x2000492c
 800a8c8:	e000ed20 	.word	0xe000ed20
 800a8cc:	20000088 	.word	0x20000088
 800a8d0:	e000ef34 	.word	0xe000ef34

0800a8d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	607b      	str	r3, [r7, #4]
}
 800a8ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a8ee:	4b0f      	ldr	r3, [pc, #60]	; (800a92c <vPortEnterCritical+0x58>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	4a0d      	ldr	r2, [pc, #52]	; (800a92c <vPortEnterCritical+0x58>)
 800a8f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <vPortEnterCritical+0x58>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d10f      	bne.n	800a920 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <vPortEnterCritical+0x5c>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	b2db      	uxtb	r3, r3
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <vPortEnterCritical+0x4c>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	603b      	str	r3, [r7, #0]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <vPortEnterCritical+0x4a>
	}
}
 800a920:	bf00      	nop
 800a922:	370c      	adds	r7, #12
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr
 800a92c:	20000088 	.word	0x20000088
 800a930:	e000ed04 	.word	0xe000ed04

0800a934 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a93a:	4b12      	ldr	r3, [pc, #72]	; (800a984 <vPortExitCritical+0x50>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10a      	bne.n	800a958 <vPortExitCritical+0x24>
	__asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	607b      	str	r3, [r7, #4]
}
 800a954:	bf00      	nop
 800a956:	e7fe      	b.n	800a956 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a958:	4b0a      	ldr	r3, [pc, #40]	; (800a984 <vPortExitCritical+0x50>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	4a09      	ldr	r2, [pc, #36]	; (800a984 <vPortExitCritical+0x50>)
 800a960:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a962:	4b08      	ldr	r3, [pc, #32]	; (800a984 <vPortExitCritical+0x50>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d105      	bne.n	800a976 <vPortExitCritical+0x42>
 800a96a:	2300      	movs	r3, #0
 800a96c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a974:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	20000088 	.word	0x20000088
	...

0800a990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a990:	f3ef 8009 	mrs	r0, PSP
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	4b15      	ldr	r3, [pc, #84]	; (800a9f0 <pxCurrentTCBConst>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	f01e 0f10 	tst.w	lr, #16
 800a9a0:	bf08      	it	eq
 800a9a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9aa:	6010      	str	r0, [r2, #0]
 800a9ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9b4:	f380 8811 	msr	BASEPRI, r0
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f001 f948 	bl	800bc54 <vTaskSwitchContext>
 800a9c4:	f04f 0000 	mov.w	r0, #0
 800a9c8:	f380 8811 	msr	BASEPRI, r0
 800a9cc:	bc09      	pop	{r0, r3}
 800a9ce:	6819      	ldr	r1, [r3, #0]
 800a9d0:	6808      	ldr	r0, [r1, #0]
 800a9d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d6:	f01e 0f10 	tst.w	lr, #16
 800a9da:	bf08      	it	eq
 800a9dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a9e0:	f380 8809 	msr	PSP, r0
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop
 800a9ec:	f3af 8000 	nop.w

0800a9f0 <pxCurrentTCBConst>:
 800a9f0:	20004970 	.word	0x20004970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a9f4:	bf00      	nop
 800a9f6:	bf00      	nop

0800a9f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	607b      	str	r3, [r7, #4]
}
 800aa10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa12:	f001 f865 	bl	800bae0 <xTaskIncrementTick>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa1c:	4b06      	ldr	r3, [pc, #24]	; (800aa38 <xPortSysTickHandler+0x40>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	2300      	movs	r3, #0
 800aa26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	f383 8811 	msr	BASEPRI, r3
}
 800aa2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa30:	bf00      	nop
 800aa32:	3708      	adds	r7, #8
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa40:	4b0b      	ldr	r3, [pc, #44]	; (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa46:	4b0b      	ldr	r3, [pc, #44]	; (800aa74 <vPortSetupTimerInterrupt+0x38>)
 800aa48:	2200      	movs	r2, #0
 800aa4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa4c:	4b0a      	ldr	r3, [pc, #40]	; (800aa78 <vPortSetupTimerInterrupt+0x3c>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a0a      	ldr	r2, [pc, #40]	; (800aa7c <vPortSetupTimerInterrupt+0x40>)
 800aa52:	fba2 2303 	umull	r2, r3, r2, r3
 800aa56:	099b      	lsrs	r3, r3, #6
 800aa58:	4a09      	ldr	r2, [pc, #36]	; (800aa80 <vPortSetupTimerInterrupt+0x44>)
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa5e:	4b04      	ldr	r3, [pc, #16]	; (800aa70 <vPortSetupTimerInterrupt+0x34>)
 800aa60:	2207      	movs	r2, #7
 800aa62:	601a      	str	r2, [r3, #0]
}
 800aa64:	bf00      	nop
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	e000e010 	.word	0xe000e010
 800aa74:	e000e018 	.word	0xe000e018
 800aa78:	20000000 	.word	0x20000000
 800aa7c:	10624dd3 	.word	0x10624dd3
 800aa80:	e000e014 	.word	0xe000e014

0800aa84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aa84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aa94 <vPortEnableVFP+0x10>
 800aa88:	6801      	ldr	r1, [r0, #0]
 800aa8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aa8e:	6001      	str	r1, [r0, #0]
 800aa90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aa92:	bf00      	nop
 800aa94:	e000ed88 	.word	0xe000ed88

0800aa98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aa98:	b480      	push	{r7}
 800aa9a:	b085      	sub	sp, #20
 800aa9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aa9e:	f3ef 8305 	mrs	r3, IPSR
 800aaa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2b0f      	cmp	r3, #15
 800aaa8:	d914      	bls.n	800aad4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaaa:	4a17      	ldr	r2, [pc, #92]	; (800ab08 <vPortValidateInterruptPriority+0x70>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	781b      	ldrb	r3, [r3, #0]
 800aab2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aab4:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <vPortValidateInterruptPriority+0x74>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	7afa      	ldrb	r2, [r7, #11]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d20a      	bcs.n	800aad4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	607b      	str	r3, [r7, #4]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aad4:	4b0e      	ldr	r3, [pc, #56]	; (800ab10 <vPortValidateInterruptPriority+0x78>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aadc:	4b0d      	ldr	r3, [pc, #52]	; (800ab14 <vPortValidateInterruptPriority+0x7c>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d90a      	bls.n	800aafa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800aae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	603b      	str	r3, [r7, #0]
}
 800aaf6:	bf00      	nop
 800aaf8:	e7fe      	b.n	800aaf8 <vPortValidateInterruptPriority+0x60>
	}
 800aafa:	bf00      	nop
 800aafc:	3714      	adds	r7, #20
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	e000e3f0 	.word	0xe000e3f0
 800ab0c:	20004928 	.word	0x20004928
 800ab10:	e000ed0c 	.word	0xe000ed0c
 800ab14:	2000492c 	.word	0x2000492c

0800ab18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d10a      	bne.n	800ab42 <xQueueGenericReset+0x2a>
	__asm volatile
 800ab2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab30:	f383 8811 	msr	BASEPRI, r3
 800ab34:	f3bf 8f6f 	isb	sy
 800ab38:	f3bf 8f4f 	dsb	sy
 800ab3c:	60bb      	str	r3, [r7, #8]
}
 800ab3e:	bf00      	nop
 800ab40:	e7fe      	b.n	800ab40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ab42:	f7ff fec7 	bl	800a8d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681a      	ldr	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab4e:	68f9      	ldr	r1, [r7, #12]
 800ab50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab52:	fb01 f303 	mul.w	r3, r1, r3
 800ab56:	441a      	add	r2, r3
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab72:	3b01      	subs	r3, #1
 800ab74:	68f9      	ldr	r1, [r7, #12]
 800ab76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab78:	fb01 f303 	mul.w	r3, r1, r3
 800ab7c:	441a      	add	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	22ff      	movs	r2, #255	; 0xff
 800ab86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	22ff      	movs	r2, #255	; 0xff
 800ab8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d114      	bne.n	800abc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d01a      	beq.n	800abd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3310      	adds	r3, #16
 800aba4:	4618      	mov	r0, r3
 800aba6:	f001 f903 	bl	800bdb0 <xTaskRemoveFromEventList>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d012      	beq.n	800abd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <xQueueGenericReset+0xcc>)
 800abb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb6:	601a      	str	r2, [r3, #0]
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	e009      	b.n	800abd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3310      	adds	r3, #16
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff fca4 	bl	800a514 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3324      	adds	r3, #36	; 0x24
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fc9f 	bl	800a514 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800abd6:	f7ff fead 	bl	800a934 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800abda:	2301      	movs	r3, #1
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	e000ed04 	.word	0xe000ed04

0800abe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b08e      	sub	sp, #56	; 0x38
 800abec:	af02      	add	r7, sp, #8
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	60b9      	str	r1, [r7, #8]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac2a:	bf00      	nop
 800ac2c:	e7fe      	b.n	800ac2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <xQueueGenericCreateStatic+0x52>
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <xQueueGenericCreateStatic+0x56>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e000      	b.n	800ac40 <xQueueGenericCreateStatic+0x58>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d10a      	bne.n	800ac5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ac44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac48:	f383 8811 	msr	BASEPRI, r3
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	f3bf 8f4f 	dsb	sy
 800ac54:	623b      	str	r3, [r7, #32]
}
 800ac56:	bf00      	nop
 800ac58:	e7fe      	b.n	800ac58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d102      	bne.n	800ac66 <xQueueGenericCreateStatic+0x7e>
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d101      	bne.n	800ac6a <xQueueGenericCreateStatic+0x82>
 800ac66:	2301      	movs	r3, #1
 800ac68:	e000      	b.n	800ac6c <xQueueGenericCreateStatic+0x84>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10a      	bne.n	800ac86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ac70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	61fb      	str	r3, [r7, #28]
}
 800ac82:	bf00      	nop
 800ac84:	e7fe      	b.n	800ac84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac86:	2350      	movs	r3, #80	; 0x50
 800ac88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	2b50      	cmp	r3, #80	; 0x50
 800ac8e:	d00a      	beq.n	800aca6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ac90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac94:	f383 8811 	msr	BASEPRI, r3
 800ac98:	f3bf 8f6f 	isb	sy
 800ac9c:	f3bf 8f4f 	dsb	sy
 800aca0:	61bb      	str	r3, [r7, #24]
}
 800aca2:	bf00      	nop
 800aca4:	e7fe      	b.n	800aca4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aca6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800acac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00d      	beq.n	800acce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800acb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800acba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	4613      	mov	r3, r2
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	68b9      	ldr	r1, [r7, #8]
 800acc8:	68f8      	ldr	r0, [r7, #12]
 800acca:	f000 f805 	bl	800acd8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3730      	adds	r7, #48	; 0x30
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
 800ace4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	69ba      	ldr	r2, [r7, #24]
 800acf0:	601a      	str	r2, [r3, #0]
 800acf2:	e002      	b.n	800acfa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	68fa      	ldr	r2, [r7, #12]
 800acfe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad06:	2101      	movs	r1, #1
 800ad08:	69b8      	ldr	r0, [r7, #24]
 800ad0a:	f7ff ff05 	bl	800ab18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	78fa      	ldrb	r2, [r7, #3]
 800ad12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
	...

0800ad20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b08e      	sub	sp, #56	; 0x38
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	60f8      	str	r0, [r7, #12]
 800ad28:	60b9      	str	r1, [r7, #8]
 800ad2a:	607a      	str	r2, [r7, #4]
 800ad2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <xQueueGenericSend+0x32>
	__asm volatile
 800ad3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad40:	f383 8811 	msr	BASEPRI, r3
 800ad44:	f3bf 8f6f 	isb	sy
 800ad48:	f3bf 8f4f 	dsb	sy
 800ad4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad4e:	bf00      	nop
 800ad50:	e7fe      	b.n	800ad50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d103      	bne.n	800ad60 <xQueueGenericSend+0x40>
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <xQueueGenericSend+0x44>
 800ad60:	2301      	movs	r3, #1
 800ad62:	e000      	b.n	800ad66 <xQueueGenericSend+0x46>
 800ad64:	2300      	movs	r3, #0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10a      	bne.n	800ad80 <xQueueGenericSend+0x60>
	__asm volatile
 800ad6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6e:	f383 8811 	msr	BASEPRI, r3
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	f3bf 8f4f 	dsb	sy
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d103      	bne.n	800ad8e <xQueueGenericSend+0x6e>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d101      	bne.n	800ad92 <xQueueGenericSend+0x72>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueGenericSend+0x74>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d10a      	bne.n	800adae <xQueueGenericSend+0x8e>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	623b      	str	r3, [r7, #32]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adae:	f001 f9bd 	bl	800c12c <xTaskGetSchedulerState>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d102      	bne.n	800adbe <xQueueGenericSend+0x9e>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d101      	bne.n	800adc2 <xQueueGenericSend+0xa2>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e000      	b.n	800adc4 <xQueueGenericSend+0xa4>
 800adc2:	2300      	movs	r3, #0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <xQueueGenericSend+0xbe>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	61fb      	str	r3, [r7, #28]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adde:	f7ff fd79 	bl	800a8d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	429a      	cmp	r2, r3
 800adec:	d302      	bcc.n	800adf4 <xQueueGenericSend+0xd4>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d129      	bne.n	800ae48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adfa:	f000 fa0b 	bl	800b214 <prvCopyDataToQueue>
 800adfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d010      	beq.n	800ae2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	3324      	adds	r3, #36	; 0x24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 ffcf 	bl	800bdb0 <xTaskRemoveFromEventList>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d013      	beq.n	800ae40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae18:	4b3f      	ldr	r3, [pc, #252]	; (800af18 <xQueueGenericSend+0x1f8>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	e00a      	b.n	800ae40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae30:	4b39      	ldr	r3, [pc, #228]	; (800af18 <xQueueGenericSend+0x1f8>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae40:	f7ff fd78 	bl	800a934 <vPortExitCritical>
				return pdPASS;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e063      	b.n	800af10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae4e:	f7ff fd71 	bl	800a934 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e05c      	b.n	800af10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae5c:	f107 0314 	add.w	r3, r7, #20
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 f809 	bl	800be78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae66:	2301      	movs	r3, #1
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae6a:	f7ff fd63 	bl	800a934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae6e:	f000 fd7b 	bl	800b968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae72:	f7ff fd2f 	bl	800a8d4 <vPortEnterCritical>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae82:	d103      	bne.n	800ae8c <xQueueGenericSend+0x16c>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae98:	d103      	bne.n	800aea2 <xQueueGenericSend+0x182>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea2:	f7ff fd47 	bl	800a934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aea6:	1d3a      	adds	r2, r7, #4
 800aea8:	f107 0314 	add.w	r3, r7, #20
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f000 fff8 	bl	800bea4 <xTaskCheckForTimeOut>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d124      	bne.n	800af04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aebc:	f000 faa2 	bl	800b404 <prvIsQueueFull>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d018      	beq.n	800aef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	3310      	adds	r3, #16
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 ff1e 	bl	800bd10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f000 fa2d 	bl	800b334 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeda:	f000 fd53 	bl	800b984 <xTaskResumeAll>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f47f af7c 	bne.w	800adde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <xQueueGenericSend+0x1f8>)
 800aee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	e772      	b.n	800adde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefa:	f000 fa1b 	bl	800b334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aefe:	f000 fd41 	bl	800b984 <xTaskResumeAll>
 800af02:	e76c      	b.n	800adde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af06:	f000 fa15 	bl	800b334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af0a:	f000 fd3b 	bl	800b984 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af10:	4618      	mov	r0, r3
 800af12:	3738      	adds	r7, #56	; 0x38
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	e000ed04 	.word	0xe000ed04

0800af1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b090      	sub	sp, #64	; 0x40
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d103      	bne.n	800af58 <xQueueGenericSendFromISR+0x3c>
 800af50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	2b00      	cmp	r3, #0
 800af56:	d101      	bne.n	800af5c <xQueueGenericSendFromISR+0x40>
 800af58:	2301      	movs	r3, #1
 800af5a:	e000      	b.n	800af5e <xQueueGenericSendFromISR+0x42>
 800af5c:	2300      	movs	r3, #0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af74:	bf00      	nop
 800af76:	e7fe      	b.n	800af76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b02      	cmp	r3, #2
 800af7c:	d103      	bne.n	800af86 <xQueueGenericSendFromISR+0x6a>
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af82:	2b01      	cmp	r3, #1
 800af84:	d101      	bne.n	800af8a <xQueueGenericSendFromISR+0x6e>
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <xQueueGenericSendFromISR+0x70>
 800af8a:	2300      	movs	r3, #0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10a      	bne.n	800afa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	623b      	str	r3, [r7, #32]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afa6:	f7ff fd77 	bl	800aa98 <vPortValidateInterruptPriority>
	__asm volatile
 800afaa:	f3ef 8211 	mrs	r2, BASEPRI
 800afae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb2:	f383 8811 	msr	BASEPRI, r3
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	f3bf 8f4f 	dsb	sy
 800afbe:	61fa      	str	r2, [r7, #28]
 800afc0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800afc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afce:	429a      	cmp	r2, r3
 800afd0:	d302      	bcc.n	800afd8 <xQueueGenericSendFromISR+0xbc>
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d12f      	bne.n	800b038 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afe8:	683a      	ldr	r2, [r7, #0]
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afee:	f000 f911 	bl	800b214 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800aff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affa:	d112      	bne.n	800b022 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800affc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800affe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d016      	beq.n	800b032 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	3324      	adds	r3, #36	; 0x24
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fed1 	bl	800bdb0 <xTaskRemoveFromEventList>
 800b00e:	4603      	mov	r3, r0
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00e      	beq.n	800b032 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00b      	beq.n	800b032 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2201      	movs	r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
 800b020:	e007      	b.n	800b032 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b026:	3301      	adds	r3, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	b25a      	sxtb	r2, r3
 800b02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b032:	2301      	movs	r3, #1
 800b034:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b036:	e001      	b.n	800b03c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b038:	2300      	movs	r3, #0
 800b03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b03e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f383 8811 	msr	BASEPRI, r3
}
 800b046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3740      	adds	r7, #64	; 0x40
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
	...

0800b054 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b08c      	sub	sp, #48	; 0x30
 800b058:	af00      	add	r7, sp, #0
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b060:	2300      	movs	r3, #0
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <xQueueReceive+0x30>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	623b      	str	r3, [r7, #32]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d103      	bne.n	800b092 <xQueueReceive+0x3e>
 800b08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <xQueueReceive+0x42>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <xQueueReceive+0x44>
 800b096:	2300      	movs	r3, #0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10a      	bne.n	800b0b2 <xQueueReceive+0x5e>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61fb      	str	r3, [r7, #28]
}
 800b0ae:	bf00      	nop
 800b0b0:	e7fe      	b.n	800b0b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0b2:	f001 f83b 	bl	800c12c <xTaskGetSchedulerState>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d102      	bne.n	800b0c2 <xQueueReceive+0x6e>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d101      	bne.n	800b0c6 <xQueueReceive+0x72>
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e000      	b.n	800b0c8 <xQueueReceive+0x74>
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <xQueueReceive+0x8e>
	__asm volatile
 800b0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d0:	f383 8811 	msr	BASEPRI, r3
 800b0d4:	f3bf 8f6f 	isb	sy
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	61bb      	str	r3, [r7, #24]
}
 800b0de:	bf00      	nop
 800b0e0:	e7fe      	b.n	800b0e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0e2:	f7ff fbf7 	bl	800a8d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d01f      	beq.n	800b132 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0f2:	68b9      	ldr	r1, [r7, #8]
 800b0f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f6:	f000 f8f7 	bl	800b2e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	1e5a      	subs	r2, r3, #1
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	691b      	ldr	r3, [r3, #16]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d00f      	beq.n	800b12a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10c:	3310      	adds	r3, #16
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fe4e 	bl	800bdb0 <xTaskRemoveFromEventList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d007      	beq.n	800b12a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b11a:	4b3d      	ldr	r3, [pc, #244]	; (800b210 <xQueueReceive+0x1bc>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b12a:	f7ff fc03 	bl	800a934 <vPortExitCritical>
				return pdPASS;
 800b12e:	2301      	movs	r3, #1
 800b130:	e069      	b.n	800b206 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d103      	bne.n	800b140 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b138:	f7ff fbfc 	bl	800a934 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b13c:	2300      	movs	r3, #0
 800b13e:	e062      	b.n	800b206 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b142:	2b00      	cmp	r3, #0
 800b144:	d106      	bne.n	800b154 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b146:	f107 0310 	add.w	r3, r7, #16
 800b14a:	4618      	mov	r0, r3
 800b14c:	f000 fe94 	bl	800be78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b154:	f7ff fbee 	bl	800a934 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b158:	f000 fc06 	bl	800b968 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b15c:	f7ff fbba 	bl	800a8d4 <vPortEnterCritical>
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b166:	b25b      	sxtb	r3, r3
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b16c:	d103      	bne.n	800b176 <xQueueReceive+0x122>
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	2200      	movs	r2, #0
 800b172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b17c:	b25b      	sxtb	r3, r3
 800b17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b182:	d103      	bne.n	800b18c <xQueueReceive+0x138>
 800b184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b18c:	f7ff fbd2 	bl	800a934 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b190:	1d3a      	adds	r2, r7, #4
 800b192:	f107 0310 	add.w	r3, r7, #16
 800b196:	4611      	mov	r1, r2
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fe83 	bl	800bea4 <xTaskCheckForTimeOut>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d123      	bne.n	800b1ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1a6:	f000 f917 	bl	800b3d8 <prvIsQueueEmpty>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d017      	beq.n	800b1e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	3324      	adds	r3, #36	; 0x24
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	4611      	mov	r1, r2
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fda9 	bl	800bd10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c0:	f000 f8b8 	bl	800b334 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1c4:	f000 fbde 	bl	800b984 <xTaskResumeAll>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d189      	bne.n	800b0e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b1ce:	4b10      	ldr	r3, [pc, #64]	; (800b210 <xQueueReceive+0x1bc>)
 800b1d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1d4:	601a      	str	r2, [r3, #0]
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	f3bf 8f6f 	isb	sy
 800b1de:	e780      	b.n	800b0e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e2:	f000 f8a7 	bl	800b334 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1e6:	f000 fbcd 	bl	800b984 <xTaskResumeAll>
 800b1ea:	e77a      	b.n	800b0e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1ee:	f000 f8a1 	bl	800b334 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1f2:	f000 fbc7 	bl	800b984 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f8:	f000 f8ee 	bl	800b3d8 <prvIsQueueEmpty>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f43f af6f 	beq.w	800b0e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b204:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b206:	4618      	mov	r0, r3
 800b208:	3730      	adds	r7, #48	; 0x30
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b220:	2300      	movs	r3, #0
 800b222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d10d      	bne.n	800b24e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d14d      	bne.n	800b2d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 ff92 	bl	800c168 <xTaskPriorityDisinherit>
 800b244:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	609a      	str	r2, [r3, #8]
 800b24c:	e043      	b.n	800b2d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d119      	bne.n	800b288 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6858      	ldr	r0, [r3, #4]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	461a      	mov	r2, r3
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	f004 f8a0 	bl	800f3a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b26c:	441a      	add	r2, r3
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	685a      	ldr	r2, [r3, #4]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d32b      	bcc.n	800b2d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	605a      	str	r2, [r3, #4]
 800b286:	e026      	b.n	800b2d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	68d8      	ldr	r0, [r3, #12]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b290:	461a      	mov	r2, r3
 800b292:	68b9      	ldr	r1, [r7, #8]
 800b294:	f004 f886 	bl	800f3a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68da      	ldr	r2, [r3, #12]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a0:	425b      	negs	r3, r3
 800b2a2:	441a      	add	r2, r3
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68da      	ldr	r2, [r3, #12]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d207      	bcs.n	800b2c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	689a      	ldr	r2, [r3, #8]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2bc:	425b      	negs	r3, r3
 800b2be:	441a      	add	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d105      	bne.n	800b2d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2de:	697b      	ldr	r3, [r7, #20]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d018      	beq.n	800b32c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b302:	441a      	add	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	429a      	cmp	r2, r3
 800b312:	d303      	bcc.n	800b31c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68d9      	ldr	r1, [r3, #12]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b324:	461a      	mov	r2, r3
 800b326:	6838      	ldr	r0, [r7, #0]
 800b328:	f004 f83c 	bl	800f3a4 <memcpy>
	}
}
 800b32c:	bf00      	nop
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b33c:	f7ff faca 	bl	800a8d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b346:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b348:	e011      	b.n	800b36e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d012      	beq.n	800b378 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	3324      	adds	r3, #36	; 0x24
 800b356:	4618      	mov	r0, r3
 800b358:	f000 fd2a 	bl	800bdb0 <xTaskRemoveFromEventList>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d001      	beq.n	800b366 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b362:	f000 fe01 	bl	800bf68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	3b01      	subs	r3, #1
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b372:	2b00      	cmp	r3, #0
 800b374:	dce9      	bgt.n	800b34a <prvUnlockQueue+0x16>
 800b376:	e000      	b.n	800b37a <prvUnlockQueue+0x46>
					break;
 800b378:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	22ff      	movs	r2, #255	; 0xff
 800b37e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b382:	f7ff fad7 	bl	800a934 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b386:	f7ff faa5 	bl	800a8d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b390:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b392:	e011      	b.n	800b3b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d012      	beq.n	800b3c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3310      	adds	r3, #16
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fd05 	bl	800bdb0 <xTaskRemoveFromEventList>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3ac:	f000 fddc 	bl	800bf68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3b0:	7bbb      	ldrb	r3, [r7, #14]
 800b3b2:	3b01      	subs	r3, #1
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	dce9      	bgt.n	800b394 <prvUnlockQueue+0x60>
 800b3c0:	e000      	b.n	800b3c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	22ff      	movs	r2, #255	; 0xff
 800b3c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3cc:	f7ff fab2 	bl	800a934 <vPortExitCritical>
}
 800b3d0:	bf00      	nop
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3e0:	f7ff fa78 	bl	800a8d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d102      	bne.n	800b3f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e001      	b.n	800b3f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3f6:	f7ff fa9d 	bl	800a934 <vPortExitCritical>

	return xReturn;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b40c:	f7ff fa62 	bl	800a8d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b418:	429a      	cmp	r2, r3
 800b41a:	d102      	bne.n	800b422 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b41c:	2301      	movs	r3, #1
 800b41e:	60fb      	str	r3, [r7, #12]
 800b420:	e001      	b.n	800b426 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b426:	f7ff fa85 	bl	800a934 <vPortExitCritical>

	return xReturn;
 800b42a:	68fb      	ldr	r3, [r7, #12]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3710      	adds	r7, #16
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
 800b43c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b43e:	2300      	movs	r3, #0
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	e014      	b.n	800b46e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b444:	4a0f      	ldr	r2, [pc, #60]	; (800b484 <vQueueAddToRegistry+0x50>)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d10b      	bne.n	800b468 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b450:	490c      	ldr	r1, [pc, #48]	; (800b484 <vQueueAddToRegistry+0x50>)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b45a:	4a0a      	ldr	r2, [pc, #40]	; (800b484 <vQueueAddToRegistry+0x50>)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	00db      	lsls	r3, r3, #3
 800b460:	4413      	add	r3, r2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b466:	e006      	b.n	800b476 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	3301      	adds	r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2b07      	cmp	r3, #7
 800b472:	d9e7      	bls.n	800b444 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b474:	bf00      	nop
 800b476:	bf00      	nop
 800b478:	3714      	adds	r7, #20
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	20004930 	.word	0x20004930

0800b488 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b498:	f7ff fa1c 	bl	800a8d4 <vPortEnterCritical>
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b4a2:	b25b      	sxtb	r3, r3
 800b4a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4a8:	d103      	bne.n	800b4b2 <vQueueWaitForMessageRestricted+0x2a>
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4b8:	b25b      	sxtb	r3, r3
 800b4ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4be:	d103      	bne.n	800b4c8 <vQueueWaitForMessageRestricted+0x40>
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4c8:	f7ff fa34 	bl	800a934 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d106      	bne.n	800b4e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	3324      	adds	r3, #36	; 0x24
 800b4d8:	687a      	ldr	r2, [r7, #4]
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f000 fc3b 	bl	800bd58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4e2:	6978      	ldr	r0, [r7, #20]
 800b4e4:	f7ff ff26 	bl	800b334 <prvUnlockQueue>
	}
 800b4e8:	bf00      	nop
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08e      	sub	sp, #56	; 0x38
 800b4f4:	af04      	add	r7, sp, #16
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
 800b4fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b500:	2b00      	cmp	r3, #0
 800b502:	d10a      	bne.n	800b51a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b508:	f383 8811 	msr	BASEPRI, r3
 800b50c:	f3bf 8f6f 	isb	sy
 800b510:	f3bf 8f4f 	dsb	sy
 800b514:	623b      	str	r3, [r7, #32]
}
 800b516:	bf00      	nop
 800b518:	e7fe      	b.n	800b518 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d10a      	bne.n	800b536 <xTaskCreateStatic+0x46>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	61fb      	str	r3, [r7, #28]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b536:	235c      	movs	r3, #92	; 0x5c
 800b538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b5c      	cmp	r3, #92	; 0x5c
 800b53e:	d00a      	beq.n	800b556 <xTaskCreateStatic+0x66>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	61bb      	str	r3, [r7, #24]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b556:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d01e      	beq.n	800b59c <xTaskCreateStatic+0xac>
 800b55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b560:	2b00      	cmp	r3, #0
 800b562:	d01b      	beq.n	800b59c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b566:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b56c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b570:	2202      	movs	r2, #2
 800b572:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b576:	2300      	movs	r3, #0
 800b578:	9303      	str	r3, [sp, #12]
 800b57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57c:	9302      	str	r3, [sp, #8]
 800b57e:	f107 0314 	add.w	r3, r7, #20
 800b582:	9301      	str	r3, [sp, #4]
 800b584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	68b9      	ldr	r1, [r7, #8]
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f000 f850 	bl	800b634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b596:	f000 f8dd 	bl	800b754 <prvAddNewTaskToReadyList>
 800b59a:	e001      	b.n	800b5a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b59c:	2300      	movs	r3, #0
 800b59e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5a0:	697b      	ldr	r3, [r7, #20]
	}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3728      	adds	r7, #40	; 0x28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b08c      	sub	sp, #48	; 0x30
 800b5ae:	af04      	add	r7, sp, #16
 800b5b0:	60f8      	str	r0, [r7, #12]
 800b5b2:	60b9      	str	r1, [r7, #8]
 800b5b4:	603b      	str	r3, [r7, #0]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7fe fdbe 	bl	800a140 <pvPortMalloc>
 800b5c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d00e      	beq.n	800b5ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5cc:	205c      	movs	r0, #92	; 0x5c
 800b5ce:	f7fe fdb7 	bl	800a140 <pvPortMalloc>
 800b5d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d003      	beq.n	800b5e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5da:	69fb      	ldr	r3, [r7, #28]
 800b5dc:	697a      	ldr	r2, [r7, #20]
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
 800b5e0:	e005      	b.n	800b5ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5e2:	6978      	ldr	r0, [r7, #20]
 800b5e4:	f7fe fe78 	bl	800a2d8 <vPortFree>
 800b5e8:	e001      	b.n	800b5ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5ee:	69fb      	ldr	r3, [r7, #28]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d017      	beq.n	800b624 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5fc:	88fa      	ldrh	r2, [r7, #6]
 800b5fe:	2300      	movs	r3, #0
 800b600:	9303      	str	r3, [sp, #12]
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	9302      	str	r3, [sp, #8]
 800b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b608:	9301      	str	r3, [sp, #4]
 800b60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	68b9      	ldr	r1, [r7, #8]
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 f80e 	bl	800b634 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b618:	69f8      	ldr	r0, [r7, #28]
 800b61a:	f000 f89b 	bl	800b754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b61e:	2301      	movs	r3, #1
 800b620:	61bb      	str	r3, [r7, #24]
 800b622:	e002      	b.n	800b62a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b624:	f04f 33ff 	mov.w	r3, #4294967295
 800b628:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b62a:	69bb      	ldr	r3, [r7, #24]
	}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3720      	adds	r7, #32
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
 800b640:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	461a      	mov	r2, r3
 800b64c:	21a5      	movs	r1, #165	; 0xa5
 800b64e:	f003 feb7 	bl	800f3c0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b65c:	3b01      	subs	r3, #1
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	4413      	add	r3, r2
 800b662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	f023 0307 	bic.w	r3, r3, #7
 800b66a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b66c:	69bb      	ldr	r3, [r7, #24]
 800b66e:	f003 0307 	and.w	r3, r3, #7
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00a      	beq.n	800b68c <prvInitialiseNewTask+0x58>
	__asm volatile
 800b676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67a:	f383 8811 	msr	BASEPRI, r3
 800b67e:	f3bf 8f6f 	isb	sy
 800b682:	f3bf 8f4f 	dsb	sy
 800b686:	617b      	str	r3, [r7, #20]
}
 800b688:	bf00      	nop
 800b68a:	e7fe      	b.n	800b68a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d01f      	beq.n	800b6d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b692:	2300      	movs	r3, #0
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	e012      	b.n	800b6be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b698:	68ba      	ldr	r2, [r7, #8]
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	4413      	add	r3, r2
 800b69e:	7819      	ldrb	r1, [r3, #0]
 800b6a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	3334      	adds	r3, #52	; 0x34
 800b6a8:	460a      	mov	r2, r1
 800b6aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d006      	beq.n	800b6c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	61fb      	str	r3, [r7, #28]
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	2b0f      	cmp	r3, #15
 800b6c2:	d9e9      	bls.n	800b698 <prvInitialiseNewTask+0x64>
 800b6c4:	e000      	b.n	800b6c8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b6c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6d0:	e003      	b.n	800b6da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6dc:	2b37      	cmp	r3, #55	; 0x37
 800b6de:	d901      	bls.n	800b6e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6e0:	2337      	movs	r3, #55	; 0x37
 800b6e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe ff2a 	bl	800a554 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b702:	3318      	adds	r3, #24
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe ff25 	bl	800a554 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b70e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b718:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b722:	2200      	movs	r2, #0
 800b724:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b72e:	683a      	ldr	r2, [r7, #0]
 800b730:	68f9      	ldr	r1, [r7, #12]
 800b732:	69b8      	ldr	r0, [r7, #24]
 800b734:	f7fe ffa2 	bl	800a67c <pxPortInitialiseStack>
 800b738:	4602      	mov	r2, r0
 800b73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b74a:	bf00      	nop
 800b74c:	3720      	adds	r7, #32
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b75c:	f7ff f8ba 	bl	800a8d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b760:	4b2d      	ldr	r3, [pc, #180]	; (800b818 <prvAddNewTaskToReadyList+0xc4>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	3301      	adds	r3, #1
 800b766:	4a2c      	ldr	r2, [pc, #176]	; (800b818 <prvAddNewTaskToReadyList+0xc4>)
 800b768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b76a:	4b2c      	ldr	r3, [pc, #176]	; (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d109      	bne.n	800b786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b772:	4a2a      	ldr	r2, [pc, #168]	; (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b778:	4b27      	ldr	r3, [pc, #156]	; (800b818 <prvAddNewTaskToReadyList+0xc4>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d110      	bne.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b780:	f000 fc16 	bl	800bfb0 <prvInitialiseTaskLists>
 800b784:	e00d      	b.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b786:	4b26      	ldr	r3, [pc, #152]	; (800b820 <prvAddNewTaskToReadyList+0xcc>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d109      	bne.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b78e:	4b23      	ldr	r3, [pc, #140]	; (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b798:	429a      	cmp	r2, r3
 800b79a:	d802      	bhi.n	800b7a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b79c:	4a1f      	ldr	r2, [pc, #124]	; (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7a2:	4b20      	ldr	r3, [pc, #128]	; (800b824 <prvAddNewTaskToReadyList+0xd0>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	4a1e      	ldr	r2, [pc, #120]	; (800b824 <prvAddNewTaskToReadyList+0xd0>)
 800b7aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7ac:	4b1d      	ldr	r3, [pc, #116]	; (800b824 <prvAddNewTaskToReadyList+0xd0>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b8:	4b1b      	ldr	r3, [pc, #108]	; (800b828 <prvAddNewTaskToReadyList+0xd4>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d903      	bls.n	800b7c8 <prvAddNewTaskToReadyList+0x74>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c4:	4a18      	ldr	r2, [pc, #96]	; (800b828 <prvAddNewTaskToReadyList+0xd4>)
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	4413      	add	r3, r2
 800b7d2:	009b      	lsls	r3, r3, #2
 800b7d4:	4a15      	ldr	r2, [pc, #84]	; (800b82c <prvAddNewTaskToReadyList+0xd8>)
 800b7d6:	441a      	add	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	3304      	adds	r3, #4
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	f7fe fec5 	bl	800a56e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7e4:	f7ff f8a6 	bl	800a934 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7e8:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <prvAddNewTaskToReadyList+0xcc>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00e      	beq.n	800b80e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7f0:	4b0a      	ldr	r3, [pc, #40]	; (800b81c <prvAddNewTaskToReadyList+0xc8>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d207      	bcs.n	800b80e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	; (800b830 <prvAddNewTaskToReadyList+0xdc>)
 800b800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b804:	601a      	str	r2, [r3, #0]
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b80e:	bf00      	nop
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20004e44 	.word	0x20004e44
 800b81c:	20004970 	.word	0x20004970
 800b820:	20004e50 	.word	0x20004e50
 800b824:	20004e60 	.word	0x20004e60
 800b828:	20004e4c 	.word	0x20004e4c
 800b82c:	20004974 	.word	0x20004974
 800b830:	e000ed04 	.word	0xe000ed04

0800b834 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b83c:	2300      	movs	r3, #0
 800b83e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d017      	beq.n	800b876 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b846:	4b13      	ldr	r3, [pc, #76]	; (800b894 <vTaskDelay+0x60>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d00a      	beq.n	800b864 <vTaskDelay+0x30>
	__asm volatile
 800b84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b852:	f383 8811 	msr	BASEPRI, r3
 800b856:	f3bf 8f6f 	isb	sy
 800b85a:	f3bf 8f4f 	dsb	sy
 800b85e:	60bb      	str	r3, [r7, #8]
}
 800b860:	bf00      	nop
 800b862:	e7fe      	b.n	800b862 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b864:	f000 f880 	bl	800b968 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b868:	2100      	movs	r1, #0
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fcea 	bl	800c244 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b870:	f000 f888 	bl	800b984 <xTaskResumeAll>
 800b874:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d107      	bne.n	800b88c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b87c:	4b06      	ldr	r3, [pc, #24]	; (800b898 <vTaskDelay+0x64>)
 800b87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b882:	601a      	str	r2, [r3, #0]
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b88c:	bf00      	nop
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	20004e6c 	.word	0x20004e6c
 800b898:	e000ed04 	.word	0xe000ed04

0800b89c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b08a      	sub	sp, #40	; 0x28
 800b8a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8aa:	463a      	mov	r2, r7
 800b8ac:	1d39      	adds	r1, r7, #4
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fe fc10 	bl	800a0d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8b8:	6839      	ldr	r1, [r7, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68ba      	ldr	r2, [r7, #8]
 800b8be:	9202      	str	r2, [sp, #8]
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	9300      	str	r3, [sp, #0]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	460a      	mov	r2, r1
 800b8ca:	4921      	ldr	r1, [pc, #132]	; (800b950 <vTaskStartScheduler+0xb4>)
 800b8cc:	4821      	ldr	r0, [pc, #132]	; (800b954 <vTaskStartScheduler+0xb8>)
 800b8ce:	f7ff fe0f 	bl	800b4f0 <xTaskCreateStatic>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	4a20      	ldr	r2, [pc, #128]	; (800b958 <vTaskStartScheduler+0xbc>)
 800b8d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8d8:	4b1f      	ldr	r3, [pc, #124]	; (800b958 <vTaskStartScheduler+0xbc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d002      	beq.n	800b8e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8e0:	2301      	movs	r3, #1
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	e001      	b.n	800b8ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d102      	bne.n	800b8f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8f0:	f000 fcfc 	bl	800c2ec <xTimerCreateTimerTask>
 800b8f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d116      	bne.n	800b92a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b900:	f383 8811 	msr	BASEPRI, r3
 800b904:	f3bf 8f6f 	isb	sy
 800b908:	f3bf 8f4f 	dsb	sy
 800b90c:	613b      	str	r3, [r7, #16]
}
 800b90e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b910:	4b12      	ldr	r3, [pc, #72]	; (800b95c <vTaskStartScheduler+0xc0>)
 800b912:	f04f 32ff 	mov.w	r2, #4294967295
 800b916:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b918:	4b11      	ldr	r3, [pc, #68]	; (800b960 <vTaskStartScheduler+0xc4>)
 800b91a:	2201      	movs	r2, #1
 800b91c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b91e:	4b11      	ldr	r3, [pc, #68]	; (800b964 <vTaskStartScheduler+0xc8>)
 800b920:	2200      	movs	r2, #0
 800b922:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b924:	f7fe ff34 	bl	800a790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b928:	e00e      	b.n	800b948 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b930:	d10a      	bne.n	800b948 <vTaskStartScheduler+0xac>
	__asm volatile
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	60fb      	str	r3, [r7, #12]
}
 800b944:	bf00      	nop
 800b946:	e7fe      	b.n	800b946 <vTaskStartScheduler+0xaa>
}
 800b948:	bf00      	nop
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	08013d14 	.word	0x08013d14
 800b954:	0800bf81 	.word	0x0800bf81
 800b958:	20004e68 	.word	0x20004e68
 800b95c:	20004e64 	.word	0x20004e64
 800b960:	20004e50 	.word	0x20004e50
 800b964:	20004e48 	.word	0x20004e48

0800b968 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b96c:	4b04      	ldr	r3, [pc, #16]	; (800b980 <vTaskSuspendAll+0x18>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	3301      	adds	r3, #1
 800b972:	4a03      	ldr	r2, [pc, #12]	; (800b980 <vTaskSuspendAll+0x18>)
 800b974:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b976:	bf00      	nop
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	20004e6c 	.word	0x20004e6c

0800b984 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b98a:	2300      	movs	r3, #0
 800b98c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b98e:	2300      	movs	r3, #0
 800b990:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b992:	4b42      	ldr	r3, [pc, #264]	; (800ba9c <xTaskResumeAll+0x118>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10a      	bne.n	800b9b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	603b      	str	r3, [r7, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	e7fe      	b.n	800b9ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9b0:	f7fe ff90 	bl	800a8d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9b4:	4b39      	ldr	r3, [pc, #228]	; (800ba9c <xTaskResumeAll+0x118>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	4a38      	ldr	r2, [pc, #224]	; (800ba9c <xTaskResumeAll+0x118>)
 800b9bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9be:	4b37      	ldr	r3, [pc, #220]	; (800ba9c <xTaskResumeAll+0x118>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d162      	bne.n	800ba8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9c6:	4b36      	ldr	r3, [pc, #216]	; (800baa0 <xTaskResumeAll+0x11c>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d05e      	beq.n	800ba8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9ce:	e02f      	b.n	800ba30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d0:	4b34      	ldr	r3, [pc, #208]	; (800baa4 <xTaskResumeAll+0x120>)
 800b9d2:	68db      	ldr	r3, [r3, #12]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	3318      	adds	r3, #24
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe fe23 	bl	800a628 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	3304      	adds	r3, #4
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fe fe1e 	bl	800a628 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9f0:	4b2d      	ldr	r3, [pc, #180]	; (800baa8 <xTaskResumeAll+0x124>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d903      	bls.n	800ba00 <xTaskResumeAll+0x7c>
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fc:	4a2a      	ldr	r2, [pc, #168]	; (800baa8 <xTaskResumeAll+0x124>)
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba04:	4613      	mov	r3, r2
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	009b      	lsls	r3, r3, #2
 800ba0c:	4a27      	ldr	r2, [pc, #156]	; (800baac <xTaskResumeAll+0x128>)
 800ba0e:	441a      	add	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	3304      	adds	r3, #4
 800ba14:	4619      	mov	r1, r3
 800ba16:	4610      	mov	r0, r2
 800ba18:	f7fe fda9 	bl	800a56e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba20:	4b23      	ldr	r3, [pc, #140]	; (800bab0 <xTaskResumeAll+0x12c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d302      	bcc.n	800ba30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba2a:	4b22      	ldr	r3, [pc, #136]	; (800bab4 <xTaskResumeAll+0x130>)
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba30:	4b1c      	ldr	r3, [pc, #112]	; (800baa4 <xTaskResumeAll+0x120>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d1cb      	bne.n	800b9d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba3e:	f000 fb55 	bl	800c0ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba42:	4b1d      	ldr	r3, [pc, #116]	; (800bab8 <xTaskResumeAll+0x134>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d010      	beq.n	800ba70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba4e:	f000 f847 	bl	800bae0 <xTaskIncrementTick>
 800ba52:	4603      	mov	r3, r0
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d002      	beq.n	800ba5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ba58:	4b16      	ldr	r3, [pc, #88]	; (800bab4 <xTaskResumeAll+0x130>)
 800ba5a:	2201      	movs	r2, #1
 800ba5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	3b01      	subs	r3, #1
 800ba62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f1      	bne.n	800ba4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ba6a:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <xTaskResumeAll+0x134>)
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba70:	4b10      	ldr	r3, [pc, #64]	; (800bab4 <xTaskResumeAll+0x130>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba7c:	4b0f      	ldr	r3, [pc, #60]	; (800babc <xTaskResumeAll+0x138>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba8c:	f7fe ff52 	bl	800a934 <vPortExitCritical>

	return xAlreadyYielded;
 800ba90:	68bb      	ldr	r3, [r7, #8]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20004e6c 	.word	0x20004e6c
 800baa0:	20004e44 	.word	0x20004e44
 800baa4:	20004e04 	.word	0x20004e04
 800baa8:	20004e4c 	.word	0x20004e4c
 800baac:	20004974 	.word	0x20004974
 800bab0:	20004970 	.word	0x20004970
 800bab4:	20004e58 	.word	0x20004e58
 800bab8:	20004e54 	.word	0x20004e54
 800babc:	e000ed04 	.word	0xe000ed04

0800bac0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bac6:	4b05      	ldr	r3, [pc, #20]	; (800badc <xTaskGetTickCount+0x1c>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bacc:	687b      	ldr	r3, [r7, #4]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	370c      	adds	r7, #12
 800bad2:	46bd      	mov	sp, r7
 800bad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop
 800badc:	20004e48 	.word	0x20004e48

0800bae0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baea:	4b4f      	ldr	r3, [pc, #316]	; (800bc28 <xTaskIncrementTick+0x148>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f040 808f 	bne.w	800bc12 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800baf4:	4b4d      	ldr	r3, [pc, #308]	; (800bc2c <xTaskIncrementTick+0x14c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	3301      	adds	r3, #1
 800bafa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bafc:	4a4b      	ldr	r2, [pc, #300]	; (800bc2c <xTaskIncrementTick+0x14c>)
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d120      	bne.n	800bb4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb08:	4b49      	ldr	r3, [pc, #292]	; (800bc30 <xTaskIncrementTick+0x150>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00a      	beq.n	800bb28 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	603b      	str	r3, [r7, #0]
}
 800bb24:	bf00      	nop
 800bb26:	e7fe      	b.n	800bb26 <xTaskIncrementTick+0x46>
 800bb28:	4b41      	ldr	r3, [pc, #260]	; (800bc30 <xTaskIncrementTick+0x150>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	4b41      	ldr	r3, [pc, #260]	; (800bc34 <xTaskIncrementTick+0x154>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a3f      	ldr	r2, [pc, #252]	; (800bc30 <xTaskIncrementTick+0x150>)
 800bb34:	6013      	str	r3, [r2, #0]
 800bb36:	4a3f      	ldr	r2, [pc, #252]	; (800bc34 <xTaskIncrementTick+0x154>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	4b3e      	ldr	r3, [pc, #248]	; (800bc38 <xTaskIncrementTick+0x158>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	3301      	adds	r3, #1
 800bb42:	4a3d      	ldr	r2, [pc, #244]	; (800bc38 <xTaskIncrementTick+0x158>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	f000 fad1 	bl	800c0ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb4a:	4b3c      	ldr	r3, [pc, #240]	; (800bc3c <xTaskIncrementTick+0x15c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	693a      	ldr	r2, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d349      	bcc.n	800bbe8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb54:	4b36      	ldr	r3, [pc, #216]	; (800bc30 <xTaskIncrementTick+0x150>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d104      	bne.n	800bb68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb5e:	4b37      	ldr	r3, [pc, #220]	; (800bc3c <xTaskIncrementTick+0x15c>)
 800bb60:	f04f 32ff 	mov.w	r2, #4294967295
 800bb64:	601a      	str	r2, [r3, #0]
					break;
 800bb66:	e03f      	b.n	800bbe8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb68:	4b31      	ldr	r3, [pc, #196]	; (800bc30 <xTaskIncrementTick+0x150>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb78:	693a      	ldr	r2, [r7, #16]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d203      	bcs.n	800bb88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb80:	4a2e      	ldr	r2, [pc, #184]	; (800bc3c <xTaskIncrementTick+0x15c>)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bb86:	e02f      	b.n	800bbe8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	3304      	adds	r3, #4
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f7fe fd4b 	bl	800a628 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d004      	beq.n	800bba4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fd42 	bl	800a628 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba8:	4b25      	ldr	r3, [pc, #148]	; (800bc40 <xTaskIncrementTick+0x160>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d903      	bls.n	800bbb8 <xTaskIncrementTick+0xd8>
 800bbb0:	68bb      	ldr	r3, [r7, #8]
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	4a22      	ldr	r2, [pc, #136]	; (800bc40 <xTaskIncrementTick+0x160>)
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	009b      	lsls	r3, r3, #2
 800bbc0:	4413      	add	r3, r2
 800bbc2:	009b      	lsls	r3, r3, #2
 800bbc4:	4a1f      	ldr	r2, [pc, #124]	; (800bc44 <xTaskIncrementTick+0x164>)
 800bbc6:	441a      	add	r2, r3
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	3304      	adds	r3, #4
 800bbcc:	4619      	mov	r1, r3
 800bbce:	4610      	mov	r0, r2
 800bbd0:	f7fe fccd 	bl	800a56e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4b1b      	ldr	r3, [pc, #108]	; (800bc48 <xTaskIncrementTick+0x168>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d3b8      	bcc.n	800bb54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bbe2:	2301      	movs	r3, #1
 800bbe4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe6:	e7b5      	b.n	800bb54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bbe8:	4b17      	ldr	r3, [pc, #92]	; (800bc48 <xTaskIncrementTick+0x168>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbee:	4915      	ldr	r1, [pc, #84]	; (800bc44 <xTaskIncrementTick+0x164>)
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	440b      	add	r3, r1
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d901      	bls.n	800bc04 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc00:	2301      	movs	r3, #1
 800bc02:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc04:	4b11      	ldr	r3, [pc, #68]	; (800bc4c <xTaskIncrementTick+0x16c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d007      	beq.n	800bc1c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	617b      	str	r3, [r7, #20]
 800bc10:	e004      	b.n	800bc1c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc12:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <xTaskIncrementTick+0x170>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	3301      	adds	r3, #1
 800bc18:	4a0d      	ldr	r2, [pc, #52]	; (800bc50 <xTaskIncrementTick+0x170>)
 800bc1a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc1c:	697b      	ldr	r3, [r7, #20]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3718      	adds	r7, #24
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20004e6c 	.word	0x20004e6c
 800bc2c:	20004e48 	.word	0x20004e48
 800bc30:	20004dfc 	.word	0x20004dfc
 800bc34:	20004e00 	.word	0x20004e00
 800bc38:	20004e5c 	.word	0x20004e5c
 800bc3c:	20004e64 	.word	0x20004e64
 800bc40:	20004e4c 	.word	0x20004e4c
 800bc44:	20004974 	.word	0x20004974
 800bc48:	20004970 	.word	0x20004970
 800bc4c:	20004e58 	.word	0x20004e58
 800bc50:	20004e54 	.word	0x20004e54

0800bc54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc5a:	4b28      	ldr	r3, [pc, #160]	; (800bcfc <vTaskSwitchContext+0xa8>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d003      	beq.n	800bc6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc62:	4b27      	ldr	r3, [pc, #156]	; (800bd00 <vTaskSwitchContext+0xac>)
 800bc64:	2201      	movs	r2, #1
 800bc66:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc68:	e041      	b.n	800bcee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bc6a:	4b25      	ldr	r3, [pc, #148]	; (800bd00 <vTaskSwitchContext+0xac>)
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc70:	4b24      	ldr	r3, [pc, #144]	; (800bd04 <vTaskSwitchContext+0xb0>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	60fb      	str	r3, [r7, #12]
 800bc76:	e010      	b.n	800bc9a <vTaskSwitchContext+0x46>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10a      	bne.n	800bc94 <vTaskSwitchContext+0x40>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <vTaskSwitchContext+0x3e>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	60fb      	str	r3, [r7, #12]
 800bc9a:	491b      	ldr	r1, [pc, #108]	; (800bd08 <vTaskSwitchContext+0xb4>)
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d0e4      	beq.n	800bc78 <vTaskSwitchContext+0x24>
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4a13      	ldr	r2, [pc, #76]	; (800bd08 <vTaskSwitchContext+0xb4>)
 800bcba:	4413      	add	r3, r2
 800bcbc:	60bb      	str	r3, [r7, #8]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	605a      	str	r2, [r3, #4]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	3308      	adds	r3, #8
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d104      	bne.n	800bcde <vTaskSwitchContext+0x8a>
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	685a      	ldr	r2, [r3, #4]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	605a      	str	r2, [r3, #4]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	4a09      	ldr	r2, [pc, #36]	; (800bd0c <vTaskSwitchContext+0xb8>)
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	4a06      	ldr	r2, [pc, #24]	; (800bd04 <vTaskSwitchContext+0xb0>)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6013      	str	r3, [r2, #0]
}
 800bcee:	bf00      	nop
 800bcf0:	3714      	adds	r7, #20
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20004e6c 	.word	0x20004e6c
 800bd00:	20004e58 	.word	0x20004e58
 800bd04:	20004e4c 	.word	0x20004e4c
 800bd08:	20004974 	.word	0x20004974
 800bd0c:	20004970 	.word	0x20004970

0800bd10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d10a      	bne.n	800bd36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd24:	f383 8811 	msr	BASEPRI, r3
 800bd28:	f3bf 8f6f 	isb	sy
 800bd2c:	f3bf 8f4f 	dsb	sy
 800bd30:	60fb      	str	r3, [r7, #12]
}
 800bd32:	bf00      	nop
 800bd34:	e7fe      	b.n	800bd34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd36:	4b07      	ldr	r3, [pc, #28]	; (800bd54 <vTaskPlaceOnEventList+0x44>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	3318      	adds	r3, #24
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7fe fc39 	bl	800a5b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd44:	2101      	movs	r1, #1
 800bd46:	6838      	ldr	r0, [r7, #0]
 800bd48:	f000 fa7c 	bl	800c244 <prvAddCurrentTaskToDelayedList>
}
 800bd4c:	bf00      	nop
 800bd4e:	3710      	adds	r7, #16
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}
 800bd54:	20004970 	.word	0x20004970

0800bd58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	60f8      	str	r0, [r7, #12]
 800bd60:	60b9      	str	r1, [r7, #8]
 800bd62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	617b      	str	r3, [r7, #20]
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd80:	4b0a      	ldr	r3, [pc, #40]	; (800bdac <vTaskPlaceOnEventListRestricted+0x54>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	3318      	adds	r3, #24
 800bd86:	4619      	mov	r1, r3
 800bd88:	68f8      	ldr	r0, [r7, #12]
 800bd8a:	f7fe fbf0 	bl	800a56e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d002      	beq.n	800bd9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bd94:	f04f 33ff 	mov.w	r3, #4294967295
 800bd98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	68b8      	ldr	r0, [r7, #8]
 800bd9e:	f000 fa51 	bl	800c244 <prvAddCurrentTaskToDelayedList>
	}
 800bda2:	bf00      	nop
 800bda4:	3718      	adds	r7, #24
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20004970 	.word	0x20004970

0800bdb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d10a      	bne.n	800bddc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bdc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdca:	f383 8811 	msr	BASEPRI, r3
 800bdce:	f3bf 8f6f 	isb	sy
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	60fb      	str	r3, [r7, #12]
}
 800bdd8:	bf00      	nop
 800bdda:	e7fe      	b.n	800bdda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	3318      	adds	r3, #24
 800bde0:	4618      	mov	r0, r3
 800bde2:	f7fe fc21 	bl	800a628 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bde6:	4b1e      	ldr	r3, [pc, #120]	; (800be60 <xTaskRemoveFromEventList+0xb0>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d11d      	bne.n	800be2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fe fc18 	bl	800a628 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfc:	4b19      	ldr	r3, [pc, #100]	; (800be64 <xTaskRemoveFromEventList+0xb4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	429a      	cmp	r2, r3
 800be02:	d903      	bls.n	800be0c <xTaskRemoveFromEventList+0x5c>
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be08:	4a16      	ldr	r2, [pc, #88]	; (800be64 <xTaskRemoveFromEventList+0xb4>)
 800be0a:	6013      	str	r3, [r2, #0]
 800be0c:	693b      	ldr	r3, [r7, #16]
 800be0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be10:	4613      	mov	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	4413      	add	r3, r2
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4a13      	ldr	r2, [pc, #76]	; (800be68 <xTaskRemoveFromEventList+0xb8>)
 800be1a:	441a      	add	r2, r3
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	3304      	adds	r3, #4
 800be20:	4619      	mov	r1, r3
 800be22:	4610      	mov	r0, r2
 800be24:	f7fe fba3 	bl	800a56e <vListInsertEnd>
 800be28:	e005      	b.n	800be36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	3318      	adds	r3, #24
 800be2e:	4619      	mov	r1, r3
 800be30:	480e      	ldr	r0, [pc, #56]	; (800be6c <xTaskRemoveFromEventList+0xbc>)
 800be32:	f7fe fb9c 	bl	800a56e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	4b0d      	ldr	r3, [pc, #52]	; (800be70 <xTaskRemoveFromEventList+0xc0>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be40:	429a      	cmp	r2, r3
 800be42:	d905      	bls.n	800be50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be48:	4b0a      	ldr	r3, [pc, #40]	; (800be74 <xTaskRemoveFromEventList+0xc4>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	601a      	str	r2, [r3, #0]
 800be4e:	e001      	b.n	800be54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800be50:	2300      	movs	r3, #0
 800be52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be54:	697b      	ldr	r3, [r7, #20]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20004e6c 	.word	0x20004e6c
 800be64:	20004e4c 	.word	0x20004e4c
 800be68:	20004974 	.word	0x20004974
 800be6c:	20004e04 	.word	0x20004e04
 800be70:	20004970 	.word	0x20004970
 800be74:	20004e58 	.word	0x20004e58

0800be78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800be80:	4b06      	ldr	r3, [pc, #24]	; (800be9c <vTaskInternalSetTimeOutState+0x24>)
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800be88:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <vTaskInternalSetTimeOutState+0x28>)
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	605a      	str	r2, [r3, #4]
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	20004e5c 	.word	0x20004e5c
 800bea0:	20004e48 	.word	0x20004e48

0800bea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b088      	sub	sp, #32
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d10a      	bne.n	800beca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	613b      	str	r3, [r7, #16]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10a      	bne.n	800bee6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	60fb      	str	r3, [r7, #12]
}
 800bee2:	bf00      	nop
 800bee4:	e7fe      	b.n	800bee4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bee6:	f7fe fcf5 	bl	800a8d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800beea:	4b1d      	ldr	r3, [pc, #116]	; (800bf60 <xTaskCheckForTimeOut+0xbc>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	69ba      	ldr	r2, [r7, #24]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d102      	bne.n	800bf0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61fb      	str	r3, [r7, #28]
 800bf08:	e023      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	4b15      	ldr	r3, [pc, #84]	; (800bf64 <xTaskCheckForTimeOut+0xc0>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d007      	beq.n	800bf26 <xTaskCheckForTimeOut+0x82>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	69ba      	ldr	r2, [r7, #24]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d302      	bcc.n	800bf26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	61fb      	str	r3, [r7, #28]
 800bf24:	e015      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	697a      	ldr	r2, [r7, #20]
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	d20b      	bcs.n	800bf48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	1ad2      	subs	r2, r2, r3
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff ff9b 	bl	800be78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bf42:	2300      	movs	r3, #0
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	e004      	b.n	800bf52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bf52:	f7fe fcef 	bl	800a934 <vPortExitCritical>

	return xReturn;
 800bf56:	69fb      	ldr	r3, [r7, #28]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3720      	adds	r7, #32
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}
 800bf60:	20004e48 	.word	0x20004e48
 800bf64:	20004e5c 	.word	0x20004e5c

0800bf68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bf6c:	4b03      	ldr	r3, [pc, #12]	; (800bf7c <vTaskMissedYield+0x14>)
 800bf6e:	2201      	movs	r2, #1
 800bf70:	601a      	str	r2, [r3, #0]
}
 800bf72:	bf00      	nop
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr
 800bf7c:	20004e58 	.word	0x20004e58

0800bf80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b082      	sub	sp, #8
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf88:	f000 f852 	bl	800c030 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf8c:	4b06      	ldr	r3, [pc, #24]	; (800bfa8 <prvIdleTask+0x28>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d9f9      	bls.n	800bf88 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf94:	4b05      	ldr	r3, [pc, #20]	; (800bfac <prvIdleTask+0x2c>)
 800bf96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bfa4:	e7f0      	b.n	800bf88 <prvIdleTask+0x8>
 800bfa6:	bf00      	nop
 800bfa8:	20004974 	.word	0x20004974
 800bfac:	e000ed04 	.word	0xe000ed04

0800bfb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
 800bfba:	e00c      	b.n	800bfd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	4413      	add	r3, r2
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	4a12      	ldr	r2, [pc, #72]	; (800c010 <prvInitialiseTaskLists+0x60>)
 800bfc8:	4413      	add	r3, r2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe faa2 	bl	800a514 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	607b      	str	r3, [r7, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b37      	cmp	r3, #55	; 0x37
 800bfda:	d9ef      	bls.n	800bfbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bfdc:	480d      	ldr	r0, [pc, #52]	; (800c014 <prvInitialiseTaskLists+0x64>)
 800bfde:	f7fe fa99 	bl	800a514 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bfe2:	480d      	ldr	r0, [pc, #52]	; (800c018 <prvInitialiseTaskLists+0x68>)
 800bfe4:	f7fe fa96 	bl	800a514 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bfe8:	480c      	ldr	r0, [pc, #48]	; (800c01c <prvInitialiseTaskLists+0x6c>)
 800bfea:	f7fe fa93 	bl	800a514 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bfee:	480c      	ldr	r0, [pc, #48]	; (800c020 <prvInitialiseTaskLists+0x70>)
 800bff0:	f7fe fa90 	bl	800a514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bff4:	480b      	ldr	r0, [pc, #44]	; (800c024 <prvInitialiseTaskLists+0x74>)
 800bff6:	f7fe fa8d 	bl	800a514 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bffa:	4b0b      	ldr	r3, [pc, #44]	; (800c028 <prvInitialiseTaskLists+0x78>)
 800bffc:	4a05      	ldr	r2, [pc, #20]	; (800c014 <prvInitialiseTaskLists+0x64>)
 800bffe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c000:	4b0a      	ldr	r3, [pc, #40]	; (800c02c <prvInitialiseTaskLists+0x7c>)
 800c002:	4a05      	ldr	r2, [pc, #20]	; (800c018 <prvInitialiseTaskLists+0x68>)
 800c004:	601a      	str	r2, [r3, #0]
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	20004974 	.word	0x20004974
 800c014:	20004dd4 	.word	0x20004dd4
 800c018:	20004de8 	.word	0x20004de8
 800c01c:	20004e04 	.word	0x20004e04
 800c020:	20004e18 	.word	0x20004e18
 800c024:	20004e30 	.word	0x20004e30
 800c028:	20004dfc 	.word	0x20004dfc
 800c02c:	20004e00 	.word	0x20004e00

0800c030 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b082      	sub	sp, #8
 800c034:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c036:	e019      	b.n	800c06c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c038:	f7fe fc4c 	bl	800a8d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c03c:	4b10      	ldr	r3, [pc, #64]	; (800c080 <prvCheckTasksWaitingTermination+0x50>)
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	3304      	adds	r3, #4
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe faed 	bl	800a628 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c04e:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <prvCheckTasksWaitingTermination+0x54>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	3b01      	subs	r3, #1
 800c054:	4a0b      	ldr	r2, [pc, #44]	; (800c084 <prvCheckTasksWaitingTermination+0x54>)
 800c056:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c058:	4b0b      	ldr	r3, [pc, #44]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	4a0a      	ldr	r2, [pc, #40]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c060:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c062:	f7fe fc67 	bl	800a934 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 f810 	bl	800c08c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c06c:	4b06      	ldr	r3, [pc, #24]	; (800c088 <prvCheckTasksWaitingTermination+0x58>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e1      	bne.n	800c038 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c074:	bf00      	nop
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20004e18 	.word	0x20004e18
 800c084:	20004e44 	.word	0x20004e44
 800c088:	20004e2c 	.word	0x20004e2c

0800c08c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d108      	bne.n	800c0b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe f918 	bl	800a2d8 <vPortFree>
				vPortFree( pxTCB );
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7fe f915 	bl	800a2d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c0ae:	e018      	b.n	800c0e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d103      	bne.n	800c0c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7fe f90c 	bl	800a2d8 <vPortFree>
	}
 800c0c0:	e00f      	b.n	800c0e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c0c8:	2b02      	cmp	r3, #2
 800c0ca:	d00a      	beq.n	800c0e2 <prvDeleteTCB+0x56>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	60fb      	str	r3, [r7, #12]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <prvDeleteTCB+0x54>
	}
 800c0e2:	bf00      	nop
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c0f2:	4b0c      	ldr	r3, [pc, #48]	; (800c124 <prvResetNextTaskUnblockTime+0x38>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d104      	bne.n	800c106 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c0fc:	4b0a      	ldr	r3, [pc, #40]	; (800c128 <prvResetNextTaskUnblockTime+0x3c>)
 800c0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c102:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c104:	e008      	b.n	800c118 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c106:	4b07      	ldr	r3, [pc, #28]	; (800c124 <prvResetNextTaskUnblockTime+0x38>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	68db      	ldr	r3, [r3, #12]
 800c10e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	4a04      	ldr	r2, [pc, #16]	; (800c128 <prvResetNextTaskUnblockTime+0x3c>)
 800c116:	6013      	str	r3, [r2, #0]
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr
 800c124:	20004dfc 	.word	0x20004dfc
 800c128:	20004e64 	.word	0x20004e64

0800c12c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c12c:	b480      	push	{r7}
 800c12e:	b083      	sub	sp, #12
 800c130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c132:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <xTaskGetSchedulerState+0x34>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c13a:	2301      	movs	r3, #1
 800c13c:	607b      	str	r3, [r7, #4]
 800c13e:	e008      	b.n	800c152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c140:	4b08      	ldr	r3, [pc, #32]	; (800c164 <xTaskGetSchedulerState+0x38>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d102      	bne.n	800c14e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c148:	2302      	movs	r3, #2
 800c14a:	607b      	str	r3, [r7, #4]
 800c14c:	e001      	b.n	800c152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c14e:	2300      	movs	r3, #0
 800c150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c152:	687b      	ldr	r3, [r7, #4]
	}
 800c154:	4618      	mov	r0, r3
 800c156:	370c      	adds	r7, #12
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	20004e50 	.word	0x20004e50
 800c164:	20004e6c 	.word	0x20004e6c

0800c168 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c174:	2300      	movs	r3, #0
 800c176:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d056      	beq.n	800c22c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c17e:	4b2e      	ldr	r3, [pc, #184]	; (800c238 <xTaskPriorityDisinherit+0xd0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	429a      	cmp	r2, r3
 800c186:	d00a      	beq.n	800c19e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	f383 8811 	msr	BASEPRI, r3
 800c190:	f3bf 8f6f 	isb	sy
 800c194:	f3bf 8f4f 	dsb	sy
 800c198:	60fb      	str	r3, [r7, #12]
}
 800c19a:	bf00      	nop
 800c19c:	e7fe      	b.n	800c19c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d10a      	bne.n	800c1bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1aa:	f383 8811 	msr	BASEPRI, r3
 800c1ae:	f3bf 8f6f 	isb	sy
 800c1b2:	f3bf 8f4f 	dsb	sy
 800c1b6:	60bb      	str	r3, [r7, #8]
}
 800c1b8:	bf00      	nop
 800c1ba:	e7fe      	b.n	800c1ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1c0:	1e5a      	subs	r2, r3, #1
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ce:	429a      	cmp	r2, r3
 800c1d0:	d02c      	beq.n	800c22c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d128      	bne.n	800c22c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7fe fa22 	bl	800a628 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fc:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <xTaskPriorityDisinherit+0xd4>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d903      	bls.n	800c20c <xTaskPriorityDisinherit+0xa4>
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c208:	4a0c      	ldr	r2, [pc, #48]	; (800c23c <xTaskPriorityDisinherit+0xd4>)
 800c20a:	6013      	str	r3, [r2, #0]
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4a09      	ldr	r2, [pc, #36]	; (800c240 <xTaskPriorityDisinherit+0xd8>)
 800c21a:	441a      	add	r2, r3
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	3304      	adds	r3, #4
 800c220:	4619      	mov	r1, r3
 800c222:	4610      	mov	r0, r2
 800c224:	f7fe f9a3 	bl	800a56e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c228:	2301      	movs	r3, #1
 800c22a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c22c:	697b      	ldr	r3, [r7, #20]
	}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20004970 	.word	0x20004970
 800c23c:	20004e4c 	.word	0x20004e4c
 800c240:	20004974 	.word	0x20004974

0800c244 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c24e:	4b21      	ldr	r3, [pc, #132]	; (800c2d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c254:	4b20      	ldr	r3, [pc, #128]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	3304      	adds	r3, #4
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe f9e4 	bl	800a628 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c266:	d10a      	bne.n	800c27e <prvAddCurrentTaskToDelayedList+0x3a>
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d007      	beq.n	800c27e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c26e:	4b1a      	ldr	r3, [pc, #104]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3304      	adds	r3, #4
 800c274:	4619      	mov	r1, r3
 800c276:	4819      	ldr	r0, [pc, #100]	; (800c2dc <prvAddCurrentTaskToDelayedList+0x98>)
 800c278:	f7fe f979 	bl	800a56e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c27c:	e026      	b.n	800c2cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4413      	add	r3, r2
 800c284:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c286:	4b14      	ldr	r3, [pc, #80]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	429a      	cmp	r2, r3
 800c294:	d209      	bcs.n	800c2aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c296:	4b12      	ldr	r3, [pc, #72]	; (800c2e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c298:	681a      	ldr	r2, [r3, #0]
 800c29a:	4b0f      	ldr	r3, [pc, #60]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	f7fe f987 	bl	800a5b6 <vListInsert>
}
 800c2a8:	e010      	b.n	800c2cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2aa:	4b0e      	ldr	r3, [pc, #56]	; (800c2e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c2ac:	681a      	ldr	r2, [r3, #0]
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	3304      	adds	r3, #4
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	4610      	mov	r0, r2
 800c2b8:	f7fe f97d 	bl	800a5b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c2bc:	4b0a      	ldr	r3, [pc, #40]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d202      	bcs.n	800c2cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c2c6:	4a08      	ldr	r2, [pc, #32]	; (800c2e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	6013      	str	r3, [r2, #0]
}
 800c2cc:	bf00      	nop
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	20004e48 	.word	0x20004e48
 800c2d8:	20004970 	.word	0x20004970
 800c2dc:	20004e30 	.word	0x20004e30
 800c2e0:	20004e00 	.word	0x20004e00
 800c2e4:	20004dfc 	.word	0x20004dfc
 800c2e8:	20004e64 	.word	0x20004e64

0800c2ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08a      	sub	sp, #40	; 0x28
 800c2f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c2f6:	f000 fb07 	bl	800c908 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c2fa:	4b1c      	ldr	r3, [pc, #112]	; (800c36c <xTimerCreateTimerTask+0x80>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d021      	beq.n	800c346 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c302:	2300      	movs	r3, #0
 800c304:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c306:	2300      	movs	r3, #0
 800c308:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c30a:	1d3a      	adds	r2, r7, #4
 800c30c:	f107 0108 	add.w	r1, r7, #8
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f7fd fef9 	bl	800a10c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c31a:	6879      	ldr	r1, [r7, #4]
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	9202      	str	r2, [sp, #8]
 800c322:	9301      	str	r3, [sp, #4]
 800c324:	2302      	movs	r3, #2
 800c326:	9300      	str	r3, [sp, #0]
 800c328:	2300      	movs	r3, #0
 800c32a:	460a      	mov	r2, r1
 800c32c:	4910      	ldr	r1, [pc, #64]	; (800c370 <xTimerCreateTimerTask+0x84>)
 800c32e:	4811      	ldr	r0, [pc, #68]	; (800c374 <xTimerCreateTimerTask+0x88>)
 800c330:	f7ff f8de 	bl	800b4f0 <xTaskCreateStatic>
 800c334:	4603      	mov	r3, r0
 800c336:	4a10      	ldr	r2, [pc, #64]	; (800c378 <xTimerCreateTimerTask+0x8c>)
 800c338:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c33a:	4b0f      	ldr	r3, [pc, #60]	; (800c378 <xTimerCreateTimerTask+0x8c>)
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10a      	bne.n	800c362 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	f383 8811 	msr	BASEPRI, r3
 800c354:	f3bf 8f6f 	isb	sy
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	613b      	str	r3, [r7, #16]
}
 800c35e:	bf00      	nop
 800c360:	e7fe      	b.n	800c360 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c362:	697b      	ldr	r3, [r7, #20]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	20004ea0 	.word	0x20004ea0
 800c370:	08013d1c 	.word	0x08013d1c
 800c374:	0800c4b1 	.word	0x0800c4b1
 800c378:	20004ea4 	.word	0x20004ea4

0800c37c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	; 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <xTimerGenericCommand+0x2e>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	623b      	str	r3, [r7, #32]
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c3aa:	4b1a      	ldr	r3, [pc, #104]	; (800c414 <xTimerGenericCommand+0x98>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d02a      	beq.n	800c408 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b05      	cmp	r3, #5
 800c3c2:	dc18      	bgt.n	800c3f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c3c4:	f7ff feb2 	bl	800c12c <xTaskGetSchedulerState>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	2b02      	cmp	r3, #2
 800c3cc:	d109      	bne.n	800c3e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c3ce:	4b11      	ldr	r3, [pc, #68]	; (800c414 <xTimerGenericCommand+0x98>)
 800c3d0:	6818      	ldr	r0, [r3, #0]
 800c3d2:	f107 0110 	add.w	r1, r7, #16
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3da:	f7fe fca1 	bl	800ad20 <xQueueGenericSend>
 800c3de:	6278      	str	r0, [r7, #36]	; 0x24
 800c3e0:	e012      	b.n	800c408 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c3e2:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <xTimerGenericCommand+0x98>)
 800c3e4:	6818      	ldr	r0, [r3, #0]
 800c3e6:	f107 0110 	add.w	r1, r7, #16
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f7fe fc97 	bl	800ad20 <xQueueGenericSend>
 800c3f2:	6278      	str	r0, [r7, #36]	; 0x24
 800c3f4:	e008      	b.n	800c408 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c3f6:	4b07      	ldr	r3, [pc, #28]	; (800c414 <xTimerGenericCommand+0x98>)
 800c3f8:	6818      	ldr	r0, [r3, #0]
 800c3fa:	f107 0110 	add.w	r1, r7, #16
 800c3fe:	2300      	movs	r3, #0
 800c400:	683a      	ldr	r2, [r7, #0]
 800c402:	f7fe fd8b 	bl	800af1c <xQueueGenericSendFromISR>
 800c406:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3728      	adds	r7, #40	; 0x28
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20004ea0 	.word	0x20004ea0

0800c418 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b088      	sub	sp, #32
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c422:	4b22      	ldr	r3, [pc, #136]	; (800c4ac <prvProcessExpiredTimer+0x94>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68db      	ldr	r3, [r3, #12]
 800c428:	68db      	ldr	r3, [r3, #12]
 800c42a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	3304      	adds	r3, #4
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe f8f9 	bl	800a628 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c436:	697b      	ldr	r3, [r7, #20]
 800c438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b00      	cmp	r3, #0
 800c442:	d022      	beq.n	800c48a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	699a      	ldr	r2, [r3, #24]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	18d1      	adds	r1, r2, r3
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	683a      	ldr	r2, [r7, #0]
 800c450:	6978      	ldr	r0, [r7, #20]
 800c452:	f000 f8d1 	bl	800c5f8 <prvInsertTimerInActiveList>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01f      	beq.n	800c49c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c45c:	2300      	movs	r3, #0
 800c45e:	9300      	str	r3, [sp, #0]
 800c460:	2300      	movs	r3, #0
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	2100      	movs	r1, #0
 800c466:	6978      	ldr	r0, [r7, #20]
 800c468:	f7ff ff88 	bl	800c37c <xTimerGenericCommand>
 800c46c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d113      	bne.n	800c49c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	60fb      	str	r3, [r7, #12]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c490:	f023 0301 	bic.w	r3, r3, #1
 800c494:	b2da      	uxtb	r2, r3
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	6a1b      	ldr	r3, [r3, #32]
 800c4a0:	6978      	ldr	r0, [r7, #20]
 800c4a2:	4798      	blx	r3
}
 800c4a4:	bf00      	nop
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}
 800c4ac:	20004e98 	.word	0x20004e98

0800c4b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4b8:	f107 0308 	add.w	r3, r7, #8
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 f857 	bl	800c570 <prvGetNextExpireTime>
 800c4c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c4c4:	68bb      	ldr	r3, [r7, #8]
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f803 	bl	800c4d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c4ce:	f000 f8d5 	bl	800c67c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c4d2:	e7f1      	b.n	800c4b8 <prvTimerTask+0x8>

0800c4d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c4de:	f7ff fa43 	bl	800b968 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 f866 	bl	800c5b8 <prvSampleTimeNow>
 800c4ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d130      	bne.n	800c556 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10a      	bne.n	800c510 <prvProcessTimerOrBlockTask+0x3c>
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d806      	bhi.n	800c510 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c502:	f7ff fa3f 	bl	800b984 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c506:	68f9      	ldr	r1, [r7, #12]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff ff85 	bl	800c418 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c50e:	e024      	b.n	800c55a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d008      	beq.n	800c528 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c516:	4b13      	ldr	r3, [pc, #76]	; (800c564 <prvProcessTimerOrBlockTask+0x90>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d101      	bne.n	800c524 <prvProcessTimerOrBlockTask+0x50>
 800c520:	2301      	movs	r3, #1
 800c522:	e000      	b.n	800c526 <prvProcessTimerOrBlockTask+0x52>
 800c524:	2300      	movs	r3, #0
 800c526:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c528:	4b0f      	ldr	r3, [pc, #60]	; (800c568 <prvProcessTimerOrBlockTask+0x94>)
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	683a      	ldr	r2, [r7, #0]
 800c534:	4619      	mov	r1, r3
 800c536:	f7fe ffa7 	bl	800b488 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c53a:	f7ff fa23 	bl	800b984 <xTaskResumeAll>
 800c53e:	4603      	mov	r3, r0
 800c540:	2b00      	cmp	r3, #0
 800c542:	d10a      	bne.n	800c55a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c544:	4b09      	ldr	r3, [pc, #36]	; (800c56c <prvProcessTimerOrBlockTask+0x98>)
 800c546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	f3bf 8f6f 	isb	sy
}
 800c554:	e001      	b.n	800c55a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c556:	f7ff fa15 	bl	800b984 <xTaskResumeAll>
}
 800c55a:	bf00      	nop
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	20004e9c 	.word	0x20004e9c
 800c568:	20004ea0 	.word	0x20004ea0
 800c56c:	e000ed04 	.word	0xe000ed04

0800c570 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c578:	4b0e      	ldr	r3, [pc, #56]	; (800c5b4 <prvGetNextExpireTime+0x44>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <prvGetNextExpireTime+0x16>
 800c582:	2201      	movs	r2, #1
 800c584:	e000      	b.n	800c588 <prvGetNextExpireTime+0x18>
 800c586:	2200      	movs	r2, #0
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d105      	bne.n	800c5a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c594:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <prvGetNextExpireTime+0x44>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	e001      	b.n	800c5a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3714      	adds	r7, #20
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20004e98 	.word	0x20004e98

0800c5b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c5c0:	f7ff fa7e 	bl	800bac0 <xTaskGetTickCount>
 800c5c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <prvSampleTimeNow+0x3c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d205      	bcs.n	800c5dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c5d0:	f000 f936 	bl	800c840 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	e002      	b.n	800c5e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c5e2:	4a04      	ldr	r2, [pc, #16]	; (800c5f4 <prvSampleTimeNow+0x3c>)
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20004ea8 	.word	0x20004ea8

0800c5f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c606:	2300      	movs	r3, #0
 800c608:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d812      	bhi.n	800c644 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	1ad2      	subs	r2, r2, r3
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	699b      	ldr	r3, [r3, #24]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d302      	bcc.n	800c632 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c62c:	2301      	movs	r3, #1
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	e01b      	b.n	800c66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c632:	4b10      	ldr	r3, [pc, #64]	; (800c674 <prvInsertTimerInActiveList+0x7c>)
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3304      	adds	r3, #4
 800c63a:	4619      	mov	r1, r3
 800c63c:	4610      	mov	r0, r2
 800c63e:	f7fd ffba 	bl	800a5b6 <vListInsert>
 800c642:	e012      	b.n	800c66a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d206      	bcs.n	800c65a <prvInsertTimerInActiveList+0x62>
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	429a      	cmp	r2, r3
 800c652:	d302      	bcc.n	800c65a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c654:	2301      	movs	r3, #1
 800c656:	617b      	str	r3, [r7, #20]
 800c658:	e007      	b.n	800c66a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c65a:	4b07      	ldr	r3, [pc, #28]	; (800c678 <prvInsertTimerInActiveList+0x80>)
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3304      	adds	r3, #4
 800c662:	4619      	mov	r1, r3
 800c664:	4610      	mov	r0, r2
 800c666:	f7fd ffa6 	bl	800a5b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c66a:	697b      	ldr	r3, [r7, #20]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3718      	adds	r7, #24
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	20004e9c 	.word	0x20004e9c
 800c678:	20004e98 	.word	0x20004e98

0800c67c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b08e      	sub	sp, #56	; 0x38
 800c680:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c682:	e0ca      	b.n	800c81a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	da18      	bge.n	800c6bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c68a:	1d3b      	adds	r3, r7, #4
 800c68c:	3304      	adds	r3, #4
 800c68e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10a      	bne.n	800c6ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	61fb      	str	r3, [r7, #28]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6b2:	6850      	ldr	r0, [r2, #4]
 800c6b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6b6:	6892      	ldr	r2, [r2, #8]
 800c6b8:	4611      	mov	r1, r2
 800c6ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	f2c0 80aa 	blt.w	800c818 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ca:	695b      	ldr	r3, [r3, #20]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d004      	beq.n	800c6da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d2:	3304      	adds	r3, #4
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7fd ffa7 	bl	800a628 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c6da:	463b      	mov	r3, r7
 800c6dc:	4618      	mov	r0, r3
 800c6de:	f7ff ff6b 	bl	800c5b8 <prvSampleTimeNow>
 800c6e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b09      	cmp	r3, #9
 800c6e8:	f200 8097 	bhi.w	800c81a <prvProcessReceivedCommands+0x19e>
 800c6ec:	a201      	add	r2, pc, #4	; (adr r2, 800c6f4 <prvProcessReceivedCommands+0x78>)
 800c6ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6f2:	bf00      	nop
 800c6f4:	0800c71d 	.word	0x0800c71d
 800c6f8:	0800c71d 	.word	0x0800c71d
 800c6fc:	0800c71d 	.word	0x0800c71d
 800c700:	0800c791 	.word	0x0800c791
 800c704:	0800c7a5 	.word	0x0800c7a5
 800c708:	0800c7ef 	.word	0x0800c7ef
 800c70c:	0800c71d 	.word	0x0800c71d
 800c710:	0800c71d 	.word	0x0800c71d
 800c714:	0800c791 	.word	0x0800c791
 800c718:	0800c7a5 	.word	0x0800c7a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c722:	f043 0301 	orr.w	r3, r3, #1
 800c726:	b2da      	uxtb	r2, r3
 800c728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c72a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c72e:	68ba      	ldr	r2, [r7, #8]
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	699b      	ldr	r3, [r3, #24]
 800c734:	18d1      	adds	r1, r2, r3
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c73c:	f7ff ff5c 	bl	800c5f8 <prvInsertTimerInActiveList>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d069      	beq.n	800c81a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c74c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d05e      	beq.n	800c81a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c75c:	68ba      	ldr	r2, [r7, #8]
 800c75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c760:	699b      	ldr	r3, [r3, #24]
 800c762:	441a      	add	r2, r3
 800c764:	2300      	movs	r3, #0
 800c766:	9300      	str	r3, [sp, #0]
 800c768:	2300      	movs	r3, #0
 800c76a:	2100      	movs	r1, #0
 800c76c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c76e:	f7ff fe05 	bl	800c37c <xTimerGenericCommand>
 800c772:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c774:	6a3b      	ldr	r3, [r7, #32]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d14f      	bne.n	800c81a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	61bb      	str	r3, [r7, #24]
}
 800c78c:	bf00      	nop
 800c78e:	e7fe      	b.n	800c78e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c792:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c796:	f023 0301 	bic.w	r3, r3, #1
 800c79a:	b2da      	uxtb	r2, r3
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c7a2:	e03a      	b.n	800c81a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7aa:	f043 0301 	orr.w	r3, r3, #1
 800c7ae:	b2da      	uxtb	r2, r3
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c7b6:	68ba      	ldr	r2, [r7, #8]
 800c7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	699b      	ldr	r3, [r3, #24]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10a      	bne.n	800c7da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	617b      	str	r3, [r7, #20]
}
 800c7d6:	bf00      	nop
 800c7d8:	e7fe      	b.n	800c7d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	699a      	ldr	r2, [r3, #24]
 800c7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e0:	18d1      	adds	r1, r2, r3
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7e8:	f7ff ff06 	bl	800c5f8 <prvInsertTimerInActiveList>
					break;
 800c7ec:	e015      	b.n	800c81a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f4:	f003 0302 	and.w	r3, r3, #2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d103      	bne.n	800c804 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c7fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7fe:	f7fd fd6b 	bl	800a2d8 <vPortFree>
 800c802:	e00a      	b.n	800c81a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c806:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c80a:	f023 0301 	bic.w	r3, r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c816:	e000      	b.n	800c81a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c818:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c81a:	4b08      	ldr	r3, [pc, #32]	; (800c83c <prvProcessReceivedCommands+0x1c0>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	1d39      	adds	r1, r7, #4
 800c820:	2200      	movs	r2, #0
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fc16 	bl	800b054 <xQueueReceive>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f47f af2a 	bne.w	800c684 <prvProcessReceivedCommands+0x8>
	}
}
 800c830:	bf00      	nop
 800c832:	bf00      	nop
 800c834:	3730      	adds	r7, #48	; 0x30
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20004ea0 	.word	0x20004ea0

0800c840 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c846:	e048      	b.n	800c8da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c848:	4b2d      	ldr	r3, [pc, #180]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c852:	4b2b      	ldr	r3, [pc, #172]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	68db      	ldr	r3, [r3, #12]
 800c85a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	3304      	adds	r3, #4
 800c860:	4618      	mov	r0, r3
 800c862:	f7fd fee1 	bl	800a628 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	6a1b      	ldr	r3, [r3, #32]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d02e      	beq.n	800c8da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	699b      	ldr	r3, [r3, #24]
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4413      	add	r3, r2
 800c884:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d90e      	bls.n	800c8ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68ba      	ldr	r2, [r7, #8]
 800c892:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c89a:	4b19      	ldr	r3, [pc, #100]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3304      	adds	r3, #4
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	4610      	mov	r0, r2
 800c8a6:	f7fd fe86 	bl	800a5b6 <vListInsert>
 800c8aa:	e016      	b.n	800c8da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff fd60 	bl	800c37c <xTimerGenericCommand>
 800c8bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d10a      	bne.n	800c8da <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	603b      	str	r3, [r7, #0]
}
 800c8d6:	bf00      	nop
 800c8d8:	e7fe      	b.n	800c8d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1b1      	bne.n	800c848 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c8e4:	4b06      	ldr	r3, [pc, #24]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c8ea:	4b06      	ldr	r3, [pc, #24]	; (800c904 <prvSwitchTimerLists+0xc4>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a04      	ldr	r2, [pc, #16]	; (800c900 <prvSwitchTimerLists+0xc0>)
 800c8f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c8f2:	4a04      	ldr	r2, [pc, #16]	; (800c904 <prvSwitchTimerLists+0xc4>)
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	6013      	str	r3, [r2, #0]
}
 800c8f8:	bf00      	nop
 800c8fa:	3718      	adds	r7, #24
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}
 800c900:	20004e98 	.word	0x20004e98
 800c904:	20004e9c 	.word	0x20004e9c

0800c908 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c90e:	f7fd ffe1 	bl	800a8d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c912:	4b15      	ldr	r3, [pc, #84]	; (800c968 <prvCheckForValidListAndQueue+0x60>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d120      	bne.n	800c95c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c91a:	4814      	ldr	r0, [pc, #80]	; (800c96c <prvCheckForValidListAndQueue+0x64>)
 800c91c:	f7fd fdfa 	bl	800a514 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c920:	4813      	ldr	r0, [pc, #76]	; (800c970 <prvCheckForValidListAndQueue+0x68>)
 800c922:	f7fd fdf7 	bl	800a514 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c926:	4b13      	ldr	r3, [pc, #76]	; (800c974 <prvCheckForValidListAndQueue+0x6c>)
 800c928:	4a10      	ldr	r2, [pc, #64]	; (800c96c <prvCheckForValidListAndQueue+0x64>)
 800c92a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c92c:	4b12      	ldr	r3, [pc, #72]	; (800c978 <prvCheckForValidListAndQueue+0x70>)
 800c92e:	4a10      	ldr	r2, [pc, #64]	; (800c970 <prvCheckForValidListAndQueue+0x68>)
 800c930:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c932:	2300      	movs	r3, #0
 800c934:	9300      	str	r3, [sp, #0]
 800c936:	4b11      	ldr	r3, [pc, #68]	; (800c97c <prvCheckForValidListAndQueue+0x74>)
 800c938:	4a11      	ldr	r2, [pc, #68]	; (800c980 <prvCheckForValidListAndQueue+0x78>)
 800c93a:	2110      	movs	r1, #16
 800c93c:	200a      	movs	r0, #10
 800c93e:	f7fe f953 	bl	800abe8 <xQueueGenericCreateStatic>
 800c942:	4603      	mov	r3, r0
 800c944:	4a08      	ldr	r2, [pc, #32]	; (800c968 <prvCheckForValidListAndQueue+0x60>)
 800c946:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c948:	4b07      	ldr	r3, [pc, #28]	; (800c968 <prvCheckForValidListAndQueue+0x60>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d005      	beq.n	800c95c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c950:	4b05      	ldr	r3, [pc, #20]	; (800c968 <prvCheckForValidListAndQueue+0x60>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	490b      	ldr	r1, [pc, #44]	; (800c984 <prvCheckForValidListAndQueue+0x7c>)
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fd6c 	bl	800b434 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c95c:	f7fd ffea 	bl	800a934 <vPortExitCritical>
}
 800c960:	bf00      	nop
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}
 800c966:	bf00      	nop
 800c968:	20004ea0 	.word	0x20004ea0
 800c96c:	20004e70 	.word	0x20004e70
 800c970:	20004e84 	.word	0x20004e84
 800c974:	20004e98 	.word	0x20004e98
 800c978:	20004e9c 	.word	0x20004e9c
 800c97c:	20004f4c 	.word	0x20004f4c
 800c980:	20004eac 	.word	0x20004eac
 800c984:	08013d24 	.word	0x08013d24

0800c988 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c994:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c998:	f002 fc96 	bl	800f2c8 <USBD_static_malloc>
 800c99c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d109      	bne.n	800c9b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	32b0      	adds	r2, #176	; 0xb0
 800c9ae:	2100      	movs	r1, #0
 800c9b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	e0d4      	b.n	800cb62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c9b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c9bc:	2100      	movs	r1, #0
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f002 fcfe 	bl	800f3c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	32b0      	adds	r2, #176	; 0xb0
 800c9ce:	68f9      	ldr	r1, [r7, #12]
 800c9d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	32b0      	adds	r2, #176	; 0xb0
 800c9de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	7c1b      	ldrb	r3, [r3, #16]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d138      	bne.n	800ca62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c9f0:	4b5e      	ldr	r3, [pc, #376]	; (800cb6c <USBD_CDC_Init+0x1e4>)
 800c9f2:	7819      	ldrb	r1, [r3, #0]
 800c9f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f002 fb41 	bl	800f082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca00:	4b5a      	ldr	r3, [pc, #360]	; (800cb6c <USBD_CDC_Init+0x1e4>)
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	f003 020f 	and.w	r2, r3, #15
 800ca08:	6879      	ldr	r1, [r7, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	440b      	add	r3, r1
 800ca14:	3324      	adds	r3, #36	; 0x24
 800ca16:	2201      	movs	r2, #1
 800ca18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca1a:	4b55      	ldr	r3, [pc, #340]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800ca1c:	7819      	ldrb	r1, [r3, #0]
 800ca1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca22:	2202      	movs	r2, #2
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f002 fb2c 	bl	800f082 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca2a:	4b51      	ldr	r3, [pc, #324]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	f003 020f 	and.w	r2, r3, #15
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	440b      	add	r3, r1
 800ca3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca42:	2201      	movs	r2, #1
 800ca44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca46:	4b4b      	ldr	r3, [pc, #300]	; (800cb74 <USBD_CDC_Init+0x1ec>)
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	f003 020f 	and.w	r2, r3, #15
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4613      	mov	r3, r2
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	440b      	add	r3, r1
 800ca5a:	3326      	adds	r3, #38	; 0x26
 800ca5c:	2210      	movs	r2, #16
 800ca5e:	801a      	strh	r2, [r3, #0]
 800ca60:	e035      	b.n	800cace <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca62:	4b42      	ldr	r3, [pc, #264]	; (800cb6c <USBD_CDC_Init+0x1e4>)
 800ca64:	7819      	ldrb	r1, [r3, #0]
 800ca66:	2340      	movs	r3, #64	; 0x40
 800ca68:	2202      	movs	r2, #2
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f002 fb09 	bl	800f082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca70:	4b3e      	ldr	r3, [pc, #248]	; (800cb6c <USBD_CDC_Init+0x1e4>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	f003 020f 	and.w	r2, r3, #15
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	3324      	adds	r3, #36	; 0x24
 800ca86:	2201      	movs	r2, #1
 800ca88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca8a:	4b39      	ldr	r3, [pc, #228]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800ca8c:	7819      	ldrb	r1, [r3, #0]
 800ca8e:	2340      	movs	r3, #64	; 0x40
 800ca90:	2202      	movs	r2, #2
 800ca92:	6878      	ldr	r0, [r7, #4]
 800ca94:	f002 faf5 	bl	800f082 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca98:	4b35      	ldr	r3, [pc, #212]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 020f 	and.w	r2, r3, #15
 800caa0:	6879      	ldr	r1, [r7, #4]
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	440b      	add	r3, r1
 800caac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cab0:	2201      	movs	r2, #1
 800cab2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cab4:	4b2f      	ldr	r3, [pc, #188]	; (800cb74 <USBD_CDC_Init+0x1ec>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	f003 020f 	and.w	r2, r3, #15
 800cabc:	6879      	ldr	r1, [r7, #4]
 800cabe:	4613      	mov	r3, r2
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4413      	add	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	440b      	add	r3, r1
 800cac8:	3326      	adds	r3, #38	; 0x26
 800caca:	2210      	movs	r2, #16
 800cacc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cace:	4b29      	ldr	r3, [pc, #164]	; (800cb74 <USBD_CDC_Init+0x1ec>)
 800cad0:	7819      	ldrb	r1, [r3, #0]
 800cad2:	2308      	movs	r3, #8
 800cad4:	2203      	movs	r2, #3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f002 fad3 	bl	800f082 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cadc:	4b25      	ldr	r3, [pc, #148]	; (800cb74 <USBD_CDC_Init+0x1ec>)
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	f003 020f 	and.w	r2, r3, #15
 800cae4:	6879      	ldr	r1, [r7, #4]
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	440b      	add	r3, r1
 800caf0:	3324      	adds	r3, #36	; 0x24
 800caf2:	2201      	movs	r2, #1
 800caf4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	33b0      	adds	r3, #176	; 0xb0
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	e018      	b.n	800cb62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	7c1b      	ldrb	r3, [r3, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d10a      	bne.n	800cb4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb38:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800cb3a:	7819      	ldrb	r1, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f002 fb8a 	bl	800f260 <USBD_LL_PrepareReceive>
 800cb4c:	e008      	b.n	800cb60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb4e:	4b08      	ldr	r3, [pc, #32]	; (800cb70 <USBD_CDC_Init+0x1e8>)
 800cb50:	7819      	ldrb	r1, [r3, #0]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb58:	2340      	movs	r3, #64	; 0x40
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f002 fb80 	bl	800f260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	20000113 	.word	0x20000113
 800cb70:	20000114 	.word	0x20000114
 800cb74:	20000115 	.word	0x20000115

0800cb78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cb84:	4b3a      	ldr	r3, [pc, #232]	; (800cc70 <USBD_CDC_DeInit+0xf8>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	4619      	mov	r1, r3
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f002 fa9f 	bl	800f0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cb90:	4b37      	ldr	r3, [pc, #220]	; (800cc70 <USBD_CDC_DeInit+0xf8>)
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	f003 020f 	and.w	r2, r3, #15
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	009b      	lsls	r3, r3, #2
 800cb9e:	4413      	add	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	440b      	add	r3, r1
 800cba4:	3324      	adds	r3, #36	; 0x24
 800cba6:	2200      	movs	r2, #0
 800cba8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cbaa:	4b32      	ldr	r3, [pc, #200]	; (800cc74 <USBD_CDC_DeInit+0xfc>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f002 fa8c 	bl	800f0ce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cbb6:	4b2f      	ldr	r3, [pc, #188]	; (800cc74 <USBD_CDC_DeInit+0xfc>)
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	f003 020f 	and.w	r2, r3, #15
 800cbbe:	6879      	ldr	r1, [r7, #4]
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	009b      	lsls	r3, r3, #2
 800cbc8:	440b      	add	r3, r1
 800cbca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbce:	2200      	movs	r2, #0
 800cbd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cbd2:	4b29      	ldr	r3, [pc, #164]	; (800cc78 <USBD_CDC_DeInit+0x100>)
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f002 fa78 	bl	800f0ce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cbde:	4b26      	ldr	r3, [pc, #152]	; (800cc78 <USBD_CDC_DeInit+0x100>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	f003 020f 	and.w	r2, r3, #15
 800cbe6:	6879      	ldr	r1, [r7, #4]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	009b      	lsls	r3, r3, #2
 800cbec:	4413      	add	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	440b      	add	r3, r1
 800cbf2:	3324      	adds	r3, #36	; 0x24
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cbf8:	4b1f      	ldr	r3, [pc, #124]	; (800cc78 <USBD_CDC_DeInit+0x100>)
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	f003 020f 	and.w	r2, r3, #15
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	440b      	add	r3, r1
 800cc0c:	3326      	adds	r3, #38	; 0x26
 800cc0e:	2200      	movs	r2, #0
 800cc10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	32b0      	adds	r2, #176	; 0xb0
 800cc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01f      	beq.n	800cc64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	33b0      	adds	r3, #176	; 0xb0
 800cc2e:	009b      	lsls	r3, r3, #2
 800cc30:	4413      	add	r3, r2
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	32b0      	adds	r2, #176	; 0xb0
 800cc42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f002 fb4c 	bl	800f2e4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	32b0      	adds	r2, #176	; 0xb0
 800cc56:	2100      	movs	r1, #0
 800cc58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3708      	adds	r7, #8
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	20000113 	.word	0x20000113
 800cc74:	20000114 	.word	0x20000114
 800cc78:	20000115 	.word	0x20000115

0800cc7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	32b0      	adds	r2, #176	; 0xb0
 800cc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cc96:	2300      	movs	r3, #0
 800cc98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d101      	bne.n	800ccac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e0bf      	b.n	800ce2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d050      	beq.n	800cd5a <USBD_CDC_Setup+0xde>
 800ccb8:	2b20      	cmp	r3, #32
 800ccba:	f040 80af 	bne.w	800ce1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	88db      	ldrh	r3, [r3, #6]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d03a      	beq.n	800cd3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	b25b      	sxtb	r3, r3
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	da1b      	bge.n	800cd08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	33b0      	adds	r3, #176	; 0xb0
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	4413      	add	r3, r2
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	683a      	ldr	r2, [r7, #0]
 800cce4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cce6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cce8:	683a      	ldr	r2, [r7, #0]
 800ccea:	88d2      	ldrh	r2, [r2, #6]
 800ccec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	88db      	ldrh	r3, [r3, #6]
 800ccf2:	2b07      	cmp	r3, #7
 800ccf4:	bf28      	it	cs
 800ccf6:	2307      	movcs	r3, #7
 800ccf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	89fa      	ldrh	r2, [r7, #14]
 800ccfe:	4619      	mov	r1, r3
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f001 fd89 	bl	800e818 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd06:	e090      	b.n	800ce2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	785a      	ldrb	r2, [r3, #1]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	88db      	ldrh	r3, [r3, #6]
 800cd16:	2b3f      	cmp	r3, #63	; 0x3f
 800cd18:	d803      	bhi.n	800cd22 <USBD_CDC_Setup+0xa6>
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	88db      	ldrh	r3, [r3, #6]
 800cd1e:	b2da      	uxtb	r2, r3
 800cd20:	e000      	b.n	800cd24 <USBD_CDC_Setup+0xa8>
 800cd22:	2240      	movs	r2, #64	; 0x40
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd2a:	6939      	ldr	r1, [r7, #16]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cd32:	461a      	mov	r2, r3
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f001 fd9b 	bl	800e870 <USBD_CtlPrepareRx>
      break;
 800cd3a:	e076      	b.n	800ce2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	33b0      	adds	r3, #176	; 0xb0
 800cd46:	009b      	lsls	r3, r3, #2
 800cd48:	4413      	add	r3, r2
 800cd4a:	685b      	ldr	r3, [r3, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	7850      	ldrb	r0, [r2, #1]
 800cd52:	2200      	movs	r2, #0
 800cd54:	6839      	ldr	r1, [r7, #0]
 800cd56:	4798      	blx	r3
      break;
 800cd58:	e067      	b.n	800ce2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	785b      	ldrb	r3, [r3, #1]
 800cd5e:	2b0b      	cmp	r3, #11
 800cd60:	d851      	bhi.n	800ce06 <USBD_CDC_Setup+0x18a>
 800cd62:	a201      	add	r2, pc, #4	; (adr r2, 800cd68 <USBD_CDC_Setup+0xec>)
 800cd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd68:	0800cd99 	.word	0x0800cd99
 800cd6c:	0800ce15 	.word	0x0800ce15
 800cd70:	0800ce07 	.word	0x0800ce07
 800cd74:	0800ce07 	.word	0x0800ce07
 800cd78:	0800ce07 	.word	0x0800ce07
 800cd7c:	0800ce07 	.word	0x0800ce07
 800cd80:	0800ce07 	.word	0x0800ce07
 800cd84:	0800ce07 	.word	0x0800ce07
 800cd88:	0800ce07 	.word	0x0800ce07
 800cd8c:	0800ce07 	.word	0x0800ce07
 800cd90:	0800cdc3 	.word	0x0800cdc3
 800cd94:	0800cded 	.word	0x0800cded
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd9e:	b2db      	uxtb	r3, r3
 800cda0:	2b03      	cmp	r3, #3
 800cda2:	d107      	bne.n	800cdb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cda4:	f107 030a 	add.w	r3, r7, #10
 800cda8:	2202      	movs	r2, #2
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 fd33 	bl	800e818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdb2:	e032      	b.n	800ce1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f001 fcbd 	bl	800e736 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	75fb      	strb	r3, [r7, #23]
          break;
 800cdc0:	e02b      	b.n	800ce1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d107      	bne.n	800cdde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cdce:	f107 030d 	add.w	r3, r7, #13
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	4619      	mov	r1, r3
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 fd1e 	bl	800e818 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cddc:	e01d      	b.n	800ce1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 fca8 	bl	800e736 <USBD_CtlError>
            ret = USBD_FAIL;
 800cde6:	2303      	movs	r3, #3
 800cde8:	75fb      	strb	r3, [r7, #23]
          break;
 800cdea:	e016      	b.n	800ce1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf2:	b2db      	uxtb	r3, r3
 800cdf4:	2b03      	cmp	r3, #3
 800cdf6:	d00f      	beq.n	800ce18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cdf8:	6839      	ldr	r1, [r7, #0]
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f001 fc9b 	bl	800e736 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce00:	2303      	movs	r3, #3
 800ce02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce04:	e008      	b.n	800ce18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f001 fc94 	bl	800e736 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	75fb      	strb	r3, [r7, #23]
          break;
 800ce12:	e002      	b.n	800ce1a <USBD_CDC_Setup+0x19e>
          break;
 800ce14:	bf00      	nop
 800ce16:	e008      	b.n	800ce2a <USBD_CDC_Setup+0x1ae>
          break;
 800ce18:	bf00      	nop
      }
      break;
 800ce1a:	e006      	b.n	800ce2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 fc89 	bl	800e736 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce24:	2303      	movs	r3, #3
 800ce26:	75fb      	strb	r3, [r7, #23]
      break;
 800ce28:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	32b0      	adds	r2, #176	; 0xb0
 800ce52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ce5a:	2303      	movs	r3, #3
 800ce5c:	e065      	b.n	800cf2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	32b0      	adds	r2, #176	; 0xb0
 800ce68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce6e:	78fb      	ldrb	r3, [r7, #3]
 800ce70:	f003 020f 	and.w	r2, r3, #15
 800ce74:	6879      	ldr	r1, [r7, #4]
 800ce76:	4613      	mov	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	440b      	add	r3, r1
 800ce80:	3318      	adds	r3, #24
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d02f      	beq.n	800cee8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ce88:	78fb      	ldrb	r3, [r7, #3]
 800ce8a:	f003 020f 	and.w	r2, r3, #15
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	440b      	add	r3, r1
 800ce9a:	3318      	adds	r3, #24
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	78fb      	ldrb	r3, [r7, #3]
 800cea0:	f003 010f 	and.w	r1, r3, #15
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	460b      	mov	r3, r1
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	440b      	add	r3, r1
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	4403      	add	r3, r0
 800ceb0:	3348      	adds	r3, #72	; 0x48
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ceb8:	fb01 f303 	mul.w	r3, r1, r3
 800cebc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d112      	bne.n	800cee8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cec2:	78fb      	ldrb	r3, [r7, #3]
 800cec4:	f003 020f 	and.w	r2, r3, #15
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	4613      	mov	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	009b      	lsls	r3, r3, #2
 800ced2:	440b      	add	r3, r1
 800ced4:	3318      	adds	r3, #24
 800ced6:	2200      	movs	r2, #0
 800ced8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ceda:	78f9      	ldrb	r1, [r7, #3]
 800cedc:	2300      	movs	r3, #0
 800cede:	2200      	movs	r2, #0
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f002 f99c 	bl	800f21e <USBD_LL_Transmit>
 800cee6:	e01f      	b.n	800cf28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	33b0      	adds	r3, #176	; 0xb0
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d010      	beq.n	800cf28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	33b0      	adds	r3, #176	; 0xb0
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	4413      	add	r3, r2
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	68ba      	ldr	r2, [r7, #8]
 800cf1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf1e:	68ba      	ldr	r2, [r7, #8]
 800cf20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf24:	78fa      	ldrb	r2, [r7, #3]
 800cf26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	32b0      	adds	r2, #176	; 0xb0
 800cf48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	32b0      	adds	r2, #176	; 0xb0
 800cf58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d101      	bne.n	800cf64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cf60:	2303      	movs	r3, #3
 800cf62:	e01a      	b.n	800cf9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf64:	78fb      	ldrb	r3, [r7, #3]
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f002 f99a 	bl	800f2a2 <USBD_LL_GetRxDataSize>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	33b0      	adds	r3, #176	; 0xb0
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf94:	4611      	mov	r1, r2
 800cf96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	32b0      	adds	r2, #176	; 0xb0
 800cfb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d101      	bne.n	800cfc4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e025      	b.n	800d010 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	33b0      	adds	r3, #176	; 0xb0
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4413      	add	r3, r2
 800cfd2:	685b      	ldr	r3, [r3, #4]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d01a      	beq.n	800d00e <USBD_CDC_EP0_RxReady+0x6c>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cfde:	2bff      	cmp	r3, #255	; 0xff
 800cfe0:	d015      	beq.n	800d00e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	33b0      	adds	r3, #176	; 0xb0
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cffa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d002:	b292      	uxth	r2, r2
 800d004:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	22ff      	movs	r2, #255	; 0xff
 800d00a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b086      	sub	sp, #24
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d020:	2182      	movs	r1, #130	; 0x82
 800d022:	4818      	ldr	r0, [pc, #96]	; (800d084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d024:	f000 fd4f 	bl	800dac6 <USBD_GetEpDesc>
 800d028:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d02a:	2101      	movs	r1, #1
 800d02c:	4815      	ldr	r0, [pc, #84]	; (800d084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d02e:	f000 fd4a 	bl	800dac6 <USBD_GetEpDesc>
 800d032:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d034:	2181      	movs	r1, #129	; 0x81
 800d036:	4813      	ldr	r0, [pc, #76]	; (800d084 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d038:	f000 fd45 	bl	800dac6 <USBD_GetEpDesc>
 800d03c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d002      	beq.n	800d04a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	2210      	movs	r2, #16
 800d048:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d006      	beq.n	800d05e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	2200      	movs	r2, #0
 800d054:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d058:	711a      	strb	r2, [r3, #4]
 800d05a:	2200      	movs	r2, #0
 800d05c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d006      	beq.n	800d072 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d06c:	711a      	strb	r2, [r3, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2243      	movs	r2, #67	; 0x43
 800d076:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3718      	adds	r7, #24
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	200000d0 	.word	0x200000d0

0800d088 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d090:	2182      	movs	r1, #130	; 0x82
 800d092:	4818      	ldr	r0, [pc, #96]	; (800d0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d094:	f000 fd17 	bl	800dac6 <USBD_GetEpDesc>
 800d098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d09a:	2101      	movs	r1, #1
 800d09c:	4815      	ldr	r0, [pc, #84]	; (800d0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d09e:	f000 fd12 	bl	800dac6 <USBD_GetEpDesc>
 800d0a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0a4:	2181      	movs	r1, #129	; 0x81
 800d0a6:	4813      	ldr	r0, [pc, #76]	; (800d0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0a8:	f000 fd0d 	bl	800dac6 <USBD_GetEpDesc>
 800d0ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2210      	movs	r2, #16
 800d0b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d006      	beq.n	800d0ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	711a      	strb	r2, [r3, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f042 0202 	orr.w	r2, r2, #2
 800d0cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	711a      	strb	r2, [r3, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f042 0202 	orr.w	r2, r2, #2
 800d0e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2243      	movs	r2, #67	; 0x43
 800d0e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200000d0 	.word	0x200000d0

0800d0f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d100:	2182      	movs	r1, #130	; 0x82
 800d102:	4818      	ldr	r0, [pc, #96]	; (800d164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d104:	f000 fcdf 	bl	800dac6 <USBD_GetEpDesc>
 800d108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d10a:	2101      	movs	r1, #1
 800d10c:	4815      	ldr	r0, [pc, #84]	; (800d164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d10e:	f000 fcda 	bl	800dac6 <USBD_GetEpDesc>
 800d112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d114:	2181      	movs	r1, #129	; 0x81
 800d116:	4813      	ldr	r0, [pc, #76]	; (800d164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d118:	f000 fcd5 	bl	800dac6 <USBD_GetEpDesc>
 800d11c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2210      	movs	r2, #16
 800d128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2200      	movs	r2, #0
 800d134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d138:	711a      	strb	r2, [r3, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d14c:	711a      	strb	r2, [r3, #4]
 800d14e:	2200      	movs	r2, #0
 800d150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2243      	movs	r2, #67	; 0x43
 800d156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d158:	4b02      	ldr	r3, [pc, #8]	; (800d164 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3718      	adds	r7, #24
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	200000d0 	.word	0x200000d0

0800d168 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d168:	b480      	push	{r7}
 800d16a:	b083      	sub	sp, #12
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	220a      	movs	r2, #10
 800d174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d176:	4b03      	ldr	r3, [pc, #12]	; (800d184 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr
 800d184:	2000008c 	.word	0x2000008c

0800d188 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d101      	bne.n	800d19c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d198:	2303      	movs	r3, #3
 800d19a:	e009      	b.n	800d1b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1a2:	687a      	ldr	r2, [r7, #4]
 800d1a4:	33b0      	adds	r3, #176	; 0xb0
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	683a      	ldr	r2, [r7, #0]
 800d1ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d1ae:	2300      	movs	r3, #0
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	370c      	adds	r7, #12
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	b087      	sub	sp, #28
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	32b0      	adds	r2, #176	; 0xb0
 800d1d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e008      	b.n	800d1f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	68ba      	ldr	r2, [r7, #8]
 800d1e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	687a      	ldr	r2, [r7, #4]
 800d1ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr

0800d200 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d200:	b480      	push	{r7}
 800d202:	b085      	sub	sp, #20
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	32b0      	adds	r2, #176	; 0xb0
 800d214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d218:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d101      	bne.n	800d224 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d220:	2303      	movs	r3, #3
 800d222:	e004      	b.n	800d22e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	683a      	ldr	r2, [r7, #0]
 800d228:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
	...

0800d23c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b084      	sub	sp, #16
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	32b0      	adds	r2, #176	; 0xb0
 800d24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d252:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d254:	2301      	movs	r3, #1
 800d256:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	32b0      	adds	r2, #176	; 0xb0
 800d262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d101      	bne.n	800d26e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d26a:	2303      	movs	r3, #3
 800d26c:	e025      	b.n	800d2ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d274:	2b00      	cmp	r3, #0
 800d276:	d11f      	bne.n	800d2b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d280:	4b10      	ldr	r3, [pc, #64]	; (800d2c4 <USBD_CDC_TransmitPacket+0x88>)
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	4613      	mov	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4403      	add	r3, r0
 800d29a:	3318      	adds	r3, #24
 800d29c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d29e:	4b09      	ldr	r3, [pc, #36]	; (800d2c4 <USBD_CDC_TransmitPacket+0x88>)
 800d2a0:	7819      	ldrb	r1, [r3, #0]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f001 ffb5 	bl	800f21e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3710      	adds	r7, #16
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000113 	.word	0x20000113

0800d2c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	32b0      	adds	r2, #176	; 0xb0
 800d2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	32b0      	adds	r2, #176	; 0xb0
 800d2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d101      	bne.n	800d2f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d2f2:	2303      	movs	r3, #3
 800d2f4:	e018      	b.n	800d328 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	7c1b      	ldrb	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d10a      	bne.n	800d314 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2fe:	4b0c      	ldr	r3, [pc, #48]	; (800d330 <USBD_CDC_ReceivePacket+0x68>)
 800d300:	7819      	ldrb	r1, [r3, #0]
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d308:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f001 ffa7 	bl	800f260 <USBD_LL_PrepareReceive>
 800d312:	e008      	b.n	800d326 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d314:	4b06      	ldr	r3, [pc, #24]	; (800d330 <USBD_CDC_ReceivePacket+0x68>)
 800d316:	7819      	ldrb	r1, [r3, #0]
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d31e:	2340      	movs	r3, #64	; 0x40
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f001 ff9d 	bl	800f260 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d326:	2300      	movs	r3, #0
}
 800d328:	4618      	mov	r0, r3
 800d32a:	3710      	adds	r7, #16
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}
 800d330:	20000114 	.word	0x20000114

0800d334 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b086      	sub	sp, #24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d101      	bne.n	800d34c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d348:	2303      	movs	r3, #3
 800d34a:	e01f      	b.n	800d38c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2200      	movs	r2, #0
 800d350:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	68ba      	ldr	r2, [r7, #8]
 800d36e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	79fa      	ldrb	r2, [r7, #7]
 800d37e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f001 fe11 	bl	800efa8 <USBD_LL_Init>
 800d386:	4603      	mov	r3, r0
 800d388:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3718      	adds	r7, #24
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d101      	bne.n	800d3ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3a8:	2303      	movs	r3, #3
 800d3aa:	e025      	b.n	800d3f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	683a      	ldr	r2, [r7, #0]
 800d3b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	32ae      	adds	r2, #174	; 0xae
 800d3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00f      	beq.n	800d3e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32ae      	adds	r2, #174	; 0xae
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	f107 020e 	add.w	r2, r7, #14
 800d3dc:	4610      	mov	r0, r2
 800d3de:	4798      	blx	r3
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d3ee:	1c5a      	adds	r2, r3, #1
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f001 fe1f 	bl	800f04c <USBD_LL_Start>
 800d40e:	4603      	mov	r3, r0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d418:	b480      	push	{r7}
 800d41a:	b083      	sub	sp, #12
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d420:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d422:	4618      	mov	r0, r3
 800d424:	370c      	adds	r7, #12
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d42e:	b580      	push	{r7, lr}
 800d430:	b084      	sub	sp, #16
 800d432:	af00      	add	r7, sp, #0
 800d434:	6078      	str	r0, [r7, #4]
 800d436:	460b      	mov	r3, r1
 800d438:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d444:	2b00      	cmp	r3, #0
 800d446:	d009      	beq.n	800d45c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	78fa      	ldrb	r2, [r7, #3]
 800d452:	4611      	mov	r1, r2
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	4798      	blx	r3
 800d458:	4603      	mov	r3, r0
 800d45a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d466:	b580      	push	{r7, lr}
 800d468:	b084      	sub	sp, #16
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	460b      	mov	r3, r1
 800d470:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d472:	2300      	movs	r3, #0
 800d474:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	78fa      	ldrb	r2, [r7, #3]
 800d480:	4611      	mov	r1, r2
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	4798      	blx	r3
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d48c:	2303      	movs	r3, #3
 800d48e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4aa:	6839      	ldr	r1, [r7, #0]
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	f001 f908 	bl	800e6c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d4ce:	f003 031f 	and.w	r3, r3, #31
 800d4d2:	2b02      	cmp	r3, #2
 800d4d4:	d01a      	beq.n	800d50c <USBD_LL_SetupStage+0x72>
 800d4d6:	2b02      	cmp	r3, #2
 800d4d8:	d822      	bhi.n	800d520 <USBD_LL_SetupStage+0x86>
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d002      	beq.n	800d4e4 <USBD_LL_SetupStage+0x4a>
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d00a      	beq.n	800d4f8 <USBD_LL_SetupStage+0x5e>
 800d4e2:	e01d      	b.n	800d520 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fb5f 	bl	800dbb0 <USBD_StdDevReq>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800d4f6:	e020      	b.n	800d53a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fbc7 	bl	800dc94 <USBD_StdItfReq>
 800d506:	4603      	mov	r3, r0
 800d508:	73fb      	strb	r3, [r7, #15]
      break;
 800d50a:	e016      	b.n	800d53a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fc29 	bl	800dd6c <USBD_StdEPReq>
 800d51a:	4603      	mov	r3, r0
 800d51c:	73fb      	strb	r3, [r7, #15]
      break;
 800d51e:	e00c      	b.n	800d53a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d526:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d52a:	b2db      	uxtb	r3, r3
 800d52c:	4619      	mov	r1, r3
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f001 fdec 	bl	800f10c <USBD_LL_StallEP>
 800d534:	4603      	mov	r3, r0
 800d536:	73fb      	strb	r3, [r7, #15]
      break;
 800d538:	bf00      	nop
  }

  return ret;
 800d53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	460b      	mov	r3, r1
 800d54e:	607a      	str	r2, [r7, #4]
 800d550:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d552:	2300      	movs	r3, #0
 800d554:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d556:	7afb      	ldrb	r3, [r7, #11]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d16e      	bne.n	800d63a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d562:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	f040 8098 	bne.w	800d6a0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	689a      	ldr	r2, [r3, #8]
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d913      	bls.n	800d5a4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d57c:	693b      	ldr	r3, [r7, #16]
 800d57e:	689a      	ldr	r2, [r3, #8]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	1ad2      	subs	r2, r2, r3
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	68da      	ldr	r2, [r3, #12]
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	4293      	cmp	r3, r2
 800d594:	bf28      	it	cs
 800d596:	4613      	movcs	r3, r2
 800d598:	461a      	mov	r2, r3
 800d59a:	6879      	ldr	r1, [r7, #4]
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f001 f984 	bl	800e8aa <USBD_CtlContinueRx>
 800d5a2:	e07d      	b.n	800d6a0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d5aa:	f003 031f 	and.w	r3, r3, #31
 800d5ae:	2b02      	cmp	r3, #2
 800d5b0:	d014      	beq.n	800d5dc <USBD_LL_DataOutStage+0x98>
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d81d      	bhi.n	800d5f2 <USBD_LL_DataOutStage+0xae>
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d002      	beq.n	800d5c0 <USBD_LL_DataOutStage+0x7c>
 800d5ba:	2b01      	cmp	r3, #1
 800d5bc:	d003      	beq.n	800d5c6 <USBD_LL_DataOutStage+0x82>
 800d5be:	e018      	b.n	800d5f2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	75bb      	strb	r3, [r7, #22]
            break;
 800d5c4:	e018      	b.n	800d5f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d5cc:	b2db      	uxtb	r3, r3
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f000 fa5e 	bl	800da92 <USBD_CoreFindIF>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	75bb      	strb	r3, [r7, #22]
            break;
 800d5da:	e00d      	b.n	800d5f8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 fa60 	bl	800daac <USBD_CoreFindEP>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	75bb      	strb	r3, [r7, #22]
            break;
 800d5f0:	e002      	b.n	800d5f8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	75bb      	strb	r3, [r7, #22]
            break;
 800d5f6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d5f8:	7dbb      	ldrb	r3, [r7, #22]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d119      	bne.n	800d632 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b03      	cmp	r3, #3
 800d608:	d113      	bne.n	800d632 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d60a:	7dba      	ldrb	r2, [r7, #22]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	32ae      	adds	r2, #174	; 0xae
 800d610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00b      	beq.n	800d632 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d61a:	7dba      	ldrb	r2, [r7, #22]
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d622:	7dba      	ldrb	r2, [r7, #22]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	32ae      	adds	r2, #174	; 0xae
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d632:	68f8      	ldr	r0, [r7, #12]
 800d634:	f001 f94a 	bl	800e8cc <USBD_CtlSendStatus>
 800d638:	e032      	b.n	800d6a0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d63a:	7afb      	ldrb	r3, [r7, #11]
 800d63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d640:	b2db      	uxtb	r3, r3
 800d642:	4619      	mov	r1, r3
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	f000 fa31 	bl	800daac <USBD_CoreFindEP>
 800d64a:	4603      	mov	r3, r0
 800d64c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d64e:	7dbb      	ldrb	r3, [r7, #22]
 800d650:	2bff      	cmp	r3, #255	; 0xff
 800d652:	d025      	beq.n	800d6a0 <USBD_LL_DataOutStage+0x15c>
 800d654:	7dbb      	ldrb	r3, [r7, #22]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d122      	bne.n	800d6a0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d660:	b2db      	uxtb	r3, r3
 800d662:	2b03      	cmp	r3, #3
 800d664:	d117      	bne.n	800d696 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d666:	7dba      	ldrb	r2, [r7, #22]
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	32ae      	adds	r2, #174	; 0xae
 800d66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d670:	699b      	ldr	r3, [r3, #24]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00f      	beq.n	800d696 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d676:	7dba      	ldrb	r2, [r7, #22]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d67e:	7dba      	ldrb	r2, [r7, #22]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	32ae      	adds	r2, #174	; 0xae
 800d684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d688:	699b      	ldr	r3, [r3, #24]
 800d68a:	7afa      	ldrb	r2, [r7, #11]
 800d68c:	4611      	mov	r1, r2
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	4798      	blx	r3
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	e000      	b.n	800d6a2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b086      	sub	sp, #24
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	60f8      	str	r0, [r7, #12]
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	607a      	str	r2, [r7, #4]
 800d6b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d6b8:	7afb      	ldrb	r3, [r7, #11]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d16f      	bne.n	800d79e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	3314      	adds	r3, #20
 800d6c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d15a      	bne.n	800d784 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	689a      	ldr	r2, [r3, #8]
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d914      	bls.n	800d704 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6da:	693b      	ldr	r3, [r7, #16]
 800d6dc:	689a      	ldr	r2, [r3, #8]
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	1ad2      	subs	r2, r2, r3
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	461a      	mov	r2, r3
 800d6ee:	6879      	ldr	r1, [r7, #4]
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f001 f8ac 	bl	800e84e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	2100      	movs	r1, #0
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f001 fdaf 	bl	800f260 <USBD_LL_PrepareReceive>
 800d702:	e03f      	b.n	800d784 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	68da      	ldr	r2, [r3, #12]
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d11c      	bne.n	800d74a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	685a      	ldr	r2, [r3, #4]
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d718:	429a      	cmp	r2, r3
 800d71a:	d316      	bcc.n	800d74a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d726:	429a      	cmp	r2, r3
 800d728:	d20f      	bcs.n	800d74a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d72a:	2200      	movs	r2, #0
 800d72c:	2100      	movs	r1, #0
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f001 f88d 	bl	800e84e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d73c:	2300      	movs	r3, #0
 800d73e:	2200      	movs	r2, #0
 800d740:	2100      	movs	r1, #0
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f001 fd8c 	bl	800f260 <USBD_LL_PrepareReceive>
 800d748:	e01c      	b.n	800d784 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d750:	b2db      	uxtb	r3, r3
 800d752:	2b03      	cmp	r3, #3
 800d754:	d10f      	bne.n	800d776 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d009      	beq.n	800d776 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d776:	2180      	movs	r1, #128	; 0x80
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f001 fcc7 	bl	800f10c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d77e:	68f8      	ldr	r0, [r7, #12]
 800d780:	f001 f8b7 	bl	800e8f2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d03a      	beq.n	800d804 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	f7ff fe42 	bl	800d418 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d79c:	e032      	b.n	800d804 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d79e:	7afb      	ldrb	r3, [r7, #11]
 800d7a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f000 f97f 	bl	800daac <USBD_CoreFindEP>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7b2:	7dfb      	ldrb	r3, [r7, #23]
 800d7b4:	2bff      	cmp	r3, #255	; 0xff
 800d7b6:	d025      	beq.n	800d804 <USBD_LL_DataInStage+0x15a>
 800d7b8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d122      	bne.n	800d804 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	d11c      	bne.n	800d804 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d7ca:	7dfa      	ldrb	r2, [r7, #23]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	32ae      	adds	r2, #174	; 0xae
 800d7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d4:	695b      	ldr	r3, [r3, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d014      	beq.n	800d804 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d7da:	7dfa      	ldrb	r2, [r7, #23]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d7e2:	7dfa      	ldrb	r2, [r7, #23]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	32ae      	adds	r2, #174	; 0xae
 800d7e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7ec:	695b      	ldr	r3, [r3, #20]
 800d7ee:	7afa      	ldrb	r2, [r7, #11]
 800d7f0:	4611      	mov	r1, r2
 800d7f2:	68f8      	ldr	r0, [r7, #12]
 800d7f4:	4798      	blx	r3
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d7fa:	7dbb      	ldrb	r3, [r7, #22]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d800:	7dbb      	ldrb	r3, [r7, #22]
 800d802:	e000      	b.n	800d806 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d804:	2300      	movs	r3, #0
}
 800d806:	4618      	mov	r0, r3
 800d808:	3718      	adds	r7, #24
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}

0800d80e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d80e:	b580      	push	{r7, lr}
 800d810:	b084      	sub	sp, #16
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	2200      	movs	r2, #0
 800d826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2200      	movs	r2, #0
 800d834:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d846:	2b00      	cmp	r3, #0
 800d848:	d014      	beq.n	800d874 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00e      	beq.n	800d874 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	6852      	ldr	r2, [r2, #4]
 800d862:	b2d2      	uxtb	r2, r2
 800d864:	4611      	mov	r1, r2
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	4798      	blx	r3
 800d86a:	4603      	mov	r3, r0
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d870:	2303      	movs	r3, #3
 800d872:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d874:	2340      	movs	r3, #64	; 0x40
 800d876:	2200      	movs	r2, #0
 800d878:	2100      	movs	r1, #0
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 fc01 	bl	800f082 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2201      	movs	r2, #1
 800d884:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2240      	movs	r2, #64	; 0x40
 800d88c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	2200      	movs	r2, #0
 800d894:	2180      	movs	r1, #128	; 0x80
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f001 fbf3 	bl	800f082 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2201      	movs	r2, #1
 800d8a0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2240      	movs	r2, #64	; 0x40
 800d8a6:	621a      	str	r2, [r3, #32]

  return ret;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}

0800d8b2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8b2:	b480      	push	{r7}
 800d8b4:	b083      	sub	sp, #12
 800d8b6:	af00      	add	r7, sp, #0
 800d8b8:	6078      	str	r0, [r7, #4]
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	78fa      	ldrb	r2, [r7, #3]
 800d8c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8c4:	2300      	movs	r3, #0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d8d2:	b480      	push	{r7}
 800d8d4:	b083      	sub	sp, #12
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e0:	b2da      	uxtb	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2204      	movs	r2, #4
 800d8ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	370c      	adds	r7, #12
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fc:	4770      	bx	lr

0800d8fe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d8fe:	b480      	push	{r7}
 800d900:	b083      	sub	sp, #12
 800d902:	af00      	add	r7, sp, #0
 800d904:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b04      	cmp	r3, #4
 800d910:	d106      	bne.n	800d920 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	2b03      	cmp	r3, #3
 800d940:	d110      	bne.n	800d964 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00b      	beq.n	800d964 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d952:	69db      	ldr	r3, [r3, #28]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d005      	beq.n	800d964 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3708      	adds	r7, #8
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b082      	sub	sp, #8
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
 800d976:	460b      	mov	r3, r1
 800d978:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	32ae      	adds	r2, #174	; 0xae
 800d984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e01c      	b.n	800d9ca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d996:	b2db      	uxtb	r3, r3
 800d998:	2b03      	cmp	r3, #3
 800d99a:	d115      	bne.n	800d9c8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	32ae      	adds	r2, #174	; 0xae
 800d9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00b      	beq.n	800d9c8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	32ae      	adds	r2, #174	; 0xae
 800d9ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	78fa      	ldrb	r2, [r7, #3]
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3708      	adds	r7, #8
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b082      	sub	sp, #8
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
 800d9da:	460b      	mov	r3, r1
 800d9dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	32ae      	adds	r2, #174	; 0xae
 800d9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d101      	bne.n	800d9f4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9f0:	2303      	movs	r3, #3
 800d9f2:	e01c      	b.n	800da2e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	2b03      	cmp	r3, #3
 800d9fe:	d115      	bne.n	800da2c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	32ae      	adds	r2, #174	; 0xae
 800da0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	32ae      	adds	r2, #174	; 0xae
 800da1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da24:	78fa      	ldrb	r2, [r7, #3]
 800da26:	4611      	mov	r1, r2
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da2c:	2300      	movs	r3, #0
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da36:	b480      	push	{r7}
 800da38:	b083      	sub	sp, #12
 800da3a:	af00      	add	r7, sp, #0
 800da3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da3e:	2300      	movs	r3, #0
}
 800da40:	4618      	mov	r0, r3
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da66:	2b00      	cmp	r3, #0
 800da68:	d00e      	beq.n	800da88 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	6852      	ldr	r2, [r2, #4]
 800da76:	b2d2      	uxtb	r2, r2
 800da78:	4611      	mov	r1, r2
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	4798      	blx	r3
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800da84:	2303      	movs	r3, #3
 800da86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da88:	7bfb      	ldrb	r3, [r7, #15]
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800da92:	b480      	push	{r7}
 800da94:	b083      	sub	sp, #12
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
 800da9a:	460b      	mov	r3, r1
 800da9c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800da9e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dab8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800daba:	4618      	mov	r0, r3
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b086      	sub	sp, #24
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	460b      	mov	r3, r1
 800dad0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dada:	2300      	movs	r3, #0
 800dadc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	885b      	ldrh	r3, [r3, #2]
 800dae2:	b29a      	uxth	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	b29b      	uxth	r3, r3
 800daea:	429a      	cmp	r2, r3
 800daec:	d920      	bls.n	800db30 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800daf6:	e013      	b.n	800db20 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800daf8:	f107 030a 	add.w	r3, r7, #10
 800dafc:	4619      	mov	r1, r3
 800dafe:	6978      	ldr	r0, [r7, #20]
 800db00:	f000 f81b 	bl	800db3a <USBD_GetNextDesc>
 800db04:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	785b      	ldrb	r3, [r3, #1]
 800db0a:	2b05      	cmp	r3, #5
 800db0c:	d108      	bne.n	800db20 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	789b      	ldrb	r3, [r3, #2]
 800db16:	78fa      	ldrb	r2, [r7, #3]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d008      	beq.n	800db2e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db1c:	2300      	movs	r3, #0
 800db1e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	885b      	ldrh	r3, [r3, #2]
 800db24:	b29a      	uxth	r2, r3
 800db26:	897b      	ldrh	r3, [r7, #10]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d8e5      	bhi.n	800daf8 <USBD_GetEpDesc+0x32>
 800db2c:	e000      	b.n	800db30 <USBD_GetEpDesc+0x6a>
          break;
 800db2e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db30:	693b      	ldr	r3, [r7, #16]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db3a:	b480      	push	{r7}
 800db3c:	b085      	sub	sp, #20
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	881a      	ldrh	r2, [r3, #0]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	b29b      	uxth	r3, r3
 800db52:	4413      	add	r3, r2
 800db54:	b29a      	uxth	r2, r3
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	4413      	add	r3, r2
 800db64:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800db66:	68fb      	ldr	r3, [r7, #12]
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3714      	adds	r7, #20
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr

0800db74 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db74:	b480      	push	{r7}
 800db76:	b087      	sub	sp, #28
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	3301      	adds	r3, #1
 800db8a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	781b      	ldrb	r3, [r3, #0]
 800db90:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db92:	8a3b      	ldrh	r3, [r7, #16]
 800db94:	021b      	lsls	r3, r3, #8
 800db96:	b21a      	sxth	r2, r3
 800db98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db9c:	4313      	orrs	r3, r2
 800db9e:	b21b      	sxth	r3, r3
 800dba0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dba2:	89fb      	ldrh	r3, [r7, #14]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	371c      	adds	r7, #28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	781b      	ldrb	r3, [r3, #0]
 800dbc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbc6:	2b40      	cmp	r3, #64	; 0x40
 800dbc8:	d005      	beq.n	800dbd6 <USBD_StdDevReq+0x26>
 800dbca:	2b40      	cmp	r3, #64	; 0x40
 800dbcc:	d857      	bhi.n	800dc7e <USBD_StdDevReq+0xce>
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00f      	beq.n	800dbf2 <USBD_StdDevReq+0x42>
 800dbd2:	2b20      	cmp	r3, #32
 800dbd4:	d153      	bne.n	800dc7e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	32ae      	adds	r2, #174	; 0xae
 800dbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	6839      	ldr	r1, [r7, #0]
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	4798      	blx	r3
 800dbec:	4603      	mov	r3, r0
 800dbee:	73fb      	strb	r3, [r7, #15]
      break;
 800dbf0:	e04a      	b.n	800dc88 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dbf2:	683b      	ldr	r3, [r7, #0]
 800dbf4:	785b      	ldrb	r3, [r3, #1]
 800dbf6:	2b09      	cmp	r3, #9
 800dbf8:	d83b      	bhi.n	800dc72 <USBD_StdDevReq+0xc2>
 800dbfa:	a201      	add	r2, pc, #4	; (adr r2, 800dc00 <USBD_StdDevReq+0x50>)
 800dbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc00:	0800dc55 	.word	0x0800dc55
 800dc04:	0800dc69 	.word	0x0800dc69
 800dc08:	0800dc73 	.word	0x0800dc73
 800dc0c:	0800dc5f 	.word	0x0800dc5f
 800dc10:	0800dc73 	.word	0x0800dc73
 800dc14:	0800dc33 	.word	0x0800dc33
 800dc18:	0800dc29 	.word	0x0800dc29
 800dc1c:	0800dc73 	.word	0x0800dc73
 800dc20:	0800dc4b 	.word	0x0800dc4b
 800dc24:	0800dc3d 	.word	0x0800dc3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fa3c 	bl	800e0a8 <USBD_GetDescriptor>
          break;
 800dc30:	e024      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc32:	6839      	ldr	r1, [r7, #0]
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fba1 	bl	800e37c <USBD_SetAddress>
          break;
 800dc3a:	e01f      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f000 fbe0 	bl	800e404 <USBD_SetConfig>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]
          break;
 800dc48:	e018      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f000 fc83 	bl	800e558 <USBD_GetConfig>
          break;
 800dc52:	e013      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f000 fcb4 	bl	800e5c4 <USBD_GetStatus>
          break;
 800dc5c:	e00e      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fce3 	bl	800e62c <USBD_SetFeature>
          break;
 800dc66:	e009      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc68:	6839      	ldr	r1, [r7, #0]
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 fd07 	bl	800e67e <USBD_ClrFeature>
          break;
 800dc70:	e004      	b.n	800dc7c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dc72:	6839      	ldr	r1, [r7, #0]
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f000 fd5e 	bl	800e736 <USBD_CtlError>
          break;
 800dc7a:	bf00      	nop
      }
      break;
 800dc7c:	e004      	b.n	800dc88 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dc7e:	6839      	ldr	r1, [r7, #0]
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fd58 	bl	800e736 <USBD_CtlError>
      break;
 800dc86:	bf00      	nop
  }

  return ret;
 800dc88:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3710      	adds	r7, #16
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop

0800dc94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	781b      	ldrb	r3, [r3, #0]
 800dca6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dcaa:	2b40      	cmp	r3, #64	; 0x40
 800dcac:	d005      	beq.n	800dcba <USBD_StdItfReq+0x26>
 800dcae:	2b40      	cmp	r3, #64	; 0x40
 800dcb0:	d852      	bhi.n	800dd58 <USBD_StdItfReq+0xc4>
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <USBD_StdItfReq+0x26>
 800dcb6:	2b20      	cmp	r3, #32
 800dcb8:	d14e      	bne.n	800dd58 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	2b02      	cmp	r3, #2
 800dcc6:	d840      	bhi.n	800dd4a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	889b      	ldrh	r3, [r3, #4]
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d836      	bhi.n	800dd40 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	889b      	ldrh	r3, [r3, #4]
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff fed9 	bl	800da92 <USBD_CoreFindIF>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dce4:	7bbb      	ldrb	r3, [r7, #14]
 800dce6:	2bff      	cmp	r3, #255	; 0xff
 800dce8:	d01d      	beq.n	800dd26 <USBD_StdItfReq+0x92>
 800dcea:	7bbb      	ldrb	r3, [r7, #14]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d11a      	bne.n	800dd26 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dcf0:	7bba      	ldrb	r2, [r7, #14]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	32ae      	adds	r2, #174	; 0xae
 800dcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00f      	beq.n	800dd20 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd00:	7bba      	ldrb	r2, [r7, #14]
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd08:	7bba      	ldrb	r2, [r7, #14]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	32ae      	adds	r2, #174	; 0xae
 800dd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	6839      	ldr	r1, [r7, #0]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	4798      	blx	r3
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd1e:	e004      	b.n	800dd2a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd20:	2303      	movs	r3, #3
 800dd22:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd24:	e001      	b.n	800dd2a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd26:	2303      	movs	r3, #3
 800dd28:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	88db      	ldrh	r3, [r3, #6]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d110      	bne.n	800dd54 <USBD_StdItfReq+0xc0>
 800dd32:	7bfb      	ldrb	r3, [r7, #15]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d10d      	bne.n	800dd54 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fdc7 	bl	800e8cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd3e:	e009      	b.n	800dd54 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fcf7 	bl	800e736 <USBD_CtlError>
          break;
 800dd48:	e004      	b.n	800dd54 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dd4a:	6839      	ldr	r1, [r7, #0]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f000 fcf2 	bl	800e736 <USBD_CtlError>
          break;
 800dd52:	e000      	b.n	800dd56 <USBD_StdItfReq+0xc2>
          break;
 800dd54:	bf00      	nop
      }
      break;
 800dd56:	e004      	b.n	800dd62 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fceb 	bl	800e736 <USBD_CtlError>
      break;
 800dd60:	bf00      	nop
  }

  return ret;
 800dd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3710      	adds	r7, #16
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd76:	2300      	movs	r3, #0
 800dd78:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	889b      	ldrh	r3, [r3, #4]
 800dd7e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd88:	2b40      	cmp	r3, #64	; 0x40
 800dd8a:	d007      	beq.n	800dd9c <USBD_StdEPReq+0x30>
 800dd8c:	2b40      	cmp	r3, #64	; 0x40
 800dd8e:	f200 817f 	bhi.w	800e090 <USBD_StdEPReq+0x324>
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02a      	beq.n	800ddec <USBD_StdEPReq+0x80>
 800dd96:	2b20      	cmp	r3, #32
 800dd98:	f040 817a 	bne.w	800e090 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dd9c:	7bbb      	ldrb	r3, [r7, #14]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff fe83 	bl	800daac <USBD_CoreFindEP>
 800dda6:	4603      	mov	r3, r0
 800dda8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddaa:	7b7b      	ldrb	r3, [r7, #13]
 800ddac:	2bff      	cmp	r3, #255	; 0xff
 800ddae:	f000 8174 	beq.w	800e09a <USBD_StdEPReq+0x32e>
 800ddb2:	7b7b      	ldrb	r3, [r7, #13]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f040 8170 	bne.w	800e09a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ddba:	7b7a      	ldrb	r2, [r7, #13]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ddc2:	7b7a      	ldrb	r2, [r7, #13]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	32ae      	adds	r2, #174	; 0xae
 800ddc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8163 	beq.w	800e09a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ddd4:	7b7a      	ldrb	r2, [r7, #13]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	32ae      	adds	r2, #174	; 0xae
 800ddda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	6839      	ldr	r1, [r7, #0]
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	4798      	blx	r3
 800dde6:	4603      	mov	r3, r0
 800dde8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ddea:	e156      	b.n	800e09a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	2b03      	cmp	r3, #3
 800ddf2:	d008      	beq.n	800de06 <USBD_StdEPReq+0x9a>
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	f300 8145 	bgt.w	800e084 <USBD_StdEPReq+0x318>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	f000 809b 	beq.w	800df36 <USBD_StdEPReq+0x1ca>
 800de00:	2b01      	cmp	r3, #1
 800de02:	d03c      	beq.n	800de7e <USBD_StdEPReq+0x112>
 800de04:	e13e      	b.n	800e084 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de0c:	b2db      	uxtb	r3, r3
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d002      	beq.n	800de18 <USBD_StdEPReq+0xac>
 800de12:	2b03      	cmp	r3, #3
 800de14:	d016      	beq.n	800de44 <USBD_StdEPReq+0xd8>
 800de16:	e02c      	b.n	800de72 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de18:	7bbb      	ldrb	r3, [r7, #14]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <USBD_StdEPReq+0xce>
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	2b80      	cmp	r3, #128	; 0x80
 800de22:	d00a      	beq.n	800de3a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 f96f 	bl	800f10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de2e:	2180      	movs	r1, #128	; 0x80
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f001 f96b 	bl	800f10c <USBD_LL_StallEP>
 800de36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de38:	e020      	b.n	800de7c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de3a:	6839      	ldr	r1, [r7, #0]
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 fc7a 	bl	800e736 <USBD_CtlError>
              break;
 800de42:	e01b      	b.n	800de7c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	885b      	ldrh	r3, [r3, #2]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d10e      	bne.n	800de6a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de4c:	7bbb      	ldrb	r3, [r7, #14]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d00b      	beq.n	800de6a <USBD_StdEPReq+0xfe>
 800de52:	7bbb      	ldrb	r3, [r7, #14]
 800de54:	2b80      	cmp	r3, #128	; 0x80
 800de56:	d008      	beq.n	800de6a <USBD_StdEPReq+0xfe>
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	88db      	ldrh	r3, [r3, #6]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d104      	bne.n	800de6a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800de60:	7bbb      	ldrb	r3, [r7, #14]
 800de62:	4619      	mov	r1, r3
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f001 f951 	bl	800f10c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 fd2e 	bl	800e8cc <USBD_CtlSendStatus>

              break;
 800de70:	e004      	b.n	800de7c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fc5e 	bl	800e736 <USBD_CtlError>
              break;
 800de7a:	bf00      	nop
          }
          break;
 800de7c:	e107      	b.n	800e08e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b02      	cmp	r3, #2
 800de88:	d002      	beq.n	800de90 <USBD_StdEPReq+0x124>
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d016      	beq.n	800debc <USBD_StdEPReq+0x150>
 800de8e:	e04b      	b.n	800df28 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00d      	beq.n	800deb2 <USBD_StdEPReq+0x146>
 800de96:	7bbb      	ldrb	r3, [r7, #14]
 800de98:	2b80      	cmp	r3, #128	; 0x80
 800de9a:	d00a      	beq.n	800deb2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	4619      	mov	r1, r3
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f001 f933 	bl	800f10c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dea6:	2180      	movs	r1, #128	; 0x80
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f001 f92f 	bl	800f10c <USBD_LL_StallEP>
 800deae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800deb0:	e040      	b.n	800df34 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800deb2:	6839      	ldr	r1, [r7, #0]
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fc3e 	bl	800e736 <USBD_CtlError>
              break;
 800deba:	e03b      	b.n	800df34 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	885b      	ldrh	r3, [r3, #2]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d136      	bne.n	800df32 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dec4:	7bbb      	ldrb	r3, [r7, #14]
 800dec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800deca:	2b00      	cmp	r3, #0
 800decc:	d004      	beq.n	800ded8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dece:	7bbb      	ldrb	r3, [r7, #14]
 800ded0:	4619      	mov	r1, r3
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f001 f939 	bl	800f14a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 fcf7 	bl	800e8cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dede:	7bbb      	ldrb	r3, [r7, #14]
 800dee0:	4619      	mov	r1, r3
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f7ff fde2 	bl	800daac <USBD_CoreFindEP>
 800dee8:	4603      	mov	r3, r0
 800deea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800deec:	7b7b      	ldrb	r3, [r7, #13]
 800deee:	2bff      	cmp	r3, #255	; 0xff
 800def0:	d01f      	beq.n	800df32 <USBD_StdEPReq+0x1c6>
 800def2:	7b7b      	ldrb	r3, [r7, #13]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d11c      	bne.n	800df32 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800def8:	7b7a      	ldrb	r2, [r7, #13]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df00:	7b7a      	ldrb	r2, [r7, #13]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	32ae      	adds	r2, #174	; 0xae
 800df06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df0a:	689b      	ldr	r3, [r3, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d010      	beq.n	800df32 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df10:	7b7a      	ldrb	r2, [r7, #13]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	32ae      	adds	r2, #174	; 0xae
 800df16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1a:	689b      	ldr	r3, [r3, #8]
 800df1c:	6839      	ldr	r1, [r7, #0]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	4798      	blx	r3
 800df22:	4603      	mov	r3, r0
 800df24:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df26:	e004      	b.n	800df32 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df28:	6839      	ldr	r1, [r7, #0]
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fc03 	bl	800e736 <USBD_CtlError>
              break;
 800df30:	e000      	b.n	800df34 <USBD_StdEPReq+0x1c8>
              break;
 800df32:	bf00      	nop
          }
          break;
 800df34:	e0ab      	b.n	800e08e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df3c:	b2db      	uxtb	r3, r3
 800df3e:	2b02      	cmp	r3, #2
 800df40:	d002      	beq.n	800df48 <USBD_StdEPReq+0x1dc>
 800df42:	2b03      	cmp	r3, #3
 800df44:	d032      	beq.n	800dfac <USBD_StdEPReq+0x240>
 800df46:	e097      	b.n	800e078 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d007      	beq.n	800df5e <USBD_StdEPReq+0x1f2>
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	2b80      	cmp	r3, #128	; 0x80
 800df52:	d004      	beq.n	800df5e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800df54:	6839      	ldr	r1, [r7, #0]
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f000 fbed 	bl	800e736 <USBD_CtlError>
                break;
 800df5c:	e091      	b.n	800e082 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df62:	2b00      	cmp	r3, #0
 800df64:	da0b      	bge.n	800df7e <USBD_StdEPReq+0x212>
 800df66:	7bbb      	ldrb	r3, [r7, #14]
 800df68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df6c:	4613      	mov	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	4413      	add	r3, r2
 800df72:	009b      	lsls	r3, r3, #2
 800df74:	3310      	adds	r3, #16
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	4413      	add	r3, r2
 800df7a:	3304      	adds	r3, #4
 800df7c:	e00b      	b.n	800df96 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df7e:	7bbb      	ldrb	r3, [r7, #14]
 800df80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df84:	4613      	mov	r3, r2
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	4413      	add	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	4413      	add	r3, r2
 800df94:	3304      	adds	r3, #4
 800df96:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2200      	movs	r2, #0
 800df9c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	2202      	movs	r2, #2
 800dfa2:	4619      	mov	r1, r3
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fc37 	bl	800e818 <USBD_CtlSendData>
              break;
 800dfaa:	e06a      	b.n	800e082 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dfac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	da11      	bge.n	800dfd8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dfb4:	7bbb      	ldrb	r3, [r7, #14]
 800dfb6:	f003 020f 	and.w	r2, r3, #15
 800dfba:	6879      	ldr	r1, [r7, #4]
 800dfbc:	4613      	mov	r3, r2
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	4413      	add	r3, r2
 800dfc2:	009b      	lsls	r3, r3, #2
 800dfc4:	440b      	add	r3, r1
 800dfc6:	3324      	adds	r3, #36	; 0x24
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d117      	bne.n	800dffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dfce:	6839      	ldr	r1, [r7, #0]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f000 fbb0 	bl	800e736 <USBD_CtlError>
                  break;
 800dfd6:	e054      	b.n	800e082 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	f003 020f 	and.w	r2, r3, #15
 800dfde:	6879      	ldr	r1, [r7, #4]
 800dfe0:	4613      	mov	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	4413      	add	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	440b      	add	r3, r1
 800dfea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfee:	881b      	ldrh	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d104      	bne.n	800dffe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f000 fb9d 	bl	800e736 <USBD_CtlError>
                  break;
 800dffc:	e041      	b.n	800e082 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e002:	2b00      	cmp	r3, #0
 800e004:	da0b      	bge.n	800e01e <USBD_StdEPReq+0x2b2>
 800e006:	7bbb      	ldrb	r3, [r7, #14]
 800e008:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e00c:	4613      	mov	r3, r2
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	3310      	adds	r3, #16
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	4413      	add	r3, r2
 800e01a:	3304      	adds	r3, #4
 800e01c:	e00b      	b.n	800e036 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e01e:	7bbb      	ldrb	r3, [r7, #14]
 800e020:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e024:	4613      	mov	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	4413      	add	r3, r2
 800e034:	3304      	adds	r3, #4
 800e036:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e038:	7bbb      	ldrb	r3, [r7, #14]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d002      	beq.n	800e044 <USBD_StdEPReq+0x2d8>
 800e03e:	7bbb      	ldrb	r3, [r7, #14]
 800e040:	2b80      	cmp	r3, #128	; 0x80
 800e042:	d103      	bne.n	800e04c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	e00e      	b.n	800e06a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e04c:	7bbb      	ldrb	r3, [r7, #14]
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f001 f899 	bl	800f188 <USBD_LL_IsStallEP>
 800e056:	4603      	mov	r3, r0
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d003      	beq.n	800e064 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	2201      	movs	r2, #1
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	e002      	b.n	800e06a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	2200      	movs	r2, #0
 800e068:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	2202      	movs	r2, #2
 800e06e:	4619      	mov	r1, r3
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fbd1 	bl	800e818 <USBD_CtlSendData>
              break;
 800e076:	e004      	b.n	800e082 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f000 fb5b 	bl	800e736 <USBD_CtlError>
              break;
 800e080:	bf00      	nop
          }
          break;
 800e082:	e004      	b.n	800e08e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e084:	6839      	ldr	r1, [r7, #0]
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f000 fb55 	bl	800e736 <USBD_CtlError>
          break;
 800e08c:	bf00      	nop
      }
      break;
 800e08e:	e005      	b.n	800e09c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e090:	6839      	ldr	r1, [r7, #0]
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 fb4f 	bl	800e736 <USBD_CtlError>
      break;
 800e098:	e000      	b.n	800e09c <USBD_StdEPReq+0x330>
      break;
 800e09a:	bf00      	nop
  }

  return ret;
 800e09c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e09e:	4618      	mov	r0, r3
 800e0a0:	3710      	adds	r7, #16
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
	...

0800e0a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b084      	sub	sp, #16
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	885b      	ldrh	r3, [r3, #2]
 800e0c2:	0a1b      	lsrs	r3, r3, #8
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	2b06      	cmp	r3, #6
 800e0ca:	f200 8128 	bhi.w	800e31e <USBD_GetDescriptor+0x276>
 800e0ce:	a201      	add	r2, pc, #4	; (adr r2, 800e0d4 <USBD_GetDescriptor+0x2c>)
 800e0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d4:	0800e0f1 	.word	0x0800e0f1
 800e0d8:	0800e109 	.word	0x0800e109
 800e0dc:	0800e149 	.word	0x0800e149
 800e0e0:	0800e31f 	.word	0x0800e31f
 800e0e4:	0800e31f 	.word	0x0800e31f
 800e0e8:	0800e2bf 	.word	0x0800e2bf
 800e0ec:	0800e2eb 	.word	0x0800e2eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	7c12      	ldrb	r2, [r2, #16]
 800e0fc:	f107 0108 	add.w	r1, r7, #8
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
 800e104:	60f8      	str	r0, [r7, #12]
      break;
 800e106:	e112      	b.n	800e32e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	7c1b      	ldrb	r3, [r3, #16]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d10d      	bne.n	800e12c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e118:	f107 0208 	add.w	r2, r7, #8
 800e11c:	4610      	mov	r0, r2
 800e11e:	4798      	blx	r3
 800e120:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3301      	adds	r3, #1
 800e126:	2202      	movs	r2, #2
 800e128:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e12a:	e100      	b.n	800e32e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e134:	f107 0208 	add.w	r2, r7, #8
 800e138:	4610      	mov	r0, r2
 800e13a:	4798      	blx	r3
 800e13c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3301      	adds	r3, #1
 800e142:	2202      	movs	r2, #2
 800e144:	701a      	strb	r2, [r3, #0]
      break;
 800e146:	e0f2      	b.n	800e32e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	885b      	ldrh	r3, [r3, #2]
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b05      	cmp	r3, #5
 800e150:	f200 80ac 	bhi.w	800e2ac <USBD_GetDescriptor+0x204>
 800e154:	a201      	add	r2, pc, #4	; (adr r2, 800e15c <USBD_GetDescriptor+0xb4>)
 800e156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e15a:	bf00      	nop
 800e15c:	0800e175 	.word	0x0800e175
 800e160:	0800e1a9 	.word	0x0800e1a9
 800e164:	0800e1dd 	.word	0x0800e1dd
 800e168:	0800e211 	.word	0x0800e211
 800e16c:	0800e245 	.word	0x0800e245
 800e170:	0800e279 	.word	0x0800e279
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d00b      	beq.n	800e198 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	687a      	ldr	r2, [r7, #4]
 800e18a:	7c12      	ldrb	r2, [r2, #16]
 800e18c:	f107 0108 	add.w	r1, r7, #8
 800e190:	4610      	mov	r0, r2
 800e192:	4798      	blx	r3
 800e194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e196:	e091      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 facb 	bl	800e736 <USBD_CtlError>
            err++;
 800e1a0:	7afb      	ldrb	r3, [r7, #11]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e1a6:	e089      	b.n	800e2bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	689b      	ldr	r3, [r3, #8]
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	7c12      	ldrb	r2, [r2, #16]
 800e1c0:	f107 0108 	add.w	r1, r7, #8
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
 800e1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1ca:	e077      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f000 fab1 	bl	800e736 <USBD_CtlError>
            err++;
 800e1d4:	7afb      	ldrb	r3, [r7, #11]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e1da:	e06f      	b.n	800e2bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00b      	beq.n	800e200 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ee:	68db      	ldr	r3, [r3, #12]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	7c12      	ldrb	r2, [r2, #16]
 800e1f4:	f107 0108 	add.w	r1, r7, #8
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4798      	blx	r3
 800e1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e1fe:	e05d      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e200:	6839      	ldr	r1, [r7, #0]
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f000 fa97 	bl	800e736 <USBD_CtlError>
            err++;
 800e208:	7afb      	ldrb	r3, [r7, #11]
 800e20a:	3301      	adds	r3, #1
 800e20c:	72fb      	strb	r3, [r7, #11]
          break;
 800e20e:	e055      	b.n	800e2bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e216:	691b      	ldr	r3, [r3, #16]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00b      	beq.n	800e234 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e222:	691b      	ldr	r3, [r3, #16]
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	7c12      	ldrb	r2, [r2, #16]
 800e228:	f107 0108 	add.w	r1, r7, #8
 800e22c:	4610      	mov	r0, r2
 800e22e:	4798      	blx	r3
 800e230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e232:	e043      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fa7d 	bl	800e736 <USBD_CtlError>
            err++;
 800e23c:	7afb      	ldrb	r3, [r7, #11]
 800e23e:	3301      	adds	r3, #1
 800e240:	72fb      	strb	r3, [r7, #11]
          break;
 800e242:	e03b      	b.n	800e2bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e24a:	695b      	ldr	r3, [r3, #20]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00b      	beq.n	800e268 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e256:	695b      	ldr	r3, [r3, #20]
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	7c12      	ldrb	r2, [r2, #16]
 800e25c:	f107 0108 	add.w	r1, r7, #8
 800e260:	4610      	mov	r0, r2
 800e262:	4798      	blx	r3
 800e264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e266:	e029      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e268:	6839      	ldr	r1, [r7, #0]
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f000 fa63 	bl	800e736 <USBD_CtlError>
            err++;
 800e270:	7afb      	ldrb	r3, [r7, #11]
 800e272:	3301      	adds	r3, #1
 800e274:	72fb      	strb	r3, [r7, #11]
          break;
 800e276:	e021      	b.n	800e2bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e27e:	699b      	ldr	r3, [r3, #24]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d00b      	beq.n	800e29c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
 800e298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e29a:	e00f      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f000 fa49 	bl	800e736 <USBD_CtlError>
            err++;
 800e2a4:	7afb      	ldrb	r3, [r7, #11]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2aa:	e007      	b.n	800e2bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f000 fa41 	bl	800e736 <USBD_CtlError>
          err++;
 800e2b4:	7afb      	ldrb	r3, [r7, #11]
 800e2b6:	3301      	adds	r3, #1
 800e2b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e2ba:	bf00      	nop
      }
      break;
 800e2bc:	e037      	b.n	800e32e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	7c1b      	ldrb	r3, [r3, #16]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d109      	bne.n	800e2da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ce:	f107 0208 	add.w	r2, r7, #8
 800e2d2:	4610      	mov	r0, r2
 800e2d4:	4798      	blx	r3
 800e2d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e2d8:	e029      	b.n	800e32e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 fa2a 	bl	800e736 <USBD_CtlError>
        err++;
 800e2e2:	7afb      	ldrb	r3, [r7, #11]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e2e8:	e021      	b.n	800e32e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	7c1b      	ldrb	r3, [r3, #16]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d10d      	bne.n	800e30e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2fa:	f107 0208 	add.w	r2, r7, #8
 800e2fe:	4610      	mov	r0, r2
 800e300:	4798      	blx	r3
 800e302:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	3301      	adds	r3, #1
 800e308:	2207      	movs	r2, #7
 800e30a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e30c:	e00f      	b.n	800e32e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e30e:	6839      	ldr	r1, [r7, #0]
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f000 fa10 	bl	800e736 <USBD_CtlError>
        err++;
 800e316:	7afb      	ldrb	r3, [r7, #11]
 800e318:	3301      	adds	r3, #1
 800e31a:	72fb      	strb	r3, [r7, #11]
      break;
 800e31c:	e007      	b.n	800e32e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e31e:	6839      	ldr	r1, [r7, #0]
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 fa08 	bl	800e736 <USBD_CtlError>
      err++;
 800e326:	7afb      	ldrb	r3, [r7, #11]
 800e328:	3301      	adds	r3, #1
 800e32a:	72fb      	strb	r3, [r7, #11]
      break;
 800e32c:	bf00      	nop
  }

  if (err != 0U)
 800e32e:	7afb      	ldrb	r3, [r7, #11]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d11e      	bne.n	800e372 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	88db      	ldrh	r3, [r3, #6]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d016      	beq.n	800e36a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e33c:	893b      	ldrh	r3, [r7, #8]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00e      	beq.n	800e360 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	88da      	ldrh	r2, [r3, #6]
 800e346:	893b      	ldrh	r3, [r7, #8]
 800e348:	4293      	cmp	r3, r2
 800e34a:	bf28      	it	cs
 800e34c:	4613      	movcs	r3, r2
 800e34e:	b29b      	uxth	r3, r3
 800e350:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e352:	893b      	ldrh	r3, [r7, #8]
 800e354:	461a      	mov	r2, r3
 800e356:	68f9      	ldr	r1, [r7, #12]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fa5d 	bl	800e818 <USBD_CtlSendData>
 800e35e:	e009      	b.n	800e374 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f9e7 	bl	800e736 <USBD_CtlError>
 800e368:	e004      	b.n	800e374 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 faae 	bl	800e8cc <USBD_CtlSendStatus>
 800e370:	e000      	b.n	800e374 <USBD_GetDescriptor+0x2cc>
    return;
 800e372:	bf00      	nop
  }
}
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop

0800e37c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	889b      	ldrh	r3, [r3, #4]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d131      	bne.n	800e3f2 <USBD_SetAddress+0x76>
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	88db      	ldrh	r3, [r3, #6]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d12d      	bne.n	800e3f2 <USBD_SetAddress+0x76>
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	885b      	ldrh	r3, [r3, #2]
 800e39a:	2b7f      	cmp	r3, #127	; 0x7f
 800e39c:	d829      	bhi.n	800e3f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	885b      	ldrh	r3, [r3, #2]
 800e3a2:	b2db      	uxtb	r3, r3
 800e3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e3a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d104      	bne.n	800e3c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f9bc 	bl	800e736 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3be:	e01d      	b.n	800e3fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	7bfa      	ldrb	r2, [r7, #15]
 800e3c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e3c8:	7bfb      	ldrb	r3, [r7, #15]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f000 ff07 	bl	800f1e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 fa7a 	bl	800e8cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e3d8:	7bfb      	ldrb	r3, [r7, #15]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d004      	beq.n	800e3e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3e6:	e009      	b.n	800e3fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3f0:	e004      	b.n	800e3fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e3f2:	6839      	ldr	r1, [r7, #0]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f99e 	bl	800e736 <USBD_CtlError>
  }
}
 800e3fa:	bf00      	nop
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b084      	sub	sp, #16
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	885b      	ldrh	r3, [r3, #2]
 800e416:	b2da      	uxtb	r2, r3
 800e418:	4b4e      	ldr	r3, [pc, #312]	; (800e554 <USBD_SetConfig+0x150>)
 800e41a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e41c:	4b4d      	ldr	r3, [pc, #308]	; (800e554 <USBD_SetConfig+0x150>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d905      	bls.n	800e430 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f000 f985 	bl	800e736 <USBD_CtlError>
    return USBD_FAIL;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e08c      	b.n	800e54a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e436:	b2db      	uxtb	r3, r3
 800e438:	2b02      	cmp	r3, #2
 800e43a:	d002      	beq.n	800e442 <USBD_SetConfig+0x3e>
 800e43c:	2b03      	cmp	r3, #3
 800e43e:	d029      	beq.n	800e494 <USBD_SetConfig+0x90>
 800e440:	e075      	b.n	800e52e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e442:	4b44      	ldr	r3, [pc, #272]	; (800e554 <USBD_SetConfig+0x150>)
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d020      	beq.n	800e48c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e44a:	4b42      	ldr	r3, [pc, #264]	; (800e554 <USBD_SetConfig+0x150>)
 800e44c:	781b      	ldrb	r3, [r3, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e454:	4b3f      	ldr	r3, [pc, #252]	; (800e554 <USBD_SetConfig+0x150>)
 800e456:	781b      	ldrb	r3, [r3, #0]
 800e458:	4619      	mov	r1, r3
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f7fe ffe7 	bl	800d42e <USBD_SetClassConfig>
 800e460:	4603      	mov	r3, r0
 800e462:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e464:	7bfb      	ldrb	r3, [r7, #15]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d008      	beq.n	800e47c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f962 	bl	800e736 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2202      	movs	r2, #2
 800e476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e47a:	e065      	b.n	800e548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fa25 	bl	800e8cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2203      	movs	r2, #3
 800e486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e48a:	e05d      	b.n	800e548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 fa1d 	bl	800e8cc <USBD_CtlSendStatus>
      break;
 800e492:	e059      	b.n	800e548 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e494:	4b2f      	ldr	r3, [pc, #188]	; (800e554 <USBD_SetConfig+0x150>)
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d112      	bne.n	800e4c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2202      	movs	r2, #2
 800e4a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e4a4:	4b2b      	ldr	r3, [pc, #172]	; (800e554 <USBD_SetConfig+0x150>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	461a      	mov	r2, r3
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e4ae:	4b29      	ldr	r3, [pc, #164]	; (800e554 <USBD_SetConfig+0x150>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7fe ffd6 	bl	800d466 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fa06 	bl	800e8cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4c0:	e042      	b.n	800e548 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e4c2:	4b24      	ldr	r3, [pc, #144]	; (800e554 <USBD_SetConfig+0x150>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d02a      	beq.n	800e526 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	b2db      	uxtb	r3, r3
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f7fe ffc4 	bl	800d466 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e4de:	4b1d      	ldr	r3, [pc, #116]	; (800e554 <USBD_SetConfig+0x150>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4e8:	4b1a      	ldr	r3, [pc, #104]	; (800e554 <USBD_SetConfig+0x150>)
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7fe ff9d 	bl	800d42e <USBD_SetClassConfig>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d00f      	beq.n	800e51e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e4fe:	6839      	ldr	r1, [r7, #0]
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 f918 	bl	800e736 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	b2db      	uxtb	r3, r3
 800e50c:	4619      	mov	r1, r3
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7fe ffa9 	bl	800d466 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2202      	movs	r2, #2
 800e518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e51c:	e014      	b.n	800e548 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f000 f9d4 	bl	800e8cc <USBD_CtlSendStatus>
      break;
 800e524:	e010      	b.n	800e548 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f9d0 	bl	800e8cc <USBD_CtlSendStatus>
      break;
 800e52c:	e00c      	b.n	800e548 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e52e:	6839      	ldr	r1, [r7, #0]
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f900 	bl	800e736 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e536:	4b07      	ldr	r3, [pc, #28]	; (800e554 <USBD_SetConfig+0x150>)
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	4619      	mov	r1, r3
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f7fe ff92 	bl	800d466 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e542:	2303      	movs	r3, #3
 800e544:	73fb      	strb	r3, [r7, #15]
      break;
 800e546:	bf00      	nop
  }

  return ret;
 800e548:	7bfb      	ldrb	r3, [r7, #15]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	20004f9c 	.word	0x20004f9c

0800e558 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	88db      	ldrh	r3, [r3, #6]
 800e566:	2b01      	cmp	r3, #1
 800e568:	d004      	beq.n	800e574 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f8e2 	bl	800e736 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e572:	e023      	b.n	800e5bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	dc02      	bgt.n	800e586 <USBD_GetConfig+0x2e>
 800e580:	2b00      	cmp	r3, #0
 800e582:	dc03      	bgt.n	800e58c <USBD_GetConfig+0x34>
 800e584:	e015      	b.n	800e5b2 <USBD_GetConfig+0x5a>
 800e586:	2b03      	cmp	r3, #3
 800e588:	d00b      	beq.n	800e5a2 <USBD_GetConfig+0x4a>
 800e58a:	e012      	b.n	800e5b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3308      	adds	r3, #8
 800e596:	2201      	movs	r2, #1
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f000 f93c 	bl	800e818 <USBD_CtlSendData>
        break;
 800e5a0:	e00c      	b.n	800e5bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	3304      	adds	r3, #4
 800e5a6:	2201      	movs	r2, #1
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 f934 	bl	800e818 <USBD_CtlSendData>
        break;
 800e5b0:	e004      	b.n	800e5bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f000 f8be 	bl	800e736 <USBD_CtlError>
        break;
 800e5ba:	bf00      	nop
}
 800e5bc:	bf00      	nop
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}

0800e5c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b082      	sub	sp, #8
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d81e      	bhi.n	800e61a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	88db      	ldrh	r3, [r3, #6]
 800e5e0:	2b02      	cmp	r3, #2
 800e5e2:	d004      	beq.n	800e5ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e5e4:	6839      	ldr	r1, [r7, #0]
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f8a5 	bl	800e736 <USBD_CtlError>
        break;
 800e5ec:	e01a      	b.n	800e624 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d005      	beq.n	800e60a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	f043 0202 	orr.w	r2, r3, #2
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	330c      	adds	r3, #12
 800e60e:	2202      	movs	r2, #2
 800e610:	4619      	mov	r1, r3
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f900 	bl	800e818 <USBD_CtlSendData>
      break;
 800e618:	e004      	b.n	800e624 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e61a:	6839      	ldr	r1, [r7, #0]
 800e61c:	6878      	ldr	r0, [r7, #4]
 800e61e:	f000 f88a 	bl	800e736 <USBD_CtlError>
      break;
 800e622:	bf00      	nop
  }
}
 800e624:	bf00      	nop
 800e626:	3708      	adds	r7, #8
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b082      	sub	sp, #8
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	885b      	ldrh	r3, [r3, #2]
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	d107      	bne.n	800e64e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f940 	bl	800e8cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e64c:	e013      	b.n	800e676 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	885b      	ldrh	r3, [r3, #2]
 800e652:	2b02      	cmp	r3, #2
 800e654:	d10b      	bne.n	800e66e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	889b      	ldrh	r3, [r3, #4]
 800e65a:	0a1b      	lsrs	r3, r3, #8
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	b2da      	uxtb	r2, r3
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f930 	bl	800e8cc <USBD_CtlSendStatus>
}
 800e66c:	e003      	b.n	800e676 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e66e:	6839      	ldr	r1, [r7, #0]
 800e670:	6878      	ldr	r0, [r7, #4]
 800e672:	f000 f860 	bl	800e736 <USBD_CtlError>
}
 800e676:	bf00      	nop
 800e678:	3708      	adds	r7, #8
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}

0800e67e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e67e:	b580      	push	{r7, lr}
 800e680:	b082      	sub	sp, #8
 800e682:	af00      	add	r7, sp, #0
 800e684:	6078      	str	r0, [r7, #4]
 800e686:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e68e:	b2db      	uxtb	r3, r3
 800e690:	3b01      	subs	r3, #1
 800e692:	2b02      	cmp	r3, #2
 800e694:	d80b      	bhi.n	800e6ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	885b      	ldrh	r3, [r3, #2]
 800e69a:	2b01      	cmp	r3, #1
 800e69c:	d10c      	bne.n	800e6b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 f910 	bl	800e8cc <USBD_CtlSendStatus>
      }
      break;
 800e6ac:	e004      	b.n	800e6b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e6ae:	6839      	ldr	r1, [r7, #0]
 800e6b0:	6878      	ldr	r0, [r7, #4]
 800e6b2:	f000 f840 	bl	800e736 <USBD_CtlError>
      break;
 800e6b6:	e000      	b.n	800e6ba <USBD_ClrFeature+0x3c>
      break;
 800e6b8:	bf00      	nop
  }
}
 800e6ba:	bf00      	nop
 800e6bc:	3708      	adds	r7, #8
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	781a      	ldrb	r2, [r3, #0]
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	781a      	ldrb	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e6ec:	68f8      	ldr	r0, [r7, #12]
 800e6ee:	f7ff fa41 	bl	800db74 <SWAPBYTE>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	3301      	adds	r3, #1
 800e704:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e706:	68f8      	ldr	r0, [r7, #12]
 800e708:	f7ff fa34 	bl	800db74 <SWAPBYTE>
 800e70c:	4603      	mov	r3, r0
 800e70e:	461a      	mov	r2, r3
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	3301      	adds	r3, #1
 800e718:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3301      	adds	r3, #1
 800e71e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f7ff fa27 	bl	800db74 <SWAPBYTE>
 800e726:	4603      	mov	r3, r0
 800e728:	461a      	mov	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	80da      	strh	r2, [r3, #6]
}
 800e72e:	bf00      	nop
 800e730:	3710      	adds	r7, #16
 800e732:	46bd      	mov	sp, r7
 800e734:	bd80      	pop	{r7, pc}

0800e736 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e736:	b580      	push	{r7, lr}
 800e738:	b082      	sub	sp, #8
 800e73a:	af00      	add	r7, sp, #0
 800e73c:	6078      	str	r0, [r7, #4]
 800e73e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e740:	2180      	movs	r1, #128	; 0x80
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 fce2 	bl	800f10c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e748:	2100      	movs	r1, #0
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 fcde 	bl	800f10c <USBD_LL_StallEP>
}
 800e750:	bf00      	nop
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	60b9      	str	r1, [r7, #8]
 800e762:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e764:	2300      	movs	r3, #0
 800e766:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d036      	beq.n	800e7dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e772:	6938      	ldr	r0, [r7, #16]
 800e774:	f000 f836 	bl	800e7e4 <USBD_GetLen>
 800e778:	4603      	mov	r3, r0
 800e77a:	3301      	adds	r3, #1
 800e77c:	b29b      	uxth	r3, r3
 800e77e:	005b      	lsls	r3, r3, #1
 800e780:	b29a      	uxth	r2, r3
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	68ba      	ldr	r2, [r7, #8]
 800e78a:	4413      	add	r3, r2
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	7812      	ldrb	r2, [r2, #0]
 800e790:	701a      	strb	r2, [r3, #0]
  idx++;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	3301      	adds	r3, #1
 800e796:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e798:	7dfb      	ldrb	r3, [r7, #23]
 800e79a:	68ba      	ldr	r2, [r7, #8]
 800e79c:	4413      	add	r3, r2
 800e79e:	2203      	movs	r2, #3
 800e7a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e7a2:	7dfb      	ldrb	r3, [r7, #23]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e7a8:	e013      	b.n	800e7d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	68ba      	ldr	r2, [r7, #8]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	693a      	ldr	r2, [r7, #16]
 800e7b2:	7812      	ldrb	r2, [r2, #0]
 800e7b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	613b      	str	r3, [r7, #16]
    idx++;
 800e7bc:	7dfb      	ldrb	r3, [r7, #23]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e7c2:	7dfb      	ldrb	r3, [r7, #23]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	4413      	add	r3, r2
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	3301      	adds	r3, #1
 800e7d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1e7      	bne.n	800e7aa <USBD_GetString+0x52>
 800e7da:	e000      	b.n	800e7de <USBD_GetString+0x86>
    return;
 800e7dc:	bf00      	nop
  }
}
 800e7de:	3718      	adds	r7, #24
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}

0800e7e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e7ec:	2300      	movs	r3, #0
 800e7ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e7f4:	e005      	b.n	800e802 <USBD_GetLen+0x1e>
  {
    len++;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	3301      	adds	r3, #1
 800e7fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	3301      	adds	r3, #1
 800e800:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d1f5      	bne.n	800e7f6 <USBD_GetLen+0x12>
  }

  return len;
 800e80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	2202      	movs	r2, #2
 800e828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	687a      	ldr	r2, [r7, #4]
 800e836:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	2100      	movs	r1, #0
 800e83e:	68f8      	ldr	r0, [r7, #12]
 800e840:	f000 fced 	bl	800f21e <USBD_LL_Transmit>

  return USBD_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b084      	sub	sp, #16
 800e852:	af00      	add	r7, sp, #0
 800e854:	60f8      	str	r0, [r7, #12]
 800e856:	60b9      	str	r1, [r7, #8]
 800e858:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	2100      	movs	r1, #0
 800e860:	68f8      	ldr	r0, [r7, #12]
 800e862:	f000 fcdc 	bl	800f21e <USBD_LL_Transmit>

  return USBD_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3710      	adds	r7, #16
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	2203      	movs	r2, #3
 800e880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	687a      	ldr	r2, [r7, #4]
 800e888:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	68ba      	ldr	r2, [r7, #8]
 800e898:	2100      	movs	r1, #0
 800e89a:	68f8      	ldr	r0, [r7, #12]
 800e89c:	f000 fce0 	bl	800f260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8a0:	2300      	movs	r3, #0
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	3710      	adds	r7, #16
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b084      	sub	sp, #16
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	60f8      	str	r0, [r7, #12]
 800e8b2:	60b9      	str	r1, [r7, #8]
 800e8b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	68ba      	ldr	r2, [r7, #8]
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 fccf 	bl	800f260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3710      	adds	r7, #16
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2204      	movs	r2, #4
 800e8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e8dc:	2300      	movs	r3, #0
 800e8de:	2200      	movs	r2, #0
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	6878      	ldr	r0, [r7, #4]
 800e8e4:	f000 fc9b 	bl	800f21e <USBD_LL_Transmit>

  return USBD_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3708      	adds	r7, #8
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b082      	sub	sp, #8
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2205      	movs	r2, #5
 800e8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e902:	2300      	movs	r3, #0
 800e904:	2200      	movs	r2, #0
 800e906:	2100      	movs	r1, #0
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fca9 	bl	800f260 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e90e:	2300      	movs	r3, #0
}
 800e910:	4618      	mov	r0, r3
 800e912:	3708      	adds	r7, #8
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}

0800e918 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e91c:	2201      	movs	r2, #1
 800e91e:	4912      	ldr	r1, [pc, #72]	; (800e968 <MX_USB_DEVICE_Init+0x50>)
 800e920:	4812      	ldr	r0, [pc, #72]	; (800e96c <MX_USB_DEVICE_Init+0x54>)
 800e922:	f7fe fd07 	bl	800d334 <USBD_Init>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e92c:	f7f2 fff8 	bl	8001920 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e930:	490f      	ldr	r1, [pc, #60]	; (800e970 <MX_USB_DEVICE_Init+0x58>)
 800e932:	480e      	ldr	r0, [pc, #56]	; (800e96c <MX_USB_DEVICE_Init+0x54>)
 800e934:	f7fe fd2e 	bl	800d394 <USBD_RegisterClass>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d001      	beq.n	800e942 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e93e:	f7f2 ffef 	bl	8001920 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e942:	490c      	ldr	r1, [pc, #48]	; (800e974 <MX_USB_DEVICE_Init+0x5c>)
 800e944:	4809      	ldr	r0, [pc, #36]	; (800e96c <MX_USB_DEVICE_Init+0x54>)
 800e946:	f7fe fc1f 	bl	800d188 <USBD_CDC_RegisterInterface>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e950:	f7f2 ffe6 	bl	8001920 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e954:	4805      	ldr	r0, [pc, #20]	; (800e96c <MX_USB_DEVICE_Init+0x54>)
 800e956:	f7fe fd53 	bl	800d400 <USBD_Start>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d001      	beq.n	800e964 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e960:	f7f2 ffde 	bl	8001920 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e964:	bf00      	nop
 800e966:	bd80      	pop	{r7, pc}
 800e968:	2000012c 	.word	0x2000012c
 800e96c:	20004fa0 	.word	0x20004fa0
 800e970:	20000098 	.word	0x20000098
 800e974:	20000118 	.word	0x20000118

0800e978 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e97c:	2200      	movs	r2, #0
 800e97e:	4905      	ldr	r1, [pc, #20]	; (800e994 <CDC_Init_HS+0x1c>)
 800e980:	4805      	ldr	r0, [pc, #20]	; (800e998 <CDC_Init_HS+0x20>)
 800e982:	f7fe fc1b 	bl	800d1bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e986:	4905      	ldr	r1, [pc, #20]	; (800e99c <CDC_Init_HS+0x24>)
 800e988:	4803      	ldr	r0, [pc, #12]	; (800e998 <CDC_Init_HS+0x20>)
 800e98a:	f7fe fc39 	bl	800d200 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e98e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e990:	4618      	mov	r0, r3
 800e992:	bd80      	pop	{r7, pc}
 800e994:	20005a7c 	.word	0x20005a7c
 800e998:	20004fa0 	.word	0x20004fa0
 800e99c:	2000527c 	.word	0x2000527c

0800e9a0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e9a4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	6039      	str	r1, [r7, #0]
 800e9ba:	71fb      	strb	r3, [r7, #7]
 800e9bc:	4613      	mov	r3, r2
 800e9be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	2b23      	cmp	r3, #35	; 0x23
 800e9c4:	d84a      	bhi.n	800ea5c <CDC_Control_HS+0xac>
 800e9c6:	a201      	add	r2, pc, #4	; (adr r2, 800e9cc <CDC_Control_HS+0x1c>)
 800e9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9cc:	0800ea5d 	.word	0x0800ea5d
 800e9d0:	0800ea5d 	.word	0x0800ea5d
 800e9d4:	0800ea5d 	.word	0x0800ea5d
 800e9d8:	0800ea5d 	.word	0x0800ea5d
 800e9dc:	0800ea5d 	.word	0x0800ea5d
 800e9e0:	0800ea5d 	.word	0x0800ea5d
 800e9e4:	0800ea5d 	.word	0x0800ea5d
 800e9e8:	0800ea5d 	.word	0x0800ea5d
 800e9ec:	0800ea5d 	.word	0x0800ea5d
 800e9f0:	0800ea5d 	.word	0x0800ea5d
 800e9f4:	0800ea5d 	.word	0x0800ea5d
 800e9f8:	0800ea5d 	.word	0x0800ea5d
 800e9fc:	0800ea5d 	.word	0x0800ea5d
 800ea00:	0800ea5d 	.word	0x0800ea5d
 800ea04:	0800ea5d 	.word	0x0800ea5d
 800ea08:	0800ea5d 	.word	0x0800ea5d
 800ea0c:	0800ea5d 	.word	0x0800ea5d
 800ea10:	0800ea5d 	.word	0x0800ea5d
 800ea14:	0800ea5d 	.word	0x0800ea5d
 800ea18:	0800ea5d 	.word	0x0800ea5d
 800ea1c:	0800ea5d 	.word	0x0800ea5d
 800ea20:	0800ea5d 	.word	0x0800ea5d
 800ea24:	0800ea5d 	.word	0x0800ea5d
 800ea28:	0800ea5d 	.word	0x0800ea5d
 800ea2c:	0800ea5d 	.word	0x0800ea5d
 800ea30:	0800ea5d 	.word	0x0800ea5d
 800ea34:	0800ea5d 	.word	0x0800ea5d
 800ea38:	0800ea5d 	.word	0x0800ea5d
 800ea3c:	0800ea5d 	.word	0x0800ea5d
 800ea40:	0800ea5d 	.word	0x0800ea5d
 800ea44:	0800ea5d 	.word	0x0800ea5d
 800ea48:	0800ea5d 	.word	0x0800ea5d
 800ea4c:	0800ea5d 	.word	0x0800ea5d
 800ea50:	0800ea5d 	.word	0x0800ea5d
 800ea54:	0800ea5d 	.word	0x0800ea5d
 800ea58:	0800ea5d 	.word	0x0800ea5d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea5c:	bf00      	nop
  }

  return (USBD_OK);
 800ea5e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ea76:	6879      	ldr	r1, [r7, #4]
 800ea78:	4805      	ldr	r0, [pc, #20]	; (800ea90 <CDC_Receive_HS+0x24>)
 800ea7a:	f7fe fbc1 	bl	800d200 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ea7e:	4804      	ldr	r0, [pc, #16]	; (800ea90 <CDC_Receive_HS+0x24>)
 800ea80:	f7fe fc22 	bl	800d2c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea84:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3708      	adds	r7, #8
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	20004fa0 	.word	0x20004fa0

0800ea94 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b084      	sub	sp, #16
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800eaa4:	4b0d      	ldr	r3, [pc, #52]	; (800eadc <CDC_Transmit_HS+0x48>)
 800eaa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eaaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d001      	beq.n	800eaba <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800eab6:	2301      	movs	r3, #1
 800eab8:	e00b      	b.n	800ead2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800eaba:	887b      	ldrh	r3, [r7, #2]
 800eabc:	461a      	mov	r2, r3
 800eabe:	6879      	ldr	r1, [r7, #4]
 800eac0:	4806      	ldr	r0, [pc, #24]	; (800eadc <CDC_Transmit_HS+0x48>)
 800eac2:	f7fe fb7b 	bl	800d1bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800eac6:	4805      	ldr	r0, [pc, #20]	; (800eadc <CDC_Transmit_HS+0x48>)
 800eac8:	f7fe fbb8 	bl	800d23c <USBD_CDC_TransmitPacket>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ead0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	3710      	adds	r7, #16
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	20004fa0 	.word	0x20004fa0

0800eae0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eae0:	b480      	push	{r7}
 800eae2:	b087      	sub	sp, #28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	4613      	mov	r3, r2
 800eaec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800eaf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
	...

0800eb04 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	6039      	str	r1, [r7, #0]
 800eb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	2212      	movs	r2, #18
 800eb14:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800eb16:	4b03      	ldr	r3, [pc, #12]	; (800eb24 <USBD_HS_DeviceDescriptor+0x20>)
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	370c      	adds	r7, #12
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb22:	4770      	bx	lr
 800eb24:	20000148 	.word	0x20000148

0800eb28 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	6039      	str	r1, [r7, #0]
 800eb32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	2204      	movs	r2, #4
 800eb38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eb3a:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	2000015c 	.word	0x2000015c

0800eb4c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	6039      	str	r1, [r7, #0]
 800eb56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d105      	bne.n	800eb6a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	4907      	ldr	r1, [pc, #28]	; (800eb80 <USBD_HS_ProductStrDescriptor+0x34>)
 800eb62:	4808      	ldr	r0, [pc, #32]	; (800eb84 <USBD_HS_ProductStrDescriptor+0x38>)
 800eb64:	f7ff fdf8 	bl	800e758 <USBD_GetString>
 800eb68:	e004      	b.n	800eb74 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	4904      	ldr	r1, [pc, #16]	; (800eb80 <USBD_HS_ProductStrDescriptor+0x34>)
 800eb6e:	4805      	ldr	r0, [pc, #20]	; (800eb84 <USBD_HS_ProductStrDescriptor+0x38>)
 800eb70:	f7ff fdf2 	bl	800e758 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb74:	4b02      	ldr	r3, [pc, #8]	; (800eb80 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3708      	adds	r7, #8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	2000627c 	.word	0x2000627c
 800eb84:	08013d2c 	.word	0x08013d2c

0800eb88 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b082      	sub	sp, #8
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	4603      	mov	r3, r0
 800eb90:	6039      	str	r1, [r7, #0]
 800eb92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb94:	683a      	ldr	r2, [r7, #0]
 800eb96:	4904      	ldr	r1, [pc, #16]	; (800eba8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800eb98:	4804      	ldr	r0, [pc, #16]	; (800ebac <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800eb9a:	f7ff fddd 	bl	800e758 <USBD_GetString>
  return USBD_StrDesc;
 800eb9e:	4b02      	ldr	r3, [pc, #8]	; (800eba8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800eba0:	4618      	mov	r0, r3
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}
 800eba8:	2000627c 	.word	0x2000627c
 800ebac:	08013d44 	.word	0x08013d44

0800ebb0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6039      	str	r1, [r7, #0]
 800ebba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	221a      	movs	r2, #26
 800ebc0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ebc2:	f000 f843 	bl	800ec4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ebc6:	4b02      	ldr	r3, [pc, #8]	; (800ebd0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	3708      	adds	r7, #8
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	20000160 	.word	0x20000160

0800ebd4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b082      	sub	sp, #8
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	6039      	str	r1, [r7, #0]
 800ebde:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ebe0:	79fb      	ldrb	r3, [r7, #7]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d105      	bne.n	800ebf2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ebe6:	683a      	ldr	r2, [r7, #0]
 800ebe8:	4907      	ldr	r1, [pc, #28]	; (800ec08 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ebea:	4808      	ldr	r0, [pc, #32]	; (800ec0c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ebec:	f7ff fdb4 	bl	800e758 <USBD_GetString>
 800ebf0:	e004      	b.n	800ebfc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	4904      	ldr	r1, [pc, #16]	; (800ec08 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ebf6:	4805      	ldr	r0, [pc, #20]	; (800ec0c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ebf8:	f7ff fdae 	bl	800e758 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebfc:	4b02      	ldr	r3, [pc, #8]	; (800ec08 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	2000627c 	.word	0x2000627c
 800ec0c:	08013d58 	.word	0x08013d58

0800ec10 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	4603      	mov	r3, r0
 800ec18:	6039      	str	r1, [r7, #0]
 800ec1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d105      	bne.n	800ec2e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	4907      	ldr	r1, [pc, #28]	; (800ec44 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ec26:	4808      	ldr	r0, [pc, #32]	; (800ec48 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ec28:	f7ff fd96 	bl	800e758 <USBD_GetString>
 800ec2c:	e004      	b.n	800ec38 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	4904      	ldr	r1, [pc, #16]	; (800ec44 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ec32:	4805      	ldr	r0, [pc, #20]	; (800ec48 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ec34:	f7ff fd90 	bl	800e758 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec38:	4b02      	ldr	r3, [pc, #8]	; (800ec44 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
 800ec42:	bf00      	nop
 800ec44:	2000627c 	.word	0x2000627c
 800ec48:	08013d64 	.word	0x08013d64

0800ec4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec52:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <Get_SerialNum+0x44>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec58:	4b0e      	ldr	r3, [pc, #56]	; (800ec94 <Get_SerialNum+0x48>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec5e:	4b0e      	ldr	r3, [pc, #56]	; (800ec98 <Get_SerialNum+0x4c>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	4413      	add	r3, r2
 800ec6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d009      	beq.n	800ec86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec72:	2208      	movs	r2, #8
 800ec74:	4909      	ldr	r1, [pc, #36]	; (800ec9c <Get_SerialNum+0x50>)
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f000 f814 	bl	800eca4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec7c:	2204      	movs	r2, #4
 800ec7e:	4908      	ldr	r1, [pc, #32]	; (800eca0 <Get_SerialNum+0x54>)
 800ec80:	68b8      	ldr	r0, [r7, #8]
 800ec82:	f000 f80f 	bl	800eca4 <IntToUnicode>
  }
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	1fff7a10 	.word	0x1fff7a10
 800ec94:	1fff7a14 	.word	0x1fff7a14
 800ec98:	1fff7a18 	.word	0x1fff7a18
 800ec9c:	20000162 	.word	0x20000162
 800eca0:	20000172 	.word	0x20000172

0800eca4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b087      	sub	sp, #28
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	4613      	mov	r3, r2
 800ecb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	75fb      	strb	r3, [r7, #23]
 800ecba:	e027      	b.n	800ed0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	0f1b      	lsrs	r3, r3, #28
 800ecc0:	2b09      	cmp	r3, #9
 800ecc2:	d80b      	bhi.n	800ecdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	0f1b      	lsrs	r3, r3, #28
 800ecc8:	b2da      	uxtb	r2, r3
 800ecca:	7dfb      	ldrb	r3, [r7, #23]
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	440b      	add	r3, r1
 800ecd4:	3230      	adds	r2, #48	; 0x30
 800ecd6:	b2d2      	uxtb	r2, r2
 800ecd8:	701a      	strb	r2, [r3, #0]
 800ecda:	e00a      	b.n	800ecf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	0f1b      	lsrs	r3, r3, #28
 800ece0:	b2da      	uxtb	r2, r3
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4619      	mov	r1, r3
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	440b      	add	r3, r1
 800ecec:	3237      	adds	r2, #55	; 0x37
 800ecee:	b2d2      	uxtb	r2, r2
 800ecf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	011b      	lsls	r3, r3, #4
 800ecf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
 800ecfa:	005b      	lsls	r3, r3, #1
 800ecfc:	3301      	adds	r3, #1
 800ecfe:	68ba      	ldr	r2, [r7, #8]
 800ed00:	4413      	add	r3, r2
 800ed02:	2200      	movs	r2, #0
 800ed04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed06:	7dfb      	ldrb	r3, [r7, #23]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	75fb      	strb	r3, [r7, #23]
 800ed0c:	7dfa      	ldrb	r2, [r7, #23]
 800ed0e:	79fb      	ldrb	r3, [r7, #7]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d3d3      	bcc.n	800ecbc <IntToUnicode+0x18>
  }
}
 800ed14:	bf00      	nop
 800ed16:	bf00      	nop
 800ed18:	371c      	adds	r7, #28
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
	...

0800ed24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08a      	sub	sp, #40	; 0x28
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed2c:	f107 0314 	add.w	r3, r7, #20
 800ed30:	2200      	movs	r2, #0
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	605a      	str	r2, [r3, #4]
 800ed36:	609a      	str	r2, [r3, #8]
 800ed38:	60da      	str	r2, [r3, #12]
 800ed3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4a1d      	ldr	r2, [pc, #116]	; (800edb8 <HAL_PCD_MspInit+0x94>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d134      	bne.n	800edb0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed46:	2300      	movs	r3, #0
 800ed48:	613b      	str	r3, [r7, #16]
 800ed4a:	4b1c      	ldr	r3, [pc, #112]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4e:	4a1b      	ldr	r2, [pc, #108]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed50:	f043 0302 	orr.w	r3, r3, #2
 800ed54:	6313      	str	r3, [r2, #48]	; 0x30
 800ed56:	4b19      	ldr	r3, [pc, #100]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	f003 0302 	and.w	r3, r3, #2
 800ed5e:	613b      	str	r3, [r7, #16]
 800ed60:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ed62:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ed66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed68:	2302      	movs	r3, #2
 800ed6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed70:	2303      	movs	r3, #3
 800ed72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ed74:	230c      	movs	r3, #12
 800ed76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	4810      	ldr	r0, [pc, #64]	; (800edc0 <HAL_PCD_MspInit+0x9c>)
 800ed80:	f7f5 fc10 	bl	80045a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ed84:	2300      	movs	r3, #0
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	4b0c      	ldr	r3, [pc, #48]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8c:	4a0b      	ldr	r2, [pc, #44]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ed92:	6313      	str	r3, [r2, #48]	; 0x30
 800ed94:	4b09      	ldr	r3, [pc, #36]	; (800edbc <HAL_PCD_MspInit+0x98>)
 800ed96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed9c:	60fb      	str	r3, [r7, #12]
 800ed9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800eda0:	2200      	movs	r2, #0
 800eda2:	2105      	movs	r1, #5
 800eda4:	204d      	movs	r0, #77	; 0x4d
 800eda6:	f7f4 ff7f 	bl	8003ca8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800edaa:	204d      	movs	r0, #77	; 0x4d
 800edac:	f7f4 ff98 	bl	8003ce0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800edb0:	bf00      	nop
 800edb2:	3728      	adds	r7, #40	; 0x28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	40040000 	.word	0x40040000
 800edbc:	40023800 	.word	0x40023800
 800edc0:	40020400 	.word	0x40020400

0800edc4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800edd8:	4619      	mov	r1, r3
 800edda:	4610      	mov	r0, r2
 800eddc:	f7fe fb5d 	bl	800d49a <USBD_LL_SetupStage>
}
 800ede0:	bf00      	nop
 800ede2:	3708      	adds	r7, #8
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	460b      	mov	r3, r1
 800edf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800edfa:	78fa      	ldrb	r2, [r7, #3]
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	4613      	mov	r3, r2
 800ee00:	00db      	lsls	r3, r3, #3
 800ee02:	4413      	add	r3, r2
 800ee04:	009b      	lsls	r3, r3, #2
 800ee06:	440b      	add	r3, r1
 800ee08:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	78fb      	ldrb	r3, [r7, #3]
 800ee10:	4619      	mov	r1, r3
 800ee12:	f7fe fb97 	bl	800d544 <USBD_LL_DataOutStage>
}
 800ee16:	bf00      	nop
 800ee18:	3708      	adds	r7, #8
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	460b      	mov	r3, r1
 800ee28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	6879      	ldr	r1, [r7, #4]
 800ee34:	4613      	mov	r3, r2
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	4413      	add	r3, r2
 800ee3a:	009b      	lsls	r3, r3, #2
 800ee3c:	440b      	add	r3, r1
 800ee3e:	334c      	adds	r3, #76	; 0x4c
 800ee40:	681a      	ldr	r2, [r3, #0]
 800ee42:	78fb      	ldrb	r3, [r7, #3]
 800ee44:	4619      	mov	r1, r3
 800ee46:	f7fe fc30 	bl	800d6aa <USBD_LL_DataInStage>
}
 800ee4a:	bf00      	nop
 800ee4c:	3708      	adds	r7, #8
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}

0800ee52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b082      	sub	sp, #8
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7fe fd64 	bl	800d92e <USBD_LL_SOF>
}
 800ee66:	bf00      	nop
 800ee68:	3708      	adds	r7, #8
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b084      	sub	sp, #16
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee76:	2301      	movs	r3, #1
 800ee78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d102      	bne.n	800ee88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ee82:	2300      	movs	r3, #0
 800ee84:	73fb      	strb	r3, [r7, #15]
 800ee86:	e008      	b.n	800ee9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	2b02      	cmp	r3, #2
 800ee8e:	d102      	bne.n	800ee96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ee90:	2301      	movs	r3, #1
 800ee92:	73fb      	strb	r3, [r7, #15]
 800ee94:	e001      	b.n	800ee9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ee96:	f7f2 fd43 	bl	8001920 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eea0:	7bfa      	ldrb	r2, [r7, #15]
 800eea2:	4611      	mov	r1, r2
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7fe fd04 	bl	800d8b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7fe fcac 	bl	800d80e <USBD_LL_Reset>
}
 800eeb6:	bf00      	nop
 800eeb8:	3710      	adds	r7, #16
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}
	...

0800eec0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fe fcff 	bl	800d8d2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	6812      	ldr	r2, [r2, #0]
 800eee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800eee6:	f043 0301 	orr.w	r3, r3, #1
 800eeea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	6a1b      	ldr	r3, [r3, #32]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d005      	beq.n	800ef00 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eef4:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <HAL_PCD_SuspendCallback+0x48>)
 800eef6:	691b      	ldr	r3, [r3, #16]
 800eef8:	4a03      	ldr	r2, [pc, #12]	; (800ef08 <HAL_PCD_SuspendCallback+0x48>)
 800eefa:	f043 0306 	orr.w	r3, r3, #6
 800eefe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}
 800ef08:	e000ed00 	.word	0xe000ed00

0800ef0c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b082      	sub	sp, #8
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fcef 	bl	800d8fe <USBD_LL_Resume>
}
 800ef20:	bf00      	nop
 800ef22:	3708      	adds	r7, #8
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
 800ef30:	460b      	mov	r3, r1
 800ef32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3a:	78fa      	ldrb	r2, [r7, #3]
 800ef3c:	4611      	mov	r1, r2
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fd47 	bl	800d9d2 <USBD_LL_IsoOUTIncomplete>
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef5e:	78fa      	ldrb	r2, [r7, #3]
 800ef60:	4611      	mov	r1, r2
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fe fd03 	bl	800d96e <USBD_LL_IsoINIncomplete>
}
 800ef68:	bf00      	nop
 800ef6a:	3708      	adds	r7, #8
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}

0800ef70 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef70:	b580      	push	{r7, lr}
 800ef72:	b082      	sub	sp, #8
 800ef74:	af00      	add	r7, sp, #0
 800ef76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fe fd59 	bl	800da36 <USBD_LL_DevConnected>
}
 800ef84:	bf00      	nop
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7fe fd56 	bl	800da4c <USBD_LL_DevDisconnected>
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d140      	bne.n	800f03a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800efb8:	4a22      	ldr	r2, [pc, #136]	; (800f044 <USBD_LL_Init+0x9c>)
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a20      	ldr	r2, [pc, #128]	; (800f044 <USBD_LL_Init+0x9c>)
 800efc4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800efc8:	4b1e      	ldr	r3, [pc, #120]	; (800f044 <USBD_LL_Init+0x9c>)
 800efca:	4a1f      	ldr	r2, [pc, #124]	; (800f048 <USBD_LL_Init+0xa0>)
 800efcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800efce:	4b1d      	ldr	r3, [pc, #116]	; (800f044 <USBD_LL_Init+0x9c>)
 800efd0:	2206      	movs	r2, #6
 800efd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800efd4:	4b1b      	ldr	r3, [pc, #108]	; (800f044 <USBD_LL_Init+0x9c>)
 800efd6:	2202      	movs	r2, #2
 800efd8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800efda:	4b1a      	ldr	r3, [pc, #104]	; (800f044 <USBD_LL_Init+0x9c>)
 800efdc:	2200      	movs	r2, #0
 800efde:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800efe0:	4b18      	ldr	r3, [pc, #96]	; (800f044 <USBD_LL_Init+0x9c>)
 800efe2:	2202      	movs	r2, #2
 800efe4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800efe6:	4b17      	ldr	r3, [pc, #92]	; (800f044 <USBD_LL_Init+0x9c>)
 800efe8:	2200      	movs	r2, #0
 800efea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800efec:	4b15      	ldr	r3, [pc, #84]	; (800f044 <USBD_LL_Init+0x9c>)
 800efee:	2200      	movs	r2, #0
 800eff0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800eff2:	4b14      	ldr	r3, [pc, #80]	; (800f044 <USBD_LL_Init+0x9c>)
 800eff4:	2200      	movs	r2, #0
 800eff6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800eff8:	4b12      	ldr	r3, [pc, #72]	; (800f044 <USBD_LL_Init+0x9c>)
 800effa:	2200      	movs	r2, #0
 800effc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800effe:	4b11      	ldr	r3, [pc, #68]	; (800f044 <USBD_LL_Init+0x9c>)
 800f000:	2200      	movs	r2, #0
 800f002:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f004:	4b0f      	ldr	r3, [pc, #60]	; (800f044 <USBD_LL_Init+0x9c>)
 800f006:	2200      	movs	r2, #0
 800f008:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f00a:	480e      	ldr	r0, [pc, #56]	; (800f044 <USBD_LL_Init+0x9c>)
 800f00c:	f7f5 ff69 	bl	8004ee2 <HAL_PCD_Init>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f016:	f7f2 fc83 	bl	8001920 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f01a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f01e:	4809      	ldr	r0, [pc, #36]	; (800f044 <USBD_LL_Init+0x9c>)
 800f020:	f7f7 f9bf 	bl	80063a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f024:	2280      	movs	r2, #128	; 0x80
 800f026:	2100      	movs	r1, #0
 800f028:	4806      	ldr	r0, [pc, #24]	; (800f044 <USBD_LL_Init+0x9c>)
 800f02a:	f7f7 f973 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f02e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f032:	2101      	movs	r1, #1
 800f034:	4803      	ldr	r0, [pc, #12]	; (800f044 <USBD_LL_Init+0x9c>)
 800f036:	f7f7 f96d 	bl	8006314 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f03a:	2300      	movs	r3, #0
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	2000647c 	.word	0x2000647c
 800f048:	40040000 	.word	0x40040000

0800f04c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f062:	4618      	mov	r0, r3
 800f064:	f7f6 f85a 	bl	800511c <HAL_PCD_Start>
 800f068:	4603      	mov	r3, r0
 800f06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f06c:	7bfb      	ldrb	r3, [r7, #15]
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 f942 	bl	800f2f8 <USBD_Get_USB_Status>
 800f074:	4603      	mov	r3, r0
 800f076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f078:	7bbb      	ldrb	r3, [r7, #14]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3710      	adds	r7, #16
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd80      	pop	{r7, pc}

0800f082 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b084      	sub	sp, #16
 800f086:	af00      	add	r7, sp, #0
 800f088:	6078      	str	r0, [r7, #4]
 800f08a:	4608      	mov	r0, r1
 800f08c:	4611      	mov	r1, r2
 800f08e:	461a      	mov	r2, r3
 800f090:	4603      	mov	r3, r0
 800f092:	70fb      	strb	r3, [r7, #3]
 800f094:	460b      	mov	r3, r1
 800f096:	70bb      	strb	r3, [r7, #2]
 800f098:	4613      	mov	r3, r2
 800f09a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f0aa:	78bb      	ldrb	r3, [r7, #2]
 800f0ac:	883a      	ldrh	r2, [r7, #0]
 800f0ae:	78f9      	ldrb	r1, [r7, #3]
 800f0b0:	f7f6 fd2b 	bl	8005b0a <HAL_PCD_EP_Open>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0b8:	7bfb      	ldrb	r3, [r7, #15]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 f91c 	bl	800f2f8 <USBD_Get_USB_Status>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	3710      	adds	r7, #16
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}

0800f0ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0ce:	b580      	push	{r7, lr}
 800f0d0:	b084      	sub	sp, #16
 800f0d2:	af00      	add	r7, sp, #0
 800f0d4:	6078      	str	r0, [r7, #4]
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0e8:	78fa      	ldrb	r2, [r7, #3]
 800f0ea:	4611      	mov	r1, r2
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7f6 fd74 	bl	8005bda <HAL_PCD_EP_Close>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f000 f8fd 	bl	800f2f8 <USBD_Get_USB_Status>
 800f0fe:	4603      	mov	r3, r0
 800f100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f102:	7bbb      	ldrb	r3, [r7, #14]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b084      	sub	sp, #16
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	460b      	mov	r3, r1
 800f116:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f118:	2300      	movs	r3, #0
 800f11a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f126:	78fa      	ldrb	r2, [r7, #3]
 800f128:	4611      	mov	r1, r2
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f6 fe4c 	bl	8005dc8 <HAL_PCD_EP_SetStall>
 800f130:	4603      	mov	r3, r0
 800f132:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	4618      	mov	r0, r3
 800f138:	f000 f8de 	bl	800f2f8 <USBD_Get_USB_Status>
 800f13c:	4603      	mov	r3, r0
 800f13e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f140:	7bbb      	ldrb	r3, [r7, #14]
}
 800f142:	4618      	mov	r0, r3
 800f144:	3710      	adds	r7, #16
 800f146:	46bd      	mov	sp, r7
 800f148:	bd80      	pop	{r7, pc}

0800f14a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f14a:	b580      	push	{r7, lr}
 800f14c:	b084      	sub	sp, #16
 800f14e:	af00      	add	r7, sp, #0
 800f150:	6078      	str	r0, [r7, #4]
 800f152:	460b      	mov	r3, r1
 800f154:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f15a:	2300      	movs	r3, #0
 800f15c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f164:	78fa      	ldrb	r2, [r7, #3]
 800f166:	4611      	mov	r1, r2
 800f168:	4618      	mov	r0, r3
 800f16a:	f7f6 fe91 	bl	8005e90 <HAL_PCD_EP_ClrStall>
 800f16e:	4603      	mov	r3, r0
 800f170:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f172:	7bfb      	ldrb	r3, [r7, #15]
 800f174:	4618      	mov	r0, r3
 800f176:	f000 f8bf 	bl	800f2f8 <USBD_Get_USB_Status>
 800f17a:	4603      	mov	r3, r0
 800f17c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f17e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f180:	4618      	mov	r0, r3
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f19a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f19c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	da0b      	bge.n	800f1bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1a4:	78fb      	ldrb	r3, [r7, #3]
 800f1a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1aa:	68f9      	ldr	r1, [r7, #12]
 800f1ac:	4613      	mov	r3, r2
 800f1ae:	00db      	lsls	r3, r3, #3
 800f1b0:	4413      	add	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	440b      	add	r3, r1
 800f1b6:	333e      	adds	r3, #62	; 0x3e
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	e00b      	b.n	800f1d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1bc:	78fb      	ldrb	r3, [r7, #3]
 800f1be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1c2:	68f9      	ldr	r1, [r7, #12]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	00db      	lsls	r3, r3, #3
 800f1c8:	4413      	add	r3, r2
 800f1ca:	009b      	lsls	r3, r3, #2
 800f1cc:	440b      	add	r3, r1
 800f1ce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f1d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	3714      	adds	r7, #20
 800f1d8:	46bd      	mov	sp, r7
 800f1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1de:	4770      	bx	lr

0800f1e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b084      	sub	sp, #16
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	460b      	mov	r3, r1
 800f1ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1fa:	78fa      	ldrb	r2, [r7, #3]
 800f1fc:	4611      	mov	r1, r2
 800f1fe:	4618      	mov	r0, r3
 800f200:	f7f6 fc5e 	bl	8005ac0 <HAL_PCD_SetAddress>
 800f204:	4603      	mov	r3, r0
 800f206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f208:	7bfb      	ldrb	r3, [r7, #15]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 f874 	bl	800f2f8 <USBD_Get_USB_Status>
 800f210:	4603      	mov	r3, r0
 800f212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f214:	7bbb      	ldrb	r3, [r7, #14]
}
 800f216:	4618      	mov	r0, r3
 800f218:	3710      	adds	r7, #16
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b086      	sub	sp, #24
 800f222:	af00      	add	r7, sp, #0
 800f224:	60f8      	str	r0, [r7, #12]
 800f226:	607a      	str	r2, [r7, #4]
 800f228:	603b      	str	r3, [r7, #0]
 800f22a:	460b      	mov	r3, r1
 800f22c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f232:	2300      	movs	r3, #0
 800f234:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f23c:	7af9      	ldrb	r1, [r7, #11]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	f7f6 fd77 	bl	8005d34 <HAL_PCD_EP_Transmit>
 800f246:	4603      	mov	r3, r0
 800f248:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f24a:	7dfb      	ldrb	r3, [r7, #23]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 f853 	bl	800f2f8 <USBD_Get_USB_Status>
 800f252:	4603      	mov	r3, r0
 800f254:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f256:	7dbb      	ldrb	r3, [r7, #22]
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3718      	adds	r7, #24
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd80      	pop	{r7, pc}

0800f260 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f260:	b580      	push	{r7, lr}
 800f262:	b086      	sub	sp, #24
 800f264:	af00      	add	r7, sp, #0
 800f266:	60f8      	str	r0, [r7, #12]
 800f268:	607a      	str	r2, [r7, #4]
 800f26a:	603b      	str	r3, [r7, #0]
 800f26c:	460b      	mov	r3, r1
 800f26e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f270:	2300      	movs	r3, #0
 800f272:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f274:	2300      	movs	r3, #0
 800f276:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f27e:	7af9      	ldrb	r1, [r7, #11]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	687a      	ldr	r2, [r7, #4]
 800f284:	f7f6 fcf3 	bl	8005c6e <HAL_PCD_EP_Receive>
 800f288:	4603      	mov	r3, r0
 800f28a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f28c:	7dfb      	ldrb	r3, [r7, #23]
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 f832 	bl	800f2f8 <USBD_Get_USB_Status>
 800f294:	4603      	mov	r3, r0
 800f296:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f298:	7dbb      	ldrb	r3, [r7, #22]
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b082      	sub	sp, #8
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	460b      	mov	r3, r1
 800f2ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2b4:	78fa      	ldrb	r2, [r7, #3]
 800f2b6:	4611      	mov	r1, r2
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7f6 fd23 	bl	8005d04 <HAL_PCD_EP_GetRxCount>
 800f2be:	4603      	mov	r3, r0
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f2d0:	4b03      	ldr	r3, [pc, #12]	; (800f2e0 <USBD_static_malloc+0x18>)
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	370c      	adds	r7, #12
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	20006988 	.word	0x20006988

0800f2e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]

}
 800f2ec:	bf00      	nop
 800f2ee:	370c      	adds	r7, #12
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b085      	sub	sp, #20
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	4603      	mov	r3, r0
 800f300:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f302:	2300      	movs	r3, #0
 800f304:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f306:	79fb      	ldrb	r3, [r7, #7]
 800f308:	2b03      	cmp	r3, #3
 800f30a:	d817      	bhi.n	800f33c <USBD_Get_USB_Status+0x44>
 800f30c:	a201      	add	r2, pc, #4	; (adr r2, 800f314 <USBD_Get_USB_Status+0x1c>)
 800f30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f312:	bf00      	nop
 800f314:	0800f325 	.word	0x0800f325
 800f318:	0800f32b 	.word	0x0800f32b
 800f31c:	0800f331 	.word	0x0800f331
 800f320:	0800f337 	.word	0x0800f337
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f324:	2300      	movs	r3, #0
 800f326:	73fb      	strb	r3, [r7, #15]
    break;
 800f328:	e00b      	b.n	800f342 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f32a:	2303      	movs	r3, #3
 800f32c:	73fb      	strb	r3, [r7, #15]
    break;
 800f32e:	e008      	b.n	800f342 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f330:	2301      	movs	r3, #1
 800f332:	73fb      	strb	r3, [r7, #15]
    break;
 800f334:	e005      	b.n	800f342 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f336:	2303      	movs	r3, #3
 800f338:	73fb      	strb	r3, [r7, #15]
    break;
 800f33a:	e002      	b.n	800f342 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f33c:	2303      	movs	r3, #3
 800f33e:	73fb      	strb	r3, [r7, #15]
    break;
 800f340:	bf00      	nop
  }
  return usb_status;
 800f342:	7bfb      	ldrb	r3, [r7, #15]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3714      	adds	r7, #20
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <__errno>:
 800f350:	4b01      	ldr	r3, [pc, #4]	; (800f358 <__errno+0x8>)
 800f352:	6818      	ldr	r0, [r3, #0]
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	2000017c 	.word	0x2000017c

0800f35c <__libc_init_array>:
 800f35c:	b570      	push	{r4, r5, r6, lr}
 800f35e:	4d0d      	ldr	r5, [pc, #52]	; (800f394 <__libc_init_array+0x38>)
 800f360:	4c0d      	ldr	r4, [pc, #52]	; (800f398 <__libc_init_array+0x3c>)
 800f362:	1b64      	subs	r4, r4, r5
 800f364:	10a4      	asrs	r4, r4, #2
 800f366:	2600      	movs	r6, #0
 800f368:	42a6      	cmp	r6, r4
 800f36a:	d109      	bne.n	800f380 <__libc_init_array+0x24>
 800f36c:	4d0b      	ldr	r5, [pc, #44]	; (800f39c <__libc_init_array+0x40>)
 800f36e:	4c0c      	ldr	r4, [pc, #48]	; (800f3a0 <__libc_init_array+0x44>)
 800f370:	f004 fc8e 	bl	8013c90 <_init>
 800f374:	1b64      	subs	r4, r4, r5
 800f376:	10a4      	asrs	r4, r4, #2
 800f378:	2600      	movs	r6, #0
 800f37a:	42a6      	cmp	r6, r4
 800f37c:	d105      	bne.n	800f38a <__libc_init_array+0x2e>
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	f855 3b04 	ldr.w	r3, [r5], #4
 800f384:	4798      	blx	r3
 800f386:	3601      	adds	r6, #1
 800f388:	e7ee      	b.n	800f368 <__libc_init_array+0xc>
 800f38a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f38e:	4798      	blx	r3
 800f390:	3601      	adds	r6, #1
 800f392:	e7f2      	b.n	800f37a <__libc_init_array+0x1e>
 800f394:	08015d64 	.word	0x08015d64
 800f398:	08015d64 	.word	0x08015d64
 800f39c:	08015d64 	.word	0x08015d64
 800f3a0:	08015d68 	.word	0x08015d68

0800f3a4 <memcpy>:
 800f3a4:	440a      	add	r2, r1
 800f3a6:	4291      	cmp	r1, r2
 800f3a8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3ac:	d100      	bne.n	800f3b0 <memcpy+0xc>
 800f3ae:	4770      	bx	lr
 800f3b0:	b510      	push	{r4, lr}
 800f3b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3ba:	4291      	cmp	r1, r2
 800f3bc:	d1f9      	bne.n	800f3b2 <memcpy+0xe>
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <memset>:
 800f3c0:	4402      	add	r2, r0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d100      	bne.n	800f3ca <memset+0xa>
 800f3c8:	4770      	bx	lr
 800f3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f3ce:	e7f9      	b.n	800f3c4 <memset+0x4>

0800f3d0 <__cvt>:
 800f3d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3d4:	ec55 4b10 	vmov	r4, r5, d0
 800f3d8:	2d00      	cmp	r5, #0
 800f3da:	460e      	mov	r6, r1
 800f3dc:	4619      	mov	r1, r3
 800f3de:	462b      	mov	r3, r5
 800f3e0:	bfbb      	ittet	lt
 800f3e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f3e6:	461d      	movlt	r5, r3
 800f3e8:	2300      	movge	r3, #0
 800f3ea:	232d      	movlt	r3, #45	; 0x2d
 800f3ec:	700b      	strb	r3, [r1, #0]
 800f3ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f3f4:	4691      	mov	r9, r2
 800f3f6:	f023 0820 	bic.w	r8, r3, #32
 800f3fa:	bfbc      	itt	lt
 800f3fc:	4622      	movlt	r2, r4
 800f3fe:	4614      	movlt	r4, r2
 800f400:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f404:	d005      	beq.n	800f412 <__cvt+0x42>
 800f406:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f40a:	d100      	bne.n	800f40e <__cvt+0x3e>
 800f40c:	3601      	adds	r6, #1
 800f40e:	2102      	movs	r1, #2
 800f410:	e000      	b.n	800f414 <__cvt+0x44>
 800f412:	2103      	movs	r1, #3
 800f414:	ab03      	add	r3, sp, #12
 800f416:	9301      	str	r3, [sp, #4]
 800f418:	ab02      	add	r3, sp, #8
 800f41a:	9300      	str	r3, [sp, #0]
 800f41c:	ec45 4b10 	vmov	d0, r4, r5
 800f420:	4653      	mov	r3, sl
 800f422:	4632      	mov	r2, r6
 800f424:	f001 fdac 	bl	8010f80 <_dtoa_r>
 800f428:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f42c:	4607      	mov	r7, r0
 800f42e:	d102      	bne.n	800f436 <__cvt+0x66>
 800f430:	f019 0f01 	tst.w	r9, #1
 800f434:	d022      	beq.n	800f47c <__cvt+0xac>
 800f436:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f43a:	eb07 0906 	add.w	r9, r7, r6
 800f43e:	d110      	bne.n	800f462 <__cvt+0x92>
 800f440:	783b      	ldrb	r3, [r7, #0]
 800f442:	2b30      	cmp	r3, #48	; 0x30
 800f444:	d10a      	bne.n	800f45c <__cvt+0x8c>
 800f446:	2200      	movs	r2, #0
 800f448:	2300      	movs	r3, #0
 800f44a:	4620      	mov	r0, r4
 800f44c:	4629      	mov	r1, r5
 800f44e:	f7f1 fb4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800f452:	b918      	cbnz	r0, 800f45c <__cvt+0x8c>
 800f454:	f1c6 0601 	rsb	r6, r6, #1
 800f458:	f8ca 6000 	str.w	r6, [sl]
 800f45c:	f8da 3000 	ldr.w	r3, [sl]
 800f460:	4499      	add	r9, r3
 800f462:	2200      	movs	r2, #0
 800f464:	2300      	movs	r3, #0
 800f466:	4620      	mov	r0, r4
 800f468:	4629      	mov	r1, r5
 800f46a:	f7f1 fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800f46e:	b108      	cbz	r0, 800f474 <__cvt+0xa4>
 800f470:	f8cd 900c 	str.w	r9, [sp, #12]
 800f474:	2230      	movs	r2, #48	; 0x30
 800f476:	9b03      	ldr	r3, [sp, #12]
 800f478:	454b      	cmp	r3, r9
 800f47a:	d307      	bcc.n	800f48c <__cvt+0xbc>
 800f47c:	9b03      	ldr	r3, [sp, #12]
 800f47e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f480:	1bdb      	subs	r3, r3, r7
 800f482:	4638      	mov	r0, r7
 800f484:	6013      	str	r3, [r2, #0]
 800f486:	b004      	add	sp, #16
 800f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48c:	1c59      	adds	r1, r3, #1
 800f48e:	9103      	str	r1, [sp, #12]
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	e7f0      	b.n	800f476 <__cvt+0xa6>

0800f494 <__exponent>:
 800f494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f496:	4603      	mov	r3, r0
 800f498:	2900      	cmp	r1, #0
 800f49a:	bfb8      	it	lt
 800f49c:	4249      	neglt	r1, r1
 800f49e:	f803 2b02 	strb.w	r2, [r3], #2
 800f4a2:	bfb4      	ite	lt
 800f4a4:	222d      	movlt	r2, #45	; 0x2d
 800f4a6:	222b      	movge	r2, #43	; 0x2b
 800f4a8:	2909      	cmp	r1, #9
 800f4aa:	7042      	strb	r2, [r0, #1]
 800f4ac:	dd2a      	ble.n	800f504 <__exponent+0x70>
 800f4ae:	f10d 0407 	add.w	r4, sp, #7
 800f4b2:	46a4      	mov	ip, r4
 800f4b4:	270a      	movs	r7, #10
 800f4b6:	46a6      	mov	lr, r4
 800f4b8:	460a      	mov	r2, r1
 800f4ba:	fb91 f6f7 	sdiv	r6, r1, r7
 800f4be:	fb07 1516 	mls	r5, r7, r6, r1
 800f4c2:	3530      	adds	r5, #48	; 0x30
 800f4c4:	2a63      	cmp	r2, #99	; 0x63
 800f4c6:	f104 34ff 	add.w	r4, r4, #4294967295
 800f4ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f4ce:	4631      	mov	r1, r6
 800f4d0:	dcf1      	bgt.n	800f4b6 <__exponent+0x22>
 800f4d2:	3130      	adds	r1, #48	; 0x30
 800f4d4:	f1ae 0502 	sub.w	r5, lr, #2
 800f4d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f4dc:	1c44      	adds	r4, r0, #1
 800f4de:	4629      	mov	r1, r5
 800f4e0:	4561      	cmp	r1, ip
 800f4e2:	d30a      	bcc.n	800f4fa <__exponent+0x66>
 800f4e4:	f10d 0209 	add.w	r2, sp, #9
 800f4e8:	eba2 020e 	sub.w	r2, r2, lr
 800f4ec:	4565      	cmp	r5, ip
 800f4ee:	bf88      	it	hi
 800f4f0:	2200      	movhi	r2, #0
 800f4f2:	4413      	add	r3, r2
 800f4f4:	1a18      	subs	r0, r3, r0
 800f4f6:	b003      	add	sp, #12
 800f4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f4fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f502:	e7ed      	b.n	800f4e0 <__exponent+0x4c>
 800f504:	2330      	movs	r3, #48	; 0x30
 800f506:	3130      	adds	r1, #48	; 0x30
 800f508:	7083      	strb	r3, [r0, #2]
 800f50a:	70c1      	strb	r1, [r0, #3]
 800f50c:	1d03      	adds	r3, r0, #4
 800f50e:	e7f1      	b.n	800f4f4 <__exponent+0x60>

0800f510 <_printf_float>:
 800f510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f514:	ed2d 8b02 	vpush	{d8}
 800f518:	b08d      	sub	sp, #52	; 0x34
 800f51a:	460c      	mov	r4, r1
 800f51c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f520:	4616      	mov	r6, r2
 800f522:	461f      	mov	r7, r3
 800f524:	4605      	mov	r5, r0
 800f526:	f002 fe89 	bl	801223c <_localeconv_r>
 800f52a:	f8d0 a000 	ldr.w	sl, [r0]
 800f52e:	4650      	mov	r0, sl
 800f530:	f7f0 fe5e 	bl	80001f0 <strlen>
 800f534:	2300      	movs	r3, #0
 800f536:	930a      	str	r3, [sp, #40]	; 0x28
 800f538:	6823      	ldr	r3, [r4, #0]
 800f53a:	9305      	str	r3, [sp, #20]
 800f53c:	f8d8 3000 	ldr.w	r3, [r8]
 800f540:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f544:	3307      	adds	r3, #7
 800f546:	f023 0307 	bic.w	r3, r3, #7
 800f54a:	f103 0208 	add.w	r2, r3, #8
 800f54e:	f8c8 2000 	str.w	r2, [r8]
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f55a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f55e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f562:	9307      	str	r3, [sp, #28]
 800f564:	f8cd 8018 	str.w	r8, [sp, #24]
 800f568:	ee08 0a10 	vmov	s16, r0
 800f56c:	4b9f      	ldr	r3, [pc, #636]	; (800f7ec <_printf_float+0x2dc>)
 800f56e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f572:	f04f 32ff 	mov.w	r2, #4294967295
 800f576:	f7f1 fae9 	bl	8000b4c <__aeabi_dcmpun>
 800f57a:	bb88      	cbnz	r0, 800f5e0 <_printf_float+0xd0>
 800f57c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f580:	4b9a      	ldr	r3, [pc, #616]	; (800f7ec <_printf_float+0x2dc>)
 800f582:	f04f 32ff 	mov.w	r2, #4294967295
 800f586:	f7f1 fac3 	bl	8000b10 <__aeabi_dcmple>
 800f58a:	bb48      	cbnz	r0, 800f5e0 <_printf_float+0xd0>
 800f58c:	2200      	movs	r2, #0
 800f58e:	2300      	movs	r3, #0
 800f590:	4640      	mov	r0, r8
 800f592:	4649      	mov	r1, r9
 800f594:	f7f1 fab2 	bl	8000afc <__aeabi_dcmplt>
 800f598:	b110      	cbz	r0, 800f5a0 <_printf_float+0x90>
 800f59a:	232d      	movs	r3, #45	; 0x2d
 800f59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5a0:	4b93      	ldr	r3, [pc, #588]	; (800f7f0 <_printf_float+0x2e0>)
 800f5a2:	4894      	ldr	r0, [pc, #592]	; (800f7f4 <_printf_float+0x2e4>)
 800f5a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f5a8:	bf94      	ite	ls
 800f5aa:	4698      	movls	r8, r3
 800f5ac:	4680      	movhi	r8, r0
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	6123      	str	r3, [r4, #16]
 800f5b2:	9b05      	ldr	r3, [sp, #20]
 800f5b4:	f023 0204 	bic.w	r2, r3, #4
 800f5b8:	6022      	str	r2, [r4, #0]
 800f5ba:	f04f 0900 	mov.w	r9, #0
 800f5be:	9700      	str	r7, [sp, #0]
 800f5c0:	4633      	mov	r3, r6
 800f5c2:	aa0b      	add	r2, sp, #44	; 0x2c
 800f5c4:	4621      	mov	r1, r4
 800f5c6:	4628      	mov	r0, r5
 800f5c8:	f000 f9d8 	bl	800f97c <_printf_common>
 800f5cc:	3001      	adds	r0, #1
 800f5ce:	f040 8090 	bne.w	800f6f2 <_printf_float+0x1e2>
 800f5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5d6:	b00d      	add	sp, #52	; 0x34
 800f5d8:	ecbd 8b02 	vpop	{d8}
 800f5dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e0:	4642      	mov	r2, r8
 800f5e2:	464b      	mov	r3, r9
 800f5e4:	4640      	mov	r0, r8
 800f5e6:	4649      	mov	r1, r9
 800f5e8:	f7f1 fab0 	bl	8000b4c <__aeabi_dcmpun>
 800f5ec:	b140      	cbz	r0, 800f600 <_printf_float+0xf0>
 800f5ee:	464b      	mov	r3, r9
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bfbc      	itt	lt
 800f5f4:	232d      	movlt	r3, #45	; 0x2d
 800f5f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f5fa:	487f      	ldr	r0, [pc, #508]	; (800f7f8 <_printf_float+0x2e8>)
 800f5fc:	4b7f      	ldr	r3, [pc, #508]	; (800f7fc <_printf_float+0x2ec>)
 800f5fe:	e7d1      	b.n	800f5a4 <_printf_float+0x94>
 800f600:	6863      	ldr	r3, [r4, #4]
 800f602:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f606:	9206      	str	r2, [sp, #24]
 800f608:	1c5a      	adds	r2, r3, #1
 800f60a:	d13f      	bne.n	800f68c <_printf_float+0x17c>
 800f60c:	2306      	movs	r3, #6
 800f60e:	6063      	str	r3, [r4, #4]
 800f610:	9b05      	ldr	r3, [sp, #20]
 800f612:	6861      	ldr	r1, [r4, #4]
 800f614:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f618:	2300      	movs	r3, #0
 800f61a:	9303      	str	r3, [sp, #12]
 800f61c:	ab0a      	add	r3, sp, #40	; 0x28
 800f61e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f622:	ab09      	add	r3, sp, #36	; 0x24
 800f624:	ec49 8b10 	vmov	d0, r8, r9
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	6022      	str	r2, [r4, #0]
 800f62c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f630:	4628      	mov	r0, r5
 800f632:	f7ff fecd 	bl	800f3d0 <__cvt>
 800f636:	9b06      	ldr	r3, [sp, #24]
 800f638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f63a:	2b47      	cmp	r3, #71	; 0x47
 800f63c:	4680      	mov	r8, r0
 800f63e:	d108      	bne.n	800f652 <_printf_float+0x142>
 800f640:	1cc8      	adds	r0, r1, #3
 800f642:	db02      	blt.n	800f64a <_printf_float+0x13a>
 800f644:	6863      	ldr	r3, [r4, #4]
 800f646:	4299      	cmp	r1, r3
 800f648:	dd41      	ble.n	800f6ce <_printf_float+0x1be>
 800f64a:	f1ab 0b02 	sub.w	fp, fp, #2
 800f64e:	fa5f fb8b 	uxtb.w	fp, fp
 800f652:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f656:	d820      	bhi.n	800f69a <_printf_float+0x18a>
 800f658:	3901      	subs	r1, #1
 800f65a:	465a      	mov	r2, fp
 800f65c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f660:	9109      	str	r1, [sp, #36]	; 0x24
 800f662:	f7ff ff17 	bl	800f494 <__exponent>
 800f666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f668:	1813      	adds	r3, r2, r0
 800f66a:	2a01      	cmp	r2, #1
 800f66c:	4681      	mov	r9, r0
 800f66e:	6123      	str	r3, [r4, #16]
 800f670:	dc02      	bgt.n	800f678 <_printf_float+0x168>
 800f672:	6822      	ldr	r2, [r4, #0]
 800f674:	07d2      	lsls	r2, r2, #31
 800f676:	d501      	bpl.n	800f67c <_printf_float+0x16c>
 800f678:	3301      	adds	r3, #1
 800f67a:	6123      	str	r3, [r4, #16]
 800f67c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f680:	2b00      	cmp	r3, #0
 800f682:	d09c      	beq.n	800f5be <_printf_float+0xae>
 800f684:	232d      	movs	r3, #45	; 0x2d
 800f686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f68a:	e798      	b.n	800f5be <_printf_float+0xae>
 800f68c:	9a06      	ldr	r2, [sp, #24]
 800f68e:	2a47      	cmp	r2, #71	; 0x47
 800f690:	d1be      	bne.n	800f610 <_printf_float+0x100>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d1bc      	bne.n	800f610 <_printf_float+0x100>
 800f696:	2301      	movs	r3, #1
 800f698:	e7b9      	b.n	800f60e <_printf_float+0xfe>
 800f69a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f69e:	d118      	bne.n	800f6d2 <_printf_float+0x1c2>
 800f6a0:	2900      	cmp	r1, #0
 800f6a2:	6863      	ldr	r3, [r4, #4]
 800f6a4:	dd0b      	ble.n	800f6be <_printf_float+0x1ae>
 800f6a6:	6121      	str	r1, [r4, #16]
 800f6a8:	b913      	cbnz	r3, 800f6b0 <_printf_float+0x1a0>
 800f6aa:	6822      	ldr	r2, [r4, #0]
 800f6ac:	07d0      	lsls	r0, r2, #31
 800f6ae:	d502      	bpl.n	800f6b6 <_printf_float+0x1a6>
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	440b      	add	r3, r1
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	65a1      	str	r1, [r4, #88]	; 0x58
 800f6b8:	f04f 0900 	mov.w	r9, #0
 800f6bc:	e7de      	b.n	800f67c <_printf_float+0x16c>
 800f6be:	b913      	cbnz	r3, 800f6c6 <_printf_float+0x1b6>
 800f6c0:	6822      	ldr	r2, [r4, #0]
 800f6c2:	07d2      	lsls	r2, r2, #31
 800f6c4:	d501      	bpl.n	800f6ca <_printf_float+0x1ba>
 800f6c6:	3302      	adds	r3, #2
 800f6c8:	e7f4      	b.n	800f6b4 <_printf_float+0x1a4>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e7f2      	b.n	800f6b4 <_printf_float+0x1a4>
 800f6ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f6d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6d4:	4299      	cmp	r1, r3
 800f6d6:	db05      	blt.n	800f6e4 <_printf_float+0x1d4>
 800f6d8:	6823      	ldr	r3, [r4, #0]
 800f6da:	6121      	str	r1, [r4, #16]
 800f6dc:	07d8      	lsls	r0, r3, #31
 800f6de:	d5ea      	bpl.n	800f6b6 <_printf_float+0x1a6>
 800f6e0:	1c4b      	adds	r3, r1, #1
 800f6e2:	e7e7      	b.n	800f6b4 <_printf_float+0x1a4>
 800f6e4:	2900      	cmp	r1, #0
 800f6e6:	bfd4      	ite	le
 800f6e8:	f1c1 0202 	rsble	r2, r1, #2
 800f6ec:	2201      	movgt	r2, #1
 800f6ee:	4413      	add	r3, r2
 800f6f0:	e7e0      	b.n	800f6b4 <_printf_float+0x1a4>
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	055a      	lsls	r2, r3, #21
 800f6f6:	d407      	bmi.n	800f708 <_printf_float+0x1f8>
 800f6f8:	6923      	ldr	r3, [r4, #16]
 800f6fa:	4642      	mov	r2, r8
 800f6fc:	4631      	mov	r1, r6
 800f6fe:	4628      	mov	r0, r5
 800f700:	47b8      	blx	r7
 800f702:	3001      	adds	r0, #1
 800f704:	d12c      	bne.n	800f760 <_printf_float+0x250>
 800f706:	e764      	b.n	800f5d2 <_printf_float+0xc2>
 800f708:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f70c:	f240 80e0 	bls.w	800f8d0 <_printf_float+0x3c0>
 800f710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f714:	2200      	movs	r2, #0
 800f716:	2300      	movs	r3, #0
 800f718:	f7f1 f9e6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d034      	beq.n	800f78a <_printf_float+0x27a>
 800f720:	4a37      	ldr	r2, [pc, #220]	; (800f800 <_printf_float+0x2f0>)
 800f722:	2301      	movs	r3, #1
 800f724:	4631      	mov	r1, r6
 800f726:	4628      	mov	r0, r5
 800f728:	47b8      	blx	r7
 800f72a:	3001      	adds	r0, #1
 800f72c:	f43f af51 	beq.w	800f5d2 <_printf_float+0xc2>
 800f730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f734:	429a      	cmp	r2, r3
 800f736:	db02      	blt.n	800f73e <_printf_float+0x22e>
 800f738:	6823      	ldr	r3, [r4, #0]
 800f73a:	07d8      	lsls	r0, r3, #31
 800f73c:	d510      	bpl.n	800f760 <_printf_float+0x250>
 800f73e:	ee18 3a10 	vmov	r3, s16
 800f742:	4652      	mov	r2, sl
 800f744:	4631      	mov	r1, r6
 800f746:	4628      	mov	r0, r5
 800f748:	47b8      	blx	r7
 800f74a:	3001      	adds	r0, #1
 800f74c:	f43f af41 	beq.w	800f5d2 <_printf_float+0xc2>
 800f750:	f04f 0800 	mov.w	r8, #0
 800f754:	f104 091a 	add.w	r9, r4, #26
 800f758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f75a:	3b01      	subs	r3, #1
 800f75c:	4543      	cmp	r3, r8
 800f75e:	dc09      	bgt.n	800f774 <_printf_float+0x264>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	079b      	lsls	r3, r3, #30
 800f764:	f100 8105 	bmi.w	800f972 <_printf_float+0x462>
 800f768:	68e0      	ldr	r0, [r4, #12]
 800f76a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f76c:	4298      	cmp	r0, r3
 800f76e:	bfb8      	it	lt
 800f770:	4618      	movlt	r0, r3
 800f772:	e730      	b.n	800f5d6 <_printf_float+0xc6>
 800f774:	2301      	movs	r3, #1
 800f776:	464a      	mov	r2, r9
 800f778:	4631      	mov	r1, r6
 800f77a:	4628      	mov	r0, r5
 800f77c:	47b8      	blx	r7
 800f77e:	3001      	adds	r0, #1
 800f780:	f43f af27 	beq.w	800f5d2 <_printf_float+0xc2>
 800f784:	f108 0801 	add.w	r8, r8, #1
 800f788:	e7e6      	b.n	800f758 <_printf_float+0x248>
 800f78a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	dc39      	bgt.n	800f804 <_printf_float+0x2f4>
 800f790:	4a1b      	ldr	r2, [pc, #108]	; (800f800 <_printf_float+0x2f0>)
 800f792:	2301      	movs	r3, #1
 800f794:	4631      	mov	r1, r6
 800f796:	4628      	mov	r0, r5
 800f798:	47b8      	blx	r7
 800f79a:	3001      	adds	r0, #1
 800f79c:	f43f af19 	beq.w	800f5d2 <_printf_float+0xc2>
 800f7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	d102      	bne.n	800f7ae <_printf_float+0x29e>
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	07d9      	lsls	r1, r3, #31
 800f7ac:	d5d8      	bpl.n	800f760 <_printf_float+0x250>
 800f7ae:	ee18 3a10 	vmov	r3, s16
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af09 	beq.w	800f5d2 <_printf_float+0xc2>
 800f7c0:	f04f 0900 	mov.w	r9, #0
 800f7c4:	f104 0a1a 	add.w	sl, r4, #26
 800f7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7ca:	425b      	negs	r3, r3
 800f7cc:	454b      	cmp	r3, r9
 800f7ce:	dc01      	bgt.n	800f7d4 <_printf_float+0x2c4>
 800f7d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7d2:	e792      	b.n	800f6fa <_printf_float+0x1ea>
 800f7d4:	2301      	movs	r3, #1
 800f7d6:	4652      	mov	r2, sl
 800f7d8:	4631      	mov	r1, r6
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b8      	blx	r7
 800f7de:	3001      	adds	r0, #1
 800f7e0:	f43f aef7 	beq.w	800f5d2 <_printf_float+0xc2>
 800f7e4:	f109 0901 	add.w	r9, r9, #1
 800f7e8:	e7ee      	b.n	800f7c8 <_printf_float+0x2b8>
 800f7ea:	bf00      	nop
 800f7ec:	7fefffff 	.word	0x7fefffff
 800f7f0:	080158bc 	.word	0x080158bc
 800f7f4:	080158c0 	.word	0x080158c0
 800f7f8:	080158c8 	.word	0x080158c8
 800f7fc:	080158c4 	.word	0x080158c4
 800f800:	080158cc 	.word	0x080158cc
 800f804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f808:	429a      	cmp	r2, r3
 800f80a:	bfa8      	it	ge
 800f80c:	461a      	movge	r2, r3
 800f80e:	2a00      	cmp	r2, #0
 800f810:	4691      	mov	r9, r2
 800f812:	dc37      	bgt.n	800f884 <_printf_float+0x374>
 800f814:	f04f 0b00 	mov.w	fp, #0
 800f818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f81c:	f104 021a 	add.w	r2, r4, #26
 800f820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f822:	9305      	str	r3, [sp, #20]
 800f824:	eba3 0309 	sub.w	r3, r3, r9
 800f828:	455b      	cmp	r3, fp
 800f82a:	dc33      	bgt.n	800f894 <_printf_float+0x384>
 800f82c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f830:	429a      	cmp	r2, r3
 800f832:	db3b      	blt.n	800f8ac <_printf_float+0x39c>
 800f834:	6823      	ldr	r3, [r4, #0]
 800f836:	07da      	lsls	r2, r3, #31
 800f838:	d438      	bmi.n	800f8ac <_printf_float+0x39c>
 800f83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f83c:	9a05      	ldr	r2, [sp, #20]
 800f83e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f840:	1a9a      	subs	r2, r3, r2
 800f842:	eba3 0901 	sub.w	r9, r3, r1
 800f846:	4591      	cmp	r9, r2
 800f848:	bfa8      	it	ge
 800f84a:	4691      	movge	r9, r2
 800f84c:	f1b9 0f00 	cmp.w	r9, #0
 800f850:	dc35      	bgt.n	800f8be <_printf_float+0x3ae>
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f85a:	f104 0a1a 	add.w	sl, r4, #26
 800f85e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f862:	1a9b      	subs	r3, r3, r2
 800f864:	eba3 0309 	sub.w	r3, r3, r9
 800f868:	4543      	cmp	r3, r8
 800f86a:	f77f af79 	ble.w	800f760 <_printf_float+0x250>
 800f86e:	2301      	movs	r3, #1
 800f870:	4652      	mov	r2, sl
 800f872:	4631      	mov	r1, r6
 800f874:	4628      	mov	r0, r5
 800f876:	47b8      	blx	r7
 800f878:	3001      	adds	r0, #1
 800f87a:	f43f aeaa 	beq.w	800f5d2 <_printf_float+0xc2>
 800f87e:	f108 0801 	add.w	r8, r8, #1
 800f882:	e7ec      	b.n	800f85e <_printf_float+0x34e>
 800f884:	4613      	mov	r3, r2
 800f886:	4631      	mov	r1, r6
 800f888:	4642      	mov	r2, r8
 800f88a:	4628      	mov	r0, r5
 800f88c:	47b8      	blx	r7
 800f88e:	3001      	adds	r0, #1
 800f890:	d1c0      	bne.n	800f814 <_printf_float+0x304>
 800f892:	e69e      	b.n	800f5d2 <_printf_float+0xc2>
 800f894:	2301      	movs	r3, #1
 800f896:	4631      	mov	r1, r6
 800f898:	4628      	mov	r0, r5
 800f89a:	9205      	str	r2, [sp, #20]
 800f89c:	47b8      	blx	r7
 800f89e:	3001      	adds	r0, #1
 800f8a0:	f43f ae97 	beq.w	800f5d2 <_printf_float+0xc2>
 800f8a4:	9a05      	ldr	r2, [sp, #20]
 800f8a6:	f10b 0b01 	add.w	fp, fp, #1
 800f8aa:	e7b9      	b.n	800f820 <_printf_float+0x310>
 800f8ac:	ee18 3a10 	vmov	r3, s16
 800f8b0:	4652      	mov	r2, sl
 800f8b2:	4631      	mov	r1, r6
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	47b8      	blx	r7
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	d1be      	bne.n	800f83a <_printf_float+0x32a>
 800f8bc:	e689      	b.n	800f5d2 <_printf_float+0xc2>
 800f8be:	9a05      	ldr	r2, [sp, #20]
 800f8c0:	464b      	mov	r3, r9
 800f8c2:	4442      	add	r2, r8
 800f8c4:	4631      	mov	r1, r6
 800f8c6:	4628      	mov	r0, r5
 800f8c8:	47b8      	blx	r7
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d1c1      	bne.n	800f852 <_printf_float+0x342>
 800f8ce:	e680      	b.n	800f5d2 <_printf_float+0xc2>
 800f8d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8d2:	2a01      	cmp	r2, #1
 800f8d4:	dc01      	bgt.n	800f8da <_printf_float+0x3ca>
 800f8d6:	07db      	lsls	r3, r3, #31
 800f8d8:	d538      	bpl.n	800f94c <_printf_float+0x43c>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	4642      	mov	r2, r8
 800f8de:	4631      	mov	r1, r6
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	47b8      	blx	r7
 800f8e4:	3001      	adds	r0, #1
 800f8e6:	f43f ae74 	beq.w	800f5d2 <_printf_float+0xc2>
 800f8ea:	ee18 3a10 	vmov	r3, s16
 800f8ee:	4652      	mov	r2, sl
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	f43f ae6b 	beq.w	800f5d2 <_printf_float+0xc2>
 800f8fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f900:	2200      	movs	r2, #0
 800f902:	2300      	movs	r3, #0
 800f904:	f7f1 f8f0 	bl	8000ae8 <__aeabi_dcmpeq>
 800f908:	b9d8      	cbnz	r0, 800f942 <_printf_float+0x432>
 800f90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f90c:	f108 0201 	add.w	r2, r8, #1
 800f910:	3b01      	subs	r3, #1
 800f912:	4631      	mov	r1, r6
 800f914:	4628      	mov	r0, r5
 800f916:	47b8      	blx	r7
 800f918:	3001      	adds	r0, #1
 800f91a:	d10e      	bne.n	800f93a <_printf_float+0x42a>
 800f91c:	e659      	b.n	800f5d2 <_printf_float+0xc2>
 800f91e:	2301      	movs	r3, #1
 800f920:	4652      	mov	r2, sl
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	f43f ae52 	beq.w	800f5d2 <_printf_float+0xc2>
 800f92e:	f108 0801 	add.w	r8, r8, #1
 800f932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f934:	3b01      	subs	r3, #1
 800f936:	4543      	cmp	r3, r8
 800f938:	dcf1      	bgt.n	800f91e <_printf_float+0x40e>
 800f93a:	464b      	mov	r3, r9
 800f93c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f940:	e6dc      	b.n	800f6fc <_printf_float+0x1ec>
 800f942:	f04f 0800 	mov.w	r8, #0
 800f946:	f104 0a1a 	add.w	sl, r4, #26
 800f94a:	e7f2      	b.n	800f932 <_printf_float+0x422>
 800f94c:	2301      	movs	r3, #1
 800f94e:	4642      	mov	r2, r8
 800f950:	e7df      	b.n	800f912 <_printf_float+0x402>
 800f952:	2301      	movs	r3, #1
 800f954:	464a      	mov	r2, r9
 800f956:	4631      	mov	r1, r6
 800f958:	4628      	mov	r0, r5
 800f95a:	47b8      	blx	r7
 800f95c:	3001      	adds	r0, #1
 800f95e:	f43f ae38 	beq.w	800f5d2 <_printf_float+0xc2>
 800f962:	f108 0801 	add.w	r8, r8, #1
 800f966:	68e3      	ldr	r3, [r4, #12]
 800f968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f96a:	1a5b      	subs	r3, r3, r1
 800f96c:	4543      	cmp	r3, r8
 800f96e:	dcf0      	bgt.n	800f952 <_printf_float+0x442>
 800f970:	e6fa      	b.n	800f768 <_printf_float+0x258>
 800f972:	f04f 0800 	mov.w	r8, #0
 800f976:	f104 0919 	add.w	r9, r4, #25
 800f97a:	e7f4      	b.n	800f966 <_printf_float+0x456>

0800f97c <_printf_common>:
 800f97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f980:	4616      	mov	r6, r2
 800f982:	4699      	mov	r9, r3
 800f984:	688a      	ldr	r2, [r1, #8]
 800f986:	690b      	ldr	r3, [r1, #16]
 800f988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f98c:	4293      	cmp	r3, r2
 800f98e:	bfb8      	it	lt
 800f990:	4613      	movlt	r3, r2
 800f992:	6033      	str	r3, [r6, #0]
 800f994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f998:	4607      	mov	r7, r0
 800f99a:	460c      	mov	r4, r1
 800f99c:	b10a      	cbz	r2, 800f9a2 <_printf_common+0x26>
 800f99e:	3301      	adds	r3, #1
 800f9a0:	6033      	str	r3, [r6, #0]
 800f9a2:	6823      	ldr	r3, [r4, #0]
 800f9a4:	0699      	lsls	r1, r3, #26
 800f9a6:	bf42      	ittt	mi
 800f9a8:	6833      	ldrmi	r3, [r6, #0]
 800f9aa:	3302      	addmi	r3, #2
 800f9ac:	6033      	strmi	r3, [r6, #0]
 800f9ae:	6825      	ldr	r5, [r4, #0]
 800f9b0:	f015 0506 	ands.w	r5, r5, #6
 800f9b4:	d106      	bne.n	800f9c4 <_printf_common+0x48>
 800f9b6:	f104 0a19 	add.w	sl, r4, #25
 800f9ba:	68e3      	ldr	r3, [r4, #12]
 800f9bc:	6832      	ldr	r2, [r6, #0]
 800f9be:	1a9b      	subs	r3, r3, r2
 800f9c0:	42ab      	cmp	r3, r5
 800f9c2:	dc26      	bgt.n	800fa12 <_printf_common+0x96>
 800f9c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9c8:	1e13      	subs	r3, r2, #0
 800f9ca:	6822      	ldr	r2, [r4, #0]
 800f9cc:	bf18      	it	ne
 800f9ce:	2301      	movne	r3, #1
 800f9d0:	0692      	lsls	r2, r2, #26
 800f9d2:	d42b      	bmi.n	800fa2c <_printf_common+0xb0>
 800f9d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9d8:	4649      	mov	r1, r9
 800f9da:	4638      	mov	r0, r7
 800f9dc:	47c0      	blx	r8
 800f9de:	3001      	adds	r0, #1
 800f9e0:	d01e      	beq.n	800fa20 <_printf_common+0xa4>
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	68e5      	ldr	r5, [r4, #12]
 800f9e6:	6832      	ldr	r2, [r6, #0]
 800f9e8:	f003 0306 	and.w	r3, r3, #6
 800f9ec:	2b04      	cmp	r3, #4
 800f9ee:	bf08      	it	eq
 800f9f0:	1aad      	subeq	r5, r5, r2
 800f9f2:	68a3      	ldr	r3, [r4, #8]
 800f9f4:	6922      	ldr	r2, [r4, #16]
 800f9f6:	bf0c      	ite	eq
 800f9f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9fc:	2500      	movne	r5, #0
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	bfc4      	itt	gt
 800fa02:	1a9b      	subgt	r3, r3, r2
 800fa04:	18ed      	addgt	r5, r5, r3
 800fa06:	2600      	movs	r6, #0
 800fa08:	341a      	adds	r4, #26
 800fa0a:	42b5      	cmp	r5, r6
 800fa0c:	d11a      	bne.n	800fa44 <_printf_common+0xc8>
 800fa0e:	2000      	movs	r0, #0
 800fa10:	e008      	b.n	800fa24 <_printf_common+0xa8>
 800fa12:	2301      	movs	r3, #1
 800fa14:	4652      	mov	r2, sl
 800fa16:	4649      	mov	r1, r9
 800fa18:	4638      	mov	r0, r7
 800fa1a:	47c0      	blx	r8
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d103      	bne.n	800fa28 <_printf_common+0xac>
 800fa20:	f04f 30ff 	mov.w	r0, #4294967295
 800fa24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa28:	3501      	adds	r5, #1
 800fa2a:	e7c6      	b.n	800f9ba <_printf_common+0x3e>
 800fa2c:	18e1      	adds	r1, r4, r3
 800fa2e:	1c5a      	adds	r2, r3, #1
 800fa30:	2030      	movs	r0, #48	; 0x30
 800fa32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa36:	4422      	add	r2, r4
 800fa38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa40:	3302      	adds	r3, #2
 800fa42:	e7c7      	b.n	800f9d4 <_printf_common+0x58>
 800fa44:	2301      	movs	r3, #1
 800fa46:	4622      	mov	r2, r4
 800fa48:	4649      	mov	r1, r9
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	47c0      	blx	r8
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d0e6      	beq.n	800fa20 <_printf_common+0xa4>
 800fa52:	3601      	adds	r6, #1
 800fa54:	e7d9      	b.n	800fa0a <_printf_common+0x8e>
	...

0800fa58 <_printf_i>:
 800fa58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa5c:	7e0f      	ldrb	r7, [r1, #24]
 800fa5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa60:	2f78      	cmp	r7, #120	; 0x78
 800fa62:	4691      	mov	r9, r2
 800fa64:	4680      	mov	r8, r0
 800fa66:	460c      	mov	r4, r1
 800fa68:	469a      	mov	sl, r3
 800fa6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa6e:	d807      	bhi.n	800fa80 <_printf_i+0x28>
 800fa70:	2f62      	cmp	r7, #98	; 0x62
 800fa72:	d80a      	bhi.n	800fa8a <_printf_i+0x32>
 800fa74:	2f00      	cmp	r7, #0
 800fa76:	f000 80d8 	beq.w	800fc2a <_printf_i+0x1d2>
 800fa7a:	2f58      	cmp	r7, #88	; 0x58
 800fa7c:	f000 80a3 	beq.w	800fbc6 <_printf_i+0x16e>
 800fa80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa88:	e03a      	b.n	800fb00 <_printf_i+0xa8>
 800fa8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa8e:	2b15      	cmp	r3, #21
 800fa90:	d8f6      	bhi.n	800fa80 <_printf_i+0x28>
 800fa92:	a101      	add	r1, pc, #4	; (adr r1, 800fa98 <_printf_i+0x40>)
 800fa94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa98:	0800faf1 	.word	0x0800faf1
 800fa9c:	0800fb05 	.word	0x0800fb05
 800faa0:	0800fa81 	.word	0x0800fa81
 800faa4:	0800fa81 	.word	0x0800fa81
 800faa8:	0800fa81 	.word	0x0800fa81
 800faac:	0800fa81 	.word	0x0800fa81
 800fab0:	0800fb05 	.word	0x0800fb05
 800fab4:	0800fa81 	.word	0x0800fa81
 800fab8:	0800fa81 	.word	0x0800fa81
 800fabc:	0800fa81 	.word	0x0800fa81
 800fac0:	0800fa81 	.word	0x0800fa81
 800fac4:	0800fc11 	.word	0x0800fc11
 800fac8:	0800fb35 	.word	0x0800fb35
 800facc:	0800fbf3 	.word	0x0800fbf3
 800fad0:	0800fa81 	.word	0x0800fa81
 800fad4:	0800fa81 	.word	0x0800fa81
 800fad8:	0800fc33 	.word	0x0800fc33
 800fadc:	0800fa81 	.word	0x0800fa81
 800fae0:	0800fb35 	.word	0x0800fb35
 800fae4:	0800fa81 	.word	0x0800fa81
 800fae8:	0800fa81 	.word	0x0800fa81
 800faec:	0800fbfb 	.word	0x0800fbfb
 800faf0:	682b      	ldr	r3, [r5, #0]
 800faf2:	1d1a      	adds	r2, r3, #4
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	602a      	str	r2, [r5, #0]
 800faf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fafc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb00:	2301      	movs	r3, #1
 800fb02:	e0a3      	b.n	800fc4c <_printf_i+0x1f4>
 800fb04:	6820      	ldr	r0, [r4, #0]
 800fb06:	6829      	ldr	r1, [r5, #0]
 800fb08:	0606      	lsls	r6, r0, #24
 800fb0a:	f101 0304 	add.w	r3, r1, #4
 800fb0e:	d50a      	bpl.n	800fb26 <_printf_i+0xce>
 800fb10:	680e      	ldr	r6, [r1, #0]
 800fb12:	602b      	str	r3, [r5, #0]
 800fb14:	2e00      	cmp	r6, #0
 800fb16:	da03      	bge.n	800fb20 <_printf_i+0xc8>
 800fb18:	232d      	movs	r3, #45	; 0x2d
 800fb1a:	4276      	negs	r6, r6
 800fb1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb20:	485e      	ldr	r0, [pc, #376]	; (800fc9c <_printf_i+0x244>)
 800fb22:	230a      	movs	r3, #10
 800fb24:	e019      	b.n	800fb5a <_printf_i+0x102>
 800fb26:	680e      	ldr	r6, [r1, #0]
 800fb28:	602b      	str	r3, [r5, #0]
 800fb2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb2e:	bf18      	it	ne
 800fb30:	b236      	sxthne	r6, r6
 800fb32:	e7ef      	b.n	800fb14 <_printf_i+0xbc>
 800fb34:	682b      	ldr	r3, [r5, #0]
 800fb36:	6820      	ldr	r0, [r4, #0]
 800fb38:	1d19      	adds	r1, r3, #4
 800fb3a:	6029      	str	r1, [r5, #0]
 800fb3c:	0601      	lsls	r1, r0, #24
 800fb3e:	d501      	bpl.n	800fb44 <_printf_i+0xec>
 800fb40:	681e      	ldr	r6, [r3, #0]
 800fb42:	e002      	b.n	800fb4a <_printf_i+0xf2>
 800fb44:	0646      	lsls	r6, r0, #25
 800fb46:	d5fb      	bpl.n	800fb40 <_printf_i+0xe8>
 800fb48:	881e      	ldrh	r6, [r3, #0]
 800fb4a:	4854      	ldr	r0, [pc, #336]	; (800fc9c <_printf_i+0x244>)
 800fb4c:	2f6f      	cmp	r7, #111	; 0x6f
 800fb4e:	bf0c      	ite	eq
 800fb50:	2308      	moveq	r3, #8
 800fb52:	230a      	movne	r3, #10
 800fb54:	2100      	movs	r1, #0
 800fb56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb5a:	6865      	ldr	r5, [r4, #4]
 800fb5c:	60a5      	str	r5, [r4, #8]
 800fb5e:	2d00      	cmp	r5, #0
 800fb60:	bfa2      	ittt	ge
 800fb62:	6821      	ldrge	r1, [r4, #0]
 800fb64:	f021 0104 	bicge.w	r1, r1, #4
 800fb68:	6021      	strge	r1, [r4, #0]
 800fb6a:	b90e      	cbnz	r6, 800fb70 <_printf_i+0x118>
 800fb6c:	2d00      	cmp	r5, #0
 800fb6e:	d04d      	beq.n	800fc0c <_printf_i+0x1b4>
 800fb70:	4615      	mov	r5, r2
 800fb72:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb76:	fb03 6711 	mls	r7, r3, r1, r6
 800fb7a:	5dc7      	ldrb	r7, [r0, r7]
 800fb7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb80:	4637      	mov	r7, r6
 800fb82:	42bb      	cmp	r3, r7
 800fb84:	460e      	mov	r6, r1
 800fb86:	d9f4      	bls.n	800fb72 <_printf_i+0x11a>
 800fb88:	2b08      	cmp	r3, #8
 800fb8a:	d10b      	bne.n	800fba4 <_printf_i+0x14c>
 800fb8c:	6823      	ldr	r3, [r4, #0]
 800fb8e:	07de      	lsls	r6, r3, #31
 800fb90:	d508      	bpl.n	800fba4 <_printf_i+0x14c>
 800fb92:	6923      	ldr	r3, [r4, #16]
 800fb94:	6861      	ldr	r1, [r4, #4]
 800fb96:	4299      	cmp	r1, r3
 800fb98:	bfde      	ittt	le
 800fb9a:	2330      	movle	r3, #48	; 0x30
 800fb9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fba4:	1b52      	subs	r2, r2, r5
 800fba6:	6122      	str	r2, [r4, #16]
 800fba8:	f8cd a000 	str.w	sl, [sp]
 800fbac:	464b      	mov	r3, r9
 800fbae:	aa03      	add	r2, sp, #12
 800fbb0:	4621      	mov	r1, r4
 800fbb2:	4640      	mov	r0, r8
 800fbb4:	f7ff fee2 	bl	800f97c <_printf_common>
 800fbb8:	3001      	adds	r0, #1
 800fbba:	d14c      	bne.n	800fc56 <_printf_i+0x1fe>
 800fbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc0:	b004      	add	sp, #16
 800fbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc6:	4835      	ldr	r0, [pc, #212]	; (800fc9c <_printf_i+0x244>)
 800fbc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fbcc:	6829      	ldr	r1, [r5, #0]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbd4:	6029      	str	r1, [r5, #0]
 800fbd6:	061d      	lsls	r5, r3, #24
 800fbd8:	d514      	bpl.n	800fc04 <_printf_i+0x1ac>
 800fbda:	07df      	lsls	r7, r3, #31
 800fbdc:	bf44      	itt	mi
 800fbde:	f043 0320 	orrmi.w	r3, r3, #32
 800fbe2:	6023      	strmi	r3, [r4, #0]
 800fbe4:	b91e      	cbnz	r6, 800fbee <_printf_i+0x196>
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	f023 0320 	bic.w	r3, r3, #32
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	2310      	movs	r3, #16
 800fbf0:	e7b0      	b.n	800fb54 <_printf_i+0xfc>
 800fbf2:	6823      	ldr	r3, [r4, #0]
 800fbf4:	f043 0320 	orr.w	r3, r3, #32
 800fbf8:	6023      	str	r3, [r4, #0]
 800fbfa:	2378      	movs	r3, #120	; 0x78
 800fbfc:	4828      	ldr	r0, [pc, #160]	; (800fca0 <_printf_i+0x248>)
 800fbfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc02:	e7e3      	b.n	800fbcc <_printf_i+0x174>
 800fc04:	0659      	lsls	r1, r3, #25
 800fc06:	bf48      	it	mi
 800fc08:	b2b6      	uxthmi	r6, r6
 800fc0a:	e7e6      	b.n	800fbda <_printf_i+0x182>
 800fc0c:	4615      	mov	r5, r2
 800fc0e:	e7bb      	b.n	800fb88 <_printf_i+0x130>
 800fc10:	682b      	ldr	r3, [r5, #0]
 800fc12:	6826      	ldr	r6, [r4, #0]
 800fc14:	6961      	ldr	r1, [r4, #20]
 800fc16:	1d18      	adds	r0, r3, #4
 800fc18:	6028      	str	r0, [r5, #0]
 800fc1a:	0635      	lsls	r5, r6, #24
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	d501      	bpl.n	800fc24 <_printf_i+0x1cc>
 800fc20:	6019      	str	r1, [r3, #0]
 800fc22:	e002      	b.n	800fc2a <_printf_i+0x1d2>
 800fc24:	0670      	lsls	r0, r6, #25
 800fc26:	d5fb      	bpl.n	800fc20 <_printf_i+0x1c8>
 800fc28:	8019      	strh	r1, [r3, #0]
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	6123      	str	r3, [r4, #16]
 800fc2e:	4615      	mov	r5, r2
 800fc30:	e7ba      	b.n	800fba8 <_printf_i+0x150>
 800fc32:	682b      	ldr	r3, [r5, #0]
 800fc34:	1d1a      	adds	r2, r3, #4
 800fc36:	602a      	str	r2, [r5, #0]
 800fc38:	681d      	ldr	r5, [r3, #0]
 800fc3a:	6862      	ldr	r2, [r4, #4]
 800fc3c:	2100      	movs	r1, #0
 800fc3e:	4628      	mov	r0, r5
 800fc40:	f7f0 fade 	bl	8000200 <memchr>
 800fc44:	b108      	cbz	r0, 800fc4a <_printf_i+0x1f2>
 800fc46:	1b40      	subs	r0, r0, r5
 800fc48:	6060      	str	r0, [r4, #4]
 800fc4a:	6863      	ldr	r3, [r4, #4]
 800fc4c:	6123      	str	r3, [r4, #16]
 800fc4e:	2300      	movs	r3, #0
 800fc50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc54:	e7a8      	b.n	800fba8 <_printf_i+0x150>
 800fc56:	6923      	ldr	r3, [r4, #16]
 800fc58:	462a      	mov	r2, r5
 800fc5a:	4649      	mov	r1, r9
 800fc5c:	4640      	mov	r0, r8
 800fc5e:	47d0      	blx	sl
 800fc60:	3001      	adds	r0, #1
 800fc62:	d0ab      	beq.n	800fbbc <_printf_i+0x164>
 800fc64:	6823      	ldr	r3, [r4, #0]
 800fc66:	079b      	lsls	r3, r3, #30
 800fc68:	d413      	bmi.n	800fc92 <_printf_i+0x23a>
 800fc6a:	68e0      	ldr	r0, [r4, #12]
 800fc6c:	9b03      	ldr	r3, [sp, #12]
 800fc6e:	4298      	cmp	r0, r3
 800fc70:	bfb8      	it	lt
 800fc72:	4618      	movlt	r0, r3
 800fc74:	e7a4      	b.n	800fbc0 <_printf_i+0x168>
 800fc76:	2301      	movs	r3, #1
 800fc78:	4632      	mov	r2, r6
 800fc7a:	4649      	mov	r1, r9
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	47d0      	blx	sl
 800fc80:	3001      	adds	r0, #1
 800fc82:	d09b      	beq.n	800fbbc <_printf_i+0x164>
 800fc84:	3501      	adds	r5, #1
 800fc86:	68e3      	ldr	r3, [r4, #12]
 800fc88:	9903      	ldr	r1, [sp, #12]
 800fc8a:	1a5b      	subs	r3, r3, r1
 800fc8c:	42ab      	cmp	r3, r5
 800fc8e:	dcf2      	bgt.n	800fc76 <_printf_i+0x21e>
 800fc90:	e7eb      	b.n	800fc6a <_printf_i+0x212>
 800fc92:	2500      	movs	r5, #0
 800fc94:	f104 0619 	add.w	r6, r4, #25
 800fc98:	e7f5      	b.n	800fc86 <_printf_i+0x22e>
 800fc9a:	bf00      	nop
 800fc9c:	080158ce 	.word	0x080158ce
 800fca0:	080158df 	.word	0x080158df

0800fca4 <_scanf_float>:
 800fca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca8:	b087      	sub	sp, #28
 800fcaa:	4617      	mov	r7, r2
 800fcac:	9303      	str	r3, [sp, #12]
 800fcae:	688b      	ldr	r3, [r1, #8]
 800fcb0:	1e5a      	subs	r2, r3, #1
 800fcb2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fcb6:	bf83      	ittte	hi
 800fcb8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fcbc:	195b      	addhi	r3, r3, r5
 800fcbe:	9302      	strhi	r3, [sp, #8]
 800fcc0:	2300      	movls	r3, #0
 800fcc2:	bf86      	itte	hi
 800fcc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fcc8:	608b      	strhi	r3, [r1, #8]
 800fcca:	9302      	strls	r3, [sp, #8]
 800fccc:	680b      	ldr	r3, [r1, #0]
 800fcce:	468b      	mov	fp, r1
 800fcd0:	2500      	movs	r5, #0
 800fcd2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fcd6:	f84b 3b1c 	str.w	r3, [fp], #28
 800fcda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fcde:	4680      	mov	r8, r0
 800fce0:	460c      	mov	r4, r1
 800fce2:	465e      	mov	r6, fp
 800fce4:	46aa      	mov	sl, r5
 800fce6:	46a9      	mov	r9, r5
 800fce8:	9501      	str	r5, [sp, #4]
 800fcea:	68a2      	ldr	r2, [r4, #8]
 800fcec:	b152      	cbz	r2, 800fd04 <_scanf_float+0x60>
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	781b      	ldrb	r3, [r3, #0]
 800fcf2:	2b4e      	cmp	r3, #78	; 0x4e
 800fcf4:	d864      	bhi.n	800fdc0 <_scanf_float+0x11c>
 800fcf6:	2b40      	cmp	r3, #64	; 0x40
 800fcf8:	d83c      	bhi.n	800fd74 <_scanf_float+0xd0>
 800fcfa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fcfe:	b2c8      	uxtb	r0, r1
 800fd00:	280e      	cmp	r0, #14
 800fd02:	d93a      	bls.n	800fd7a <_scanf_float+0xd6>
 800fd04:	f1b9 0f00 	cmp.w	r9, #0
 800fd08:	d003      	beq.n	800fd12 <_scanf_float+0x6e>
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd16:	f1ba 0f01 	cmp.w	sl, #1
 800fd1a:	f200 8113 	bhi.w	800ff44 <_scanf_float+0x2a0>
 800fd1e:	455e      	cmp	r6, fp
 800fd20:	f200 8105 	bhi.w	800ff2e <_scanf_float+0x28a>
 800fd24:	2501      	movs	r5, #1
 800fd26:	4628      	mov	r0, r5
 800fd28:	b007      	add	sp, #28
 800fd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd2e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fd32:	2a0d      	cmp	r2, #13
 800fd34:	d8e6      	bhi.n	800fd04 <_scanf_float+0x60>
 800fd36:	a101      	add	r1, pc, #4	; (adr r1, 800fd3c <_scanf_float+0x98>)
 800fd38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fd3c:	0800fe7b 	.word	0x0800fe7b
 800fd40:	0800fd05 	.word	0x0800fd05
 800fd44:	0800fd05 	.word	0x0800fd05
 800fd48:	0800fd05 	.word	0x0800fd05
 800fd4c:	0800fedb 	.word	0x0800fedb
 800fd50:	0800feb3 	.word	0x0800feb3
 800fd54:	0800fd05 	.word	0x0800fd05
 800fd58:	0800fd05 	.word	0x0800fd05
 800fd5c:	0800fe89 	.word	0x0800fe89
 800fd60:	0800fd05 	.word	0x0800fd05
 800fd64:	0800fd05 	.word	0x0800fd05
 800fd68:	0800fd05 	.word	0x0800fd05
 800fd6c:	0800fd05 	.word	0x0800fd05
 800fd70:	0800fe41 	.word	0x0800fe41
 800fd74:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fd78:	e7db      	b.n	800fd32 <_scanf_float+0x8e>
 800fd7a:	290e      	cmp	r1, #14
 800fd7c:	d8c2      	bhi.n	800fd04 <_scanf_float+0x60>
 800fd7e:	a001      	add	r0, pc, #4	; (adr r0, 800fd84 <_scanf_float+0xe0>)
 800fd80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fd84:	0800fe33 	.word	0x0800fe33
 800fd88:	0800fd05 	.word	0x0800fd05
 800fd8c:	0800fe33 	.word	0x0800fe33
 800fd90:	0800fec7 	.word	0x0800fec7
 800fd94:	0800fd05 	.word	0x0800fd05
 800fd98:	0800fde1 	.word	0x0800fde1
 800fd9c:	0800fe1d 	.word	0x0800fe1d
 800fda0:	0800fe1d 	.word	0x0800fe1d
 800fda4:	0800fe1d 	.word	0x0800fe1d
 800fda8:	0800fe1d 	.word	0x0800fe1d
 800fdac:	0800fe1d 	.word	0x0800fe1d
 800fdb0:	0800fe1d 	.word	0x0800fe1d
 800fdb4:	0800fe1d 	.word	0x0800fe1d
 800fdb8:	0800fe1d 	.word	0x0800fe1d
 800fdbc:	0800fe1d 	.word	0x0800fe1d
 800fdc0:	2b6e      	cmp	r3, #110	; 0x6e
 800fdc2:	d809      	bhi.n	800fdd8 <_scanf_float+0x134>
 800fdc4:	2b60      	cmp	r3, #96	; 0x60
 800fdc6:	d8b2      	bhi.n	800fd2e <_scanf_float+0x8a>
 800fdc8:	2b54      	cmp	r3, #84	; 0x54
 800fdca:	d077      	beq.n	800febc <_scanf_float+0x218>
 800fdcc:	2b59      	cmp	r3, #89	; 0x59
 800fdce:	d199      	bne.n	800fd04 <_scanf_float+0x60>
 800fdd0:	2d07      	cmp	r5, #7
 800fdd2:	d197      	bne.n	800fd04 <_scanf_float+0x60>
 800fdd4:	2508      	movs	r5, #8
 800fdd6:	e029      	b.n	800fe2c <_scanf_float+0x188>
 800fdd8:	2b74      	cmp	r3, #116	; 0x74
 800fdda:	d06f      	beq.n	800febc <_scanf_float+0x218>
 800fddc:	2b79      	cmp	r3, #121	; 0x79
 800fdde:	e7f6      	b.n	800fdce <_scanf_float+0x12a>
 800fde0:	6821      	ldr	r1, [r4, #0]
 800fde2:	05c8      	lsls	r0, r1, #23
 800fde4:	d51a      	bpl.n	800fe1c <_scanf_float+0x178>
 800fde6:	9b02      	ldr	r3, [sp, #8]
 800fde8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fdec:	6021      	str	r1, [r4, #0]
 800fdee:	f109 0901 	add.w	r9, r9, #1
 800fdf2:	b11b      	cbz	r3, 800fdfc <_scanf_float+0x158>
 800fdf4:	3b01      	subs	r3, #1
 800fdf6:	3201      	adds	r2, #1
 800fdf8:	9302      	str	r3, [sp, #8]
 800fdfa:	60a2      	str	r2, [r4, #8]
 800fdfc:	68a3      	ldr	r3, [r4, #8]
 800fdfe:	3b01      	subs	r3, #1
 800fe00:	60a3      	str	r3, [r4, #8]
 800fe02:	6923      	ldr	r3, [r4, #16]
 800fe04:	3301      	adds	r3, #1
 800fe06:	6123      	str	r3, [r4, #16]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	3b01      	subs	r3, #1
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	607b      	str	r3, [r7, #4]
 800fe10:	f340 8084 	ble.w	800ff1c <_scanf_float+0x278>
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	3301      	adds	r3, #1
 800fe18:	603b      	str	r3, [r7, #0]
 800fe1a:	e766      	b.n	800fcea <_scanf_float+0x46>
 800fe1c:	eb1a 0f05 	cmn.w	sl, r5
 800fe20:	f47f af70 	bne.w	800fd04 <_scanf_float+0x60>
 800fe24:	6822      	ldr	r2, [r4, #0]
 800fe26:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fe2a:	6022      	str	r2, [r4, #0]
 800fe2c:	f806 3b01 	strb.w	r3, [r6], #1
 800fe30:	e7e4      	b.n	800fdfc <_scanf_float+0x158>
 800fe32:	6822      	ldr	r2, [r4, #0]
 800fe34:	0610      	lsls	r0, r2, #24
 800fe36:	f57f af65 	bpl.w	800fd04 <_scanf_float+0x60>
 800fe3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fe3e:	e7f4      	b.n	800fe2a <_scanf_float+0x186>
 800fe40:	f1ba 0f00 	cmp.w	sl, #0
 800fe44:	d10e      	bne.n	800fe64 <_scanf_float+0x1c0>
 800fe46:	f1b9 0f00 	cmp.w	r9, #0
 800fe4a:	d10e      	bne.n	800fe6a <_scanf_float+0x1c6>
 800fe4c:	6822      	ldr	r2, [r4, #0]
 800fe4e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe52:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe56:	d108      	bne.n	800fe6a <_scanf_float+0x1c6>
 800fe58:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fe5c:	6022      	str	r2, [r4, #0]
 800fe5e:	f04f 0a01 	mov.w	sl, #1
 800fe62:	e7e3      	b.n	800fe2c <_scanf_float+0x188>
 800fe64:	f1ba 0f02 	cmp.w	sl, #2
 800fe68:	d055      	beq.n	800ff16 <_scanf_float+0x272>
 800fe6a:	2d01      	cmp	r5, #1
 800fe6c:	d002      	beq.n	800fe74 <_scanf_float+0x1d0>
 800fe6e:	2d04      	cmp	r5, #4
 800fe70:	f47f af48 	bne.w	800fd04 <_scanf_float+0x60>
 800fe74:	3501      	adds	r5, #1
 800fe76:	b2ed      	uxtb	r5, r5
 800fe78:	e7d8      	b.n	800fe2c <_scanf_float+0x188>
 800fe7a:	f1ba 0f01 	cmp.w	sl, #1
 800fe7e:	f47f af41 	bne.w	800fd04 <_scanf_float+0x60>
 800fe82:	f04f 0a02 	mov.w	sl, #2
 800fe86:	e7d1      	b.n	800fe2c <_scanf_float+0x188>
 800fe88:	b97d      	cbnz	r5, 800feaa <_scanf_float+0x206>
 800fe8a:	f1b9 0f00 	cmp.w	r9, #0
 800fe8e:	f47f af3c 	bne.w	800fd0a <_scanf_float+0x66>
 800fe92:	6822      	ldr	r2, [r4, #0]
 800fe94:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fe98:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fe9c:	f47f af39 	bne.w	800fd12 <_scanf_float+0x6e>
 800fea0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fea4:	6022      	str	r2, [r4, #0]
 800fea6:	2501      	movs	r5, #1
 800fea8:	e7c0      	b.n	800fe2c <_scanf_float+0x188>
 800feaa:	2d03      	cmp	r5, #3
 800feac:	d0e2      	beq.n	800fe74 <_scanf_float+0x1d0>
 800feae:	2d05      	cmp	r5, #5
 800feb0:	e7de      	b.n	800fe70 <_scanf_float+0x1cc>
 800feb2:	2d02      	cmp	r5, #2
 800feb4:	f47f af26 	bne.w	800fd04 <_scanf_float+0x60>
 800feb8:	2503      	movs	r5, #3
 800feba:	e7b7      	b.n	800fe2c <_scanf_float+0x188>
 800febc:	2d06      	cmp	r5, #6
 800febe:	f47f af21 	bne.w	800fd04 <_scanf_float+0x60>
 800fec2:	2507      	movs	r5, #7
 800fec4:	e7b2      	b.n	800fe2c <_scanf_float+0x188>
 800fec6:	6822      	ldr	r2, [r4, #0]
 800fec8:	0591      	lsls	r1, r2, #22
 800feca:	f57f af1b 	bpl.w	800fd04 <_scanf_float+0x60>
 800fece:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800fed2:	6022      	str	r2, [r4, #0]
 800fed4:	f8cd 9004 	str.w	r9, [sp, #4]
 800fed8:	e7a8      	b.n	800fe2c <_scanf_float+0x188>
 800feda:	6822      	ldr	r2, [r4, #0]
 800fedc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800fee0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800fee4:	d006      	beq.n	800fef4 <_scanf_float+0x250>
 800fee6:	0550      	lsls	r0, r2, #21
 800fee8:	f57f af0c 	bpl.w	800fd04 <_scanf_float+0x60>
 800feec:	f1b9 0f00 	cmp.w	r9, #0
 800fef0:	f43f af0f 	beq.w	800fd12 <_scanf_float+0x6e>
 800fef4:	0591      	lsls	r1, r2, #22
 800fef6:	bf58      	it	pl
 800fef8:	9901      	ldrpl	r1, [sp, #4]
 800fefa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fefe:	bf58      	it	pl
 800ff00:	eba9 0101 	subpl.w	r1, r9, r1
 800ff04:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ff08:	bf58      	it	pl
 800ff0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff0e:	6022      	str	r2, [r4, #0]
 800ff10:	f04f 0900 	mov.w	r9, #0
 800ff14:	e78a      	b.n	800fe2c <_scanf_float+0x188>
 800ff16:	f04f 0a03 	mov.w	sl, #3
 800ff1a:	e787      	b.n	800fe2c <_scanf_float+0x188>
 800ff1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff20:	4639      	mov	r1, r7
 800ff22:	4640      	mov	r0, r8
 800ff24:	4798      	blx	r3
 800ff26:	2800      	cmp	r0, #0
 800ff28:	f43f aedf 	beq.w	800fcea <_scanf_float+0x46>
 800ff2c:	e6ea      	b.n	800fd04 <_scanf_float+0x60>
 800ff2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff36:	463a      	mov	r2, r7
 800ff38:	4640      	mov	r0, r8
 800ff3a:	4798      	blx	r3
 800ff3c:	6923      	ldr	r3, [r4, #16]
 800ff3e:	3b01      	subs	r3, #1
 800ff40:	6123      	str	r3, [r4, #16]
 800ff42:	e6ec      	b.n	800fd1e <_scanf_float+0x7a>
 800ff44:	1e6b      	subs	r3, r5, #1
 800ff46:	2b06      	cmp	r3, #6
 800ff48:	d825      	bhi.n	800ff96 <_scanf_float+0x2f2>
 800ff4a:	2d02      	cmp	r5, #2
 800ff4c:	d836      	bhi.n	800ffbc <_scanf_float+0x318>
 800ff4e:	455e      	cmp	r6, fp
 800ff50:	f67f aee8 	bls.w	800fd24 <_scanf_float+0x80>
 800ff54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff58:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ff5c:	463a      	mov	r2, r7
 800ff5e:	4640      	mov	r0, r8
 800ff60:	4798      	blx	r3
 800ff62:	6923      	ldr	r3, [r4, #16]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	6123      	str	r3, [r4, #16]
 800ff68:	e7f1      	b.n	800ff4e <_scanf_float+0x2aa>
 800ff6a:	9802      	ldr	r0, [sp, #8]
 800ff6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff70:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ff74:	9002      	str	r0, [sp, #8]
 800ff76:	463a      	mov	r2, r7
 800ff78:	4640      	mov	r0, r8
 800ff7a:	4798      	blx	r3
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	6123      	str	r3, [r4, #16]
 800ff82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff86:	fa5f fa8a 	uxtb.w	sl, sl
 800ff8a:	f1ba 0f02 	cmp.w	sl, #2
 800ff8e:	d1ec      	bne.n	800ff6a <_scanf_float+0x2c6>
 800ff90:	3d03      	subs	r5, #3
 800ff92:	b2ed      	uxtb	r5, r5
 800ff94:	1b76      	subs	r6, r6, r5
 800ff96:	6823      	ldr	r3, [r4, #0]
 800ff98:	05da      	lsls	r2, r3, #23
 800ff9a:	d52f      	bpl.n	800fffc <_scanf_float+0x358>
 800ff9c:	055b      	lsls	r3, r3, #21
 800ff9e:	d510      	bpl.n	800ffc2 <_scanf_float+0x31e>
 800ffa0:	455e      	cmp	r6, fp
 800ffa2:	f67f aebf 	bls.w	800fd24 <_scanf_float+0x80>
 800ffa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffae:	463a      	mov	r2, r7
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	4798      	blx	r3
 800ffb4:	6923      	ldr	r3, [r4, #16]
 800ffb6:	3b01      	subs	r3, #1
 800ffb8:	6123      	str	r3, [r4, #16]
 800ffba:	e7f1      	b.n	800ffa0 <_scanf_float+0x2fc>
 800ffbc:	46aa      	mov	sl, r5
 800ffbe:	9602      	str	r6, [sp, #8]
 800ffc0:	e7df      	b.n	800ff82 <_scanf_float+0x2de>
 800ffc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ffc6:	6923      	ldr	r3, [r4, #16]
 800ffc8:	2965      	cmp	r1, #101	; 0x65
 800ffca:	f103 33ff 	add.w	r3, r3, #4294967295
 800ffce:	f106 35ff 	add.w	r5, r6, #4294967295
 800ffd2:	6123      	str	r3, [r4, #16]
 800ffd4:	d00c      	beq.n	800fff0 <_scanf_float+0x34c>
 800ffd6:	2945      	cmp	r1, #69	; 0x45
 800ffd8:	d00a      	beq.n	800fff0 <_scanf_float+0x34c>
 800ffda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffde:	463a      	mov	r2, r7
 800ffe0:	4640      	mov	r0, r8
 800ffe2:	4798      	blx	r3
 800ffe4:	6923      	ldr	r3, [r4, #16]
 800ffe6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ffea:	3b01      	subs	r3, #1
 800ffec:	1eb5      	subs	r5, r6, #2
 800ffee:	6123      	str	r3, [r4, #16]
 800fff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800fff4:	463a      	mov	r2, r7
 800fff6:	4640      	mov	r0, r8
 800fff8:	4798      	blx	r3
 800fffa:	462e      	mov	r6, r5
 800fffc:	6825      	ldr	r5, [r4, #0]
 800fffe:	f015 0510 	ands.w	r5, r5, #16
 8010002:	d159      	bne.n	80100b8 <_scanf_float+0x414>
 8010004:	7035      	strb	r5, [r6, #0]
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801000c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010010:	d11b      	bne.n	801004a <_scanf_float+0x3a6>
 8010012:	9b01      	ldr	r3, [sp, #4]
 8010014:	454b      	cmp	r3, r9
 8010016:	eba3 0209 	sub.w	r2, r3, r9
 801001a:	d123      	bne.n	8010064 <_scanf_float+0x3c0>
 801001c:	2200      	movs	r2, #0
 801001e:	4659      	mov	r1, fp
 8010020:	4640      	mov	r0, r8
 8010022:	f000 fe97 	bl	8010d54 <_strtod_r>
 8010026:	6822      	ldr	r2, [r4, #0]
 8010028:	9b03      	ldr	r3, [sp, #12]
 801002a:	f012 0f02 	tst.w	r2, #2
 801002e:	ec57 6b10 	vmov	r6, r7, d0
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	d021      	beq.n	801007a <_scanf_float+0x3d6>
 8010036:	9903      	ldr	r1, [sp, #12]
 8010038:	1d1a      	adds	r2, r3, #4
 801003a:	600a      	str	r2, [r1, #0]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	e9c3 6700 	strd	r6, r7, [r3]
 8010042:	68e3      	ldr	r3, [r4, #12]
 8010044:	3301      	adds	r3, #1
 8010046:	60e3      	str	r3, [r4, #12]
 8010048:	e66d      	b.n	800fd26 <_scanf_float+0x82>
 801004a:	9b04      	ldr	r3, [sp, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d0e5      	beq.n	801001c <_scanf_float+0x378>
 8010050:	9905      	ldr	r1, [sp, #20]
 8010052:	230a      	movs	r3, #10
 8010054:	462a      	mov	r2, r5
 8010056:	3101      	adds	r1, #1
 8010058:	4640      	mov	r0, r8
 801005a:	f000 ff03 	bl	8010e64 <_strtol_r>
 801005e:	9b04      	ldr	r3, [sp, #16]
 8010060:	9e05      	ldr	r6, [sp, #20]
 8010062:	1ac2      	subs	r2, r0, r3
 8010064:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010068:	429e      	cmp	r6, r3
 801006a:	bf28      	it	cs
 801006c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010070:	4912      	ldr	r1, [pc, #72]	; (80100bc <_scanf_float+0x418>)
 8010072:	4630      	mov	r0, r6
 8010074:	f000 f82c 	bl	80100d0 <siprintf>
 8010078:	e7d0      	b.n	801001c <_scanf_float+0x378>
 801007a:	9903      	ldr	r1, [sp, #12]
 801007c:	f012 0f04 	tst.w	r2, #4
 8010080:	f103 0204 	add.w	r2, r3, #4
 8010084:	600a      	str	r2, [r1, #0]
 8010086:	d1d9      	bne.n	801003c <_scanf_float+0x398>
 8010088:	f8d3 8000 	ldr.w	r8, [r3]
 801008c:	ee10 2a10 	vmov	r2, s0
 8010090:	ee10 0a10 	vmov	r0, s0
 8010094:	463b      	mov	r3, r7
 8010096:	4639      	mov	r1, r7
 8010098:	f7f0 fd58 	bl	8000b4c <__aeabi_dcmpun>
 801009c:	b128      	cbz	r0, 80100aa <_scanf_float+0x406>
 801009e:	4808      	ldr	r0, [pc, #32]	; (80100c0 <_scanf_float+0x41c>)
 80100a0:	f000 f810 	bl	80100c4 <nanf>
 80100a4:	ed88 0a00 	vstr	s0, [r8]
 80100a8:	e7cb      	b.n	8010042 <_scanf_float+0x39e>
 80100aa:	4630      	mov	r0, r6
 80100ac:	4639      	mov	r1, r7
 80100ae:	f7f0 fdab 	bl	8000c08 <__aeabi_d2f>
 80100b2:	f8c8 0000 	str.w	r0, [r8]
 80100b6:	e7c4      	b.n	8010042 <_scanf_float+0x39e>
 80100b8:	2500      	movs	r5, #0
 80100ba:	e634      	b.n	800fd26 <_scanf_float+0x82>
 80100bc:	080158f0 	.word	0x080158f0
 80100c0:	08015cf8 	.word	0x08015cf8

080100c4 <nanf>:
 80100c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80100cc <nanf+0x8>
 80100c8:	4770      	bx	lr
 80100ca:	bf00      	nop
 80100cc:	7fc00000 	.word	0x7fc00000

080100d0 <siprintf>:
 80100d0:	b40e      	push	{r1, r2, r3}
 80100d2:	b500      	push	{lr}
 80100d4:	b09c      	sub	sp, #112	; 0x70
 80100d6:	ab1d      	add	r3, sp, #116	; 0x74
 80100d8:	9002      	str	r0, [sp, #8]
 80100da:	9006      	str	r0, [sp, #24]
 80100dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80100e0:	4809      	ldr	r0, [pc, #36]	; (8010108 <siprintf+0x38>)
 80100e2:	9107      	str	r1, [sp, #28]
 80100e4:	9104      	str	r1, [sp, #16]
 80100e6:	4909      	ldr	r1, [pc, #36]	; (801010c <siprintf+0x3c>)
 80100e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80100ec:	9105      	str	r1, [sp, #20]
 80100ee:	6800      	ldr	r0, [r0, #0]
 80100f0:	9301      	str	r3, [sp, #4]
 80100f2:	a902      	add	r1, sp, #8
 80100f4:	f002 fed4 	bl	8012ea0 <_svfiprintf_r>
 80100f8:	9b02      	ldr	r3, [sp, #8]
 80100fa:	2200      	movs	r2, #0
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	b01c      	add	sp, #112	; 0x70
 8010100:	f85d eb04 	ldr.w	lr, [sp], #4
 8010104:	b003      	add	sp, #12
 8010106:	4770      	bx	lr
 8010108:	2000017c 	.word	0x2000017c
 801010c:	ffff0208 	.word	0xffff0208

08010110 <sulp>:
 8010110:	b570      	push	{r4, r5, r6, lr}
 8010112:	4604      	mov	r4, r0
 8010114:	460d      	mov	r5, r1
 8010116:	ec45 4b10 	vmov	d0, r4, r5
 801011a:	4616      	mov	r6, r2
 801011c:	f002 fc1e 	bl	801295c <__ulp>
 8010120:	ec51 0b10 	vmov	r0, r1, d0
 8010124:	b17e      	cbz	r6, 8010146 <sulp+0x36>
 8010126:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801012a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd09      	ble.n	8010146 <sulp+0x36>
 8010132:	051b      	lsls	r3, r3, #20
 8010134:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010138:	2400      	movs	r4, #0
 801013a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801013e:	4622      	mov	r2, r4
 8010140:	462b      	mov	r3, r5
 8010142:	f7f0 fa69 	bl	8000618 <__aeabi_dmul>
 8010146:	bd70      	pop	{r4, r5, r6, pc}

08010148 <_strtod_l>:
 8010148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	ed2d 8b02 	vpush	{d8}
 8010150:	b09d      	sub	sp, #116	; 0x74
 8010152:	461f      	mov	r7, r3
 8010154:	2300      	movs	r3, #0
 8010156:	9318      	str	r3, [sp, #96]	; 0x60
 8010158:	4ba2      	ldr	r3, [pc, #648]	; (80103e4 <_strtod_l+0x29c>)
 801015a:	9213      	str	r2, [sp, #76]	; 0x4c
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	9305      	str	r3, [sp, #20]
 8010160:	4604      	mov	r4, r0
 8010162:	4618      	mov	r0, r3
 8010164:	4688      	mov	r8, r1
 8010166:	f7f0 f843 	bl	80001f0 <strlen>
 801016a:	f04f 0a00 	mov.w	sl, #0
 801016e:	4605      	mov	r5, r0
 8010170:	f04f 0b00 	mov.w	fp, #0
 8010174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801017a:	781a      	ldrb	r2, [r3, #0]
 801017c:	2a2b      	cmp	r2, #43	; 0x2b
 801017e:	d04e      	beq.n	801021e <_strtod_l+0xd6>
 8010180:	d83b      	bhi.n	80101fa <_strtod_l+0xb2>
 8010182:	2a0d      	cmp	r2, #13
 8010184:	d834      	bhi.n	80101f0 <_strtod_l+0xa8>
 8010186:	2a08      	cmp	r2, #8
 8010188:	d834      	bhi.n	80101f4 <_strtod_l+0xac>
 801018a:	2a00      	cmp	r2, #0
 801018c:	d03e      	beq.n	801020c <_strtod_l+0xc4>
 801018e:	2300      	movs	r3, #0
 8010190:	930a      	str	r3, [sp, #40]	; 0x28
 8010192:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010194:	7833      	ldrb	r3, [r6, #0]
 8010196:	2b30      	cmp	r3, #48	; 0x30
 8010198:	f040 80b0 	bne.w	80102fc <_strtod_l+0x1b4>
 801019c:	7873      	ldrb	r3, [r6, #1]
 801019e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80101a2:	2b58      	cmp	r3, #88	; 0x58
 80101a4:	d168      	bne.n	8010278 <_strtod_l+0x130>
 80101a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	ab18      	add	r3, sp, #96	; 0x60
 80101ac:	9702      	str	r7, [sp, #8]
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	4a8d      	ldr	r2, [pc, #564]	; (80103e8 <_strtod_l+0x2a0>)
 80101b2:	ab19      	add	r3, sp, #100	; 0x64
 80101b4:	a917      	add	r1, sp, #92	; 0x5c
 80101b6:	4620      	mov	r0, r4
 80101b8:	f001 fd38 	bl	8011c2c <__gethex>
 80101bc:	f010 0707 	ands.w	r7, r0, #7
 80101c0:	4605      	mov	r5, r0
 80101c2:	d005      	beq.n	80101d0 <_strtod_l+0x88>
 80101c4:	2f06      	cmp	r7, #6
 80101c6:	d12c      	bne.n	8010222 <_strtod_l+0xda>
 80101c8:	3601      	adds	r6, #1
 80101ca:	2300      	movs	r3, #0
 80101cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80101ce:	930a      	str	r3, [sp, #40]	; 0x28
 80101d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f040 8590 	bne.w	8010cf8 <_strtod_l+0xbb0>
 80101d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101da:	b1eb      	cbz	r3, 8010218 <_strtod_l+0xd0>
 80101dc:	4652      	mov	r2, sl
 80101de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80101e2:	ec43 2b10 	vmov	d0, r2, r3
 80101e6:	b01d      	add	sp, #116	; 0x74
 80101e8:	ecbd 8b02 	vpop	{d8}
 80101ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f0:	2a20      	cmp	r2, #32
 80101f2:	d1cc      	bne.n	801018e <_strtod_l+0x46>
 80101f4:	3301      	adds	r3, #1
 80101f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80101f8:	e7be      	b.n	8010178 <_strtod_l+0x30>
 80101fa:	2a2d      	cmp	r2, #45	; 0x2d
 80101fc:	d1c7      	bne.n	801018e <_strtod_l+0x46>
 80101fe:	2201      	movs	r2, #1
 8010200:	920a      	str	r2, [sp, #40]	; 0x28
 8010202:	1c5a      	adds	r2, r3, #1
 8010204:	9217      	str	r2, [sp, #92]	; 0x5c
 8010206:	785b      	ldrb	r3, [r3, #1]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d1c2      	bne.n	8010192 <_strtod_l+0x4a>
 801020c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801020e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010212:	2b00      	cmp	r3, #0
 8010214:	f040 856e 	bne.w	8010cf4 <_strtod_l+0xbac>
 8010218:	4652      	mov	r2, sl
 801021a:	465b      	mov	r3, fp
 801021c:	e7e1      	b.n	80101e2 <_strtod_l+0x9a>
 801021e:	2200      	movs	r2, #0
 8010220:	e7ee      	b.n	8010200 <_strtod_l+0xb8>
 8010222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010224:	b13a      	cbz	r2, 8010236 <_strtod_l+0xee>
 8010226:	2135      	movs	r1, #53	; 0x35
 8010228:	a81a      	add	r0, sp, #104	; 0x68
 801022a:	f002 fca2 	bl	8012b72 <__copybits>
 801022e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010230:	4620      	mov	r0, r4
 8010232:	f002 f861 	bl	80122f8 <_Bfree>
 8010236:	3f01      	subs	r7, #1
 8010238:	2f04      	cmp	r7, #4
 801023a:	d806      	bhi.n	801024a <_strtod_l+0x102>
 801023c:	e8df f007 	tbb	[pc, r7]
 8010240:	1714030a 	.word	0x1714030a
 8010244:	0a          	.byte	0x0a
 8010245:	00          	.byte	0x00
 8010246:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801024a:	0728      	lsls	r0, r5, #28
 801024c:	d5c0      	bpl.n	80101d0 <_strtod_l+0x88>
 801024e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8010252:	e7bd      	b.n	80101d0 <_strtod_l+0x88>
 8010254:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8010258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801025a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801025e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010262:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010266:	e7f0      	b.n	801024a <_strtod_l+0x102>
 8010268:	f8df b180 	ldr.w	fp, [pc, #384]	; 80103ec <_strtod_l+0x2a4>
 801026c:	e7ed      	b.n	801024a <_strtod_l+0x102>
 801026e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8010272:	f04f 3aff 	mov.w	sl, #4294967295
 8010276:	e7e8      	b.n	801024a <_strtod_l+0x102>
 8010278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801027a:	1c5a      	adds	r2, r3, #1
 801027c:	9217      	str	r2, [sp, #92]	; 0x5c
 801027e:	785b      	ldrb	r3, [r3, #1]
 8010280:	2b30      	cmp	r3, #48	; 0x30
 8010282:	d0f9      	beq.n	8010278 <_strtod_l+0x130>
 8010284:	2b00      	cmp	r3, #0
 8010286:	d0a3      	beq.n	80101d0 <_strtod_l+0x88>
 8010288:	2301      	movs	r3, #1
 801028a:	f04f 0900 	mov.w	r9, #0
 801028e:	9304      	str	r3, [sp, #16]
 8010290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010292:	9308      	str	r3, [sp, #32]
 8010294:	f8cd 901c 	str.w	r9, [sp, #28]
 8010298:	464f      	mov	r7, r9
 801029a:	220a      	movs	r2, #10
 801029c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801029e:	7806      	ldrb	r6, [r0, #0]
 80102a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80102a4:	b2d9      	uxtb	r1, r3
 80102a6:	2909      	cmp	r1, #9
 80102a8:	d92a      	bls.n	8010300 <_strtod_l+0x1b8>
 80102aa:	9905      	ldr	r1, [sp, #20]
 80102ac:	462a      	mov	r2, r5
 80102ae:	f002 ff0f 	bl	80130d0 <strncmp>
 80102b2:	b398      	cbz	r0, 801031c <_strtod_l+0x1d4>
 80102b4:	2000      	movs	r0, #0
 80102b6:	4632      	mov	r2, r6
 80102b8:	463d      	mov	r5, r7
 80102ba:	9005      	str	r0, [sp, #20]
 80102bc:	4603      	mov	r3, r0
 80102be:	2a65      	cmp	r2, #101	; 0x65
 80102c0:	d001      	beq.n	80102c6 <_strtod_l+0x17e>
 80102c2:	2a45      	cmp	r2, #69	; 0x45
 80102c4:	d118      	bne.n	80102f8 <_strtod_l+0x1b0>
 80102c6:	b91d      	cbnz	r5, 80102d0 <_strtod_l+0x188>
 80102c8:	9a04      	ldr	r2, [sp, #16]
 80102ca:	4302      	orrs	r2, r0
 80102cc:	d09e      	beq.n	801020c <_strtod_l+0xc4>
 80102ce:	2500      	movs	r5, #0
 80102d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80102d4:	f108 0201 	add.w	r2, r8, #1
 80102d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80102da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80102de:	2a2b      	cmp	r2, #43	; 0x2b
 80102e0:	d075      	beq.n	80103ce <_strtod_l+0x286>
 80102e2:	2a2d      	cmp	r2, #45	; 0x2d
 80102e4:	d07b      	beq.n	80103de <_strtod_l+0x296>
 80102e6:	f04f 0c00 	mov.w	ip, #0
 80102ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80102ee:	2909      	cmp	r1, #9
 80102f0:	f240 8082 	bls.w	80103f8 <_strtod_l+0x2b0>
 80102f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80102f8:	2600      	movs	r6, #0
 80102fa:	e09d      	b.n	8010438 <_strtod_l+0x2f0>
 80102fc:	2300      	movs	r3, #0
 80102fe:	e7c4      	b.n	801028a <_strtod_l+0x142>
 8010300:	2f08      	cmp	r7, #8
 8010302:	bfd8      	it	le
 8010304:	9907      	ldrle	r1, [sp, #28]
 8010306:	f100 0001 	add.w	r0, r0, #1
 801030a:	bfda      	itte	le
 801030c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010310:	9307      	strle	r3, [sp, #28]
 8010312:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010316:	3701      	adds	r7, #1
 8010318:	9017      	str	r0, [sp, #92]	; 0x5c
 801031a:	e7bf      	b.n	801029c <_strtod_l+0x154>
 801031c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801031e:	195a      	adds	r2, r3, r5
 8010320:	9217      	str	r2, [sp, #92]	; 0x5c
 8010322:	5d5a      	ldrb	r2, [r3, r5]
 8010324:	2f00      	cmp	r7, #0
 8010326:	d037      	beq.n	8010398 <_strtod_l+0x250>
 8010328:	9005      	str	r0, [sp, #20]
 801032a:	463d      	mov	r5, r7
 801032c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8010330:	2b09      	cmp	r3, #9
 8010332:	d912      	bls.n	801035a <_strtod_l+0x212>
 8010334:	2301      	movs	r3, #1
 8010336:	e7c2      	b.n	80102be <_strtod_l+0x176>
 8010338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801033a:	1c5a      	adds	r2, r3, #1
 801033c:	9217      	str	r2, [sp, #92]	; 0x5c
 801033e:	785a      	ldrb	r2, [r3, #1]
 8010340:	3001      	adds	r0, #1
 8010342:	2a30      	cmp	r2, #48	; 0x30
 8010344:	d0f8      	beq.n	8010338 <_strtod_l+0x1f0>
 8010346:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801034a:	2b08      	cmp	r3, #8
 801034c:	f200 84d9 	bhi.w	8010d02 <_strtod_l+0xbba>
 8010350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010352:	9005      	str	r0, [sp, #20]
 8010354:	2000      	movs	r0, #0
 8010356:	9308      	str	r3, [sp, #32]
 8010358:	4605      	mov	r5, r0
 801035a:	3a30      	subs	r2, #48	; 0x30
 801035c:	f100 0301 	add.w	r3, r0, #1
 8010360:	d014      	beq.n	801038c <_strtod_l+0x244>
 8010362:	9905      	ldr	r1, [sp, #20]
 8010364:	4419      	add	r1, r3
 8010366:	9105      	str	r1, [sp, #20]
 8010368:	462b      	mov	r3, r5
 801036a:	eb00 0e05 	add.w	lr, r0, r5
 801036e:	210a      	movs	r1, #10
 8010370:	4573      	cmp	r3, lr
 8010372:	d113      	bne.n	801039c <_strtod_l+0x254>
 8010374:	182b      	adds	r3, r5, r0
 8010376:	2b08      	cmp	r3, #8
 8010378:	f105 0501 	add.w	r5, r5, #1
 801037c:	4405      	add	r5, r0
 801037e:	dc1c      	bgt.n	80103ba <_strtod_l+0x272>
 8010380:	9907      	ldr	r1, [sp, #28]
 8010382:	230a      	movs	r3, #10
 8010384:	fb03 2301 	mla	r3, r3, r1, r2
 8010388:	9307      	str	r3, [sp, #28]
 801038a:	2300      	movs	r3, #0
 801038c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801038e:	1c51      	adds	r1, r2, #1
 8010390:	9117      	str	r1, [sp, #92]	; 0x5c
 8010392:	7852      	ldrb	r2, [r2, #1]
 8010394:	4618      	mov	r0, r3
 8010396:	e7c9      	b.n	801032c <_strtod_l+0x1e4>
 8010398:	4638      	mov	r0, r7
 801039a:	e7d2      	b.n	8010342 <_strtod_l+0x1fa>
 801039c:	2b08      	cmp	r3, #8
 801039e:	dc04      	bgt.n	80103aa <_strtod_l+0x262>
 80103a0:	9e07      	ldr	r6, [sp, #28]
 80103a2:	434e      	muls	r6, r1
 80103a4:	9607      	str	r6, [sp, #28]
 80103a6:	3301      	adds	r3, #1
 80103a8:	e7e2      	b.n	8010370 <_strtod_l+0x228>
 80103aa:	f103 0c01 	add.w	ip, r3, #1
 80103ae:	f1bc 0f10 	cmp.w	ip, #16
 80103b2:	bfd8      	it	le
 80103b4:	fb01 f909 	mulle.w	r9, r1, r9
 80103b8:	e7f5      	b.n	80103a6 <_strtod_l+0x25e>
 80103ba:	2d10      	cmp	r5, #16
 80103bc:	bfdc      	itt	le
 80103be:	230a      	movle	r3, #10
 80103c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80103c4:	e7e1      	b.n	801038a <_strtod_l+0x242>
 80103c6:	2300      	movs	r3, #0
 80103c8:	9305      	str	r3, [sp, #20]
 80103ca:	2301      	movs	r3, #1
 80103cc:	e77c      	b.n	80102c8 <_strtod_l+0x180>
 80103ce:	f04f 0c00 	mov.w	ip, #0
 80103d2:	f108 0202 	add.w	r2, r8, #2
 80103d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80103d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80103dc:	e785      	b.n	80102ea <_strtod_l+0x1a2>
 80103de:	f04f 0c01 	mov.w	ip, #1
 80103e2:	e7f6      	b.n	80103d2 <_strtod_l+0x28a>
 80103e4:	08015b40 	.word	0x08015b40
 80103e8:	080158f8 	.word	0x080158f8
 80103ec:	7ff00000 	.word	0x7ff00000
 80103f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80103f2:	1c51      	adds	r1, r2, #1
 80103f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80103f6:	7852      	ldrb	r2, [r2, #1]
 80103f8:	2a30      	cmp	r2, #48	; 0x30
 80103fa:	d0f9      	beq.n	80103f0 <_strtod_l+0x2a8>
 80103fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010400:	2908      	cmp	r1, #8
 8010402:	f63f af79 	bhi.w	80102f8 <_strtod_l+0x1b0>
 8010406:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801040a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801040c:	9206      	str	r2, [sp, #24]
 801040e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010410:	1c51      	adds	r1, r2, #1
 8010412:	9117      	str	r1, [sp, #92]	; 0x5c
 8010414:	7852      	ldrb	r2, [r2, #1]
 8010416:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801041a:	2e09      	cmp	r6, #9
 801041c:	d937      	bls.n	801048e <_strtod_l+0x346>
 801041e:	9e06      	ldr	r6, [sp, #24]
 8010420:	1b89      	subs	r1, r1, r6
 8010422:	2908      	cmp	r1, #8
 8010424:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010428:	dc02      	bgt.n	8010430 <_strtod_l+0x2e8>
 801042a:	4576      	cmp	r6, lr
 801042c:	bfa8      	it	ge
 801042e:	4676      	movge	r6, lr
 8010430:	f1bc 0f00 	cmp.w	ip, #0
 8010434:	d000      	beq.n	8010438 <_strtod_l+0x2f0>
 8010436:	4276      	negs	r6, r6
 8010438:	2d00      	cmp	r5, #0
 801043a:	d14d      	bne.n	80104d8 <_strtod_l+0x390>
 801043c:	9904      	ldr	r1, [sp, #16]
 801043e:	4301      	orrs	r1, r0
 8010440:	f47f aec6 	bne.w	80101d0 <_strtod_l+0x88>
 8010444:	2b00      	cmp	r3, #0
 8010446:	f47f aee1 	bne.w	801020c <_strtod_l+0xc4>
 801044a:	2a69      	cmp	r2, #105	; 0x69
 801044c:	d027      	beq.n	801049e <_strtod_l+0x356>
 801044e:	dc24      	bgt.n	801049a <_strtod_l+0x352>
 8010450:	2a49      	cmp	r2, #73	; 0x49
 8010452:	d024      	beq.n	801049e <_strtod_l+0x356>
 8010454:	2a4e      	cmp	r2, #78	; 0x4e
 8010456:	f47f aed9 	bne.w	801020c <_strtod_l+0xc4>
 801045a:	499f      	ldr	r1, [pc, #636]	; (80106d8 <_strtod_l+0x590>)
 801045c:	a817      	add	r0, sp, #92	; 0x5c
 801045e:	f001 fe3d 	bl	80120dc <__match>
 8010462:	2800      	cmp	r0, #0
 8010464:	f43f aed2 	beq.w	801020c <_strtod_l+0xc4>
 8010468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801046a:	781b      	ldrb	r3, [r3, #0]
 801046c:	2b28      	cmp	r3, #40	; 0x28
 801046e:	d12d      	bne.n	80104cc <_strtod_l+0x384>
 8010470:	499a      	ldr	r1, [pc, #616]	; (80106dc <_strtod_l+0x594>)
 8010472:	aa1a      	add	r2, sp, #104	; 0x68
 8010474:	a817      	add	r0, sp, #92	; 0x5c
 8010476:	f001 fe45 	bl	8012104 <__hexnan>
 801047a:	2805      	cmp	r0, #5
 801047c:	d126      	bne.n	80104cc <_strtod_l+0x384>
 801047e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010480:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8010484:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8010488:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801048c:	e6a0      	b.n	80101d0 <_strtod_l+0x88>
 801048e:	210a      	movs	r1, #10
 8010490:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010494:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010498:	e7b9      	b.n	801040e <_strtod_l+0x2c6>
 801049a:	2a6e      	cmp	r2, #110	; 0x6e
 801049c:	e7db      	b.n	8010456 <_strtod_l+0x30e>
 801049e:	4990      	ldr	r1, [pc, #576]	; (80106e0 <_strtod_l+0x598>)
 80104a0:	a817      	add	r0, sp, #92	; 0x5c
 80104a2:	f001 fe1b 	bl	80120dc <__match>
 80104a6:	2800      	cmp	r0, #0
 80104a8:	f43f aeb0 	beq.w	801020c <_strtod_l+0xc4>
 80104ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104ae:	498d      	ldr	r1, [pc, #564]	; (80106e4 <_strtod_l+0x59c>)
 80104b0:	3b01      	subs	r3, #1
 80104b2:	a817      	add	r0, sp, #92	; 0x5c
 80104b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80104b6:	f001 fe11 	bl	80120dc <__match>
 80104ba:	b910      	cbnz	r0, 80104c2 <_strtod_l+0x37a>
 80104bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104be:	3301      	adds	r3, #1
 80104c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80104c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80106f4 <_strtod_l+0x5ac>
 80104c6:	f04f 0a00 	mov.w	sl, #0
 80104ca:	e681      	b.n	80101d0 <_strtod_l+0x88>
 80104cc:	4886      	ldr	r0, [pc, #536]	; (80106e8 <_strtod_l+0x5a0>)
 80104ce:	f002 fde7 	bl	80130a0 <nan>
 80104d2:	ec5b ab10 	vmov	sl, fp, d0
 80104d6:	e67b      	b.n	80101d0 <_strtod_l+0x88>
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	9807      	ldr	r0, [sp, #28]
 80104dc:	1af3      	subs	r3, r6, r3
 80104de:	2f00      	cmp	r7, #0
 80104e0:	bf08      	it	eq
 80104e2:	462f      	moveq	r7, r5
 80104e4:	2d10      	cmp	r5, #16
 80104e6:	9306      	str	r3, [sp, #24]
 80104e8:	46a8      	mov	r8, r5
 80104ea:	bfa8      	it	ge
 80104ec:	f04f 0810 	movge.w	r8, #16
 80104f0:	f7f0 f818 	bl	8000524 <__aeabi_ui2d>
 80104f4:	2d09      	cmp	r5, #9
 80104f6:	4682      	mov	sl, r0
 80104f8:	468b      	mov	fp, r1
 80104fa:	dd13      	ble.n	8010524 <_strtod_l+0x3dc>
 80104fc:	4b7b      	ldr	r3, [pc, #492]	; (80106ec <_strtod_l+0x5a4>)
 80104fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010506:	f7f0 f887 	bl	8000618 <__aeabi_dmul>
 801050a:	4682      	mov	sl, r0
 801050c:	4648      	mov	r0, r9
 801050e:	468b      	mov	fp, r1
 8010510:	f7f0 f808 	bl	8000524 <__aeabi_ui2d>
 8010514:	4602      	mov	r2, r0
 8010516:	460b      	mov	r3, r1
 8010518:	4650      	mov	r0, sl
 801051a:	4659      	mov	r1, fp
 801051c:	f7ef fec6 	bl	80002ac <__adddf3>
 8010520:	4682      	mov	sl, r0
 8010522:	468b      	mov	fp, r1
 8010524:	2d0f      	cmp	r5, #15
 8010526:	dc38      	bgt.n	801059a <_strtod_l+0x452>
 8010528:	9b06      	ldr	r3, [sp, #24]
 801052a:	2b00      	cmp	r3, #0
 801052c:	f43f ae50 	beq.w	80101d0 <_strtod_l+0x88>
 8010530:	dd24      	ble.n	801057c <_strtod_l+0x434>
 8010532:	2b16      	cmp	r3, #22
 8010534:	dc0b      	bgt.n	801054e <_strtod_l+0x406>
 8010536:	496d      	ldr	r1, [pc, #436]	; (80106ec <_strtod_l+0x5a4>)
 8010538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801053c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010540:	4652      	mov	r2, sl
 8010542:	465b      	mov	r3, fp
 8010544:	f7f0 f868 	bl	8000618 <__aeabi_dmul>
 8010548:	4682      	mov	sl, r0
 801054a:	468b      	mov	fp, r1
 801054c:	e640      	b.n	80101d0 <_strtod_l+0x88>
 801054e:	9a06      	ldr	r2, [sp, #24]
 8010550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8010554:	4293      	cmp	r3, r2
 8010556:	db20      	blt.n	801059a <_strtod_l+0x452>
 8010558:	4c64      	ldr	r4, [pc, #400]	; (80106ec <_strtod_l+0x5a4>)
 801055a:	f1c5 050f 	rsb	r5, r5, #15
 801055e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8010562:	4652      	mov	r2, sl
 8010564:	465b      	mov	r3, fp
 8010566:	e9d1 0100 	ldrd	r0, r1, [r1]
 801056a:	f7f0 f855 	bl	8000618 <__aeabi_dmul>
 801056e:	9b06      	ldr	r3, [sp, #24]
 8010570:	1b5d      	subs	r5, r3, r5
 8010572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8010576:	e9d4 2300 	ldrd	r2, r3, [r4]
 801057a:	e7e3      	b.n	8010544 <_strtod_l+0x3fc>
 801057c:	9b06      	ldr	r3, [sp, #24]
 801057e:	3316      	adds	r3, #22
 8010580:	db0b      	blt.n	801059a <_strtod_l+0x452>
 8010582:	9b05      	ldr	r3, [sp, #20]
 8010584:	1b9e      	subs	r6, r3, r6
 8010586:	4b59      	ldr	r3, [pc, #356]	; (80106ec <_strtod_l+0x5a4>)
 8010588:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801058c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010590:	4650      	mov	r0, sl
 8010592:	4659      	mov	r1, fp
 8010594:	f7f0 f96a 	bl	800086c <__aeabi_ddiv>
 8010598:	e7d6      	b.n	8010548 <_strtod_l+0x400>
 801059a:	9b06      	ldr	r3, [sp, #24]
 801059c:	eba5 0808 	sub.w	r8, r5, r8
 80105a0:	4498      	add	r8, r3
 80105a2:	f1b8 0f00 	cmp.w	r8, #0
 80105a6:	dd74      	ble.n	8010692 <_strtod_l+0x54a>
 80105a8:	f018 030f 	ands.w	r3, r8, #15
 80105ac:	d00a      	beq.n	80105c4 <_strtod_l+0x47c>
 80105ae:	494f      	ldr	r1, [pc, #316]	; (80106ec <_strtod_l+0x5a4>)
 80105b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80105b4:	4652      	mov	r2, sl
 80105b6:	465b      	mov	r3, fp
 80105b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105bc:	f7f0 f82c 	bl	8000618 <__aeabi_dmul>
 80105c0:	4682      	mov	sl, r0
 80105c2:	468b      	mov	fp, r1
 80105c4:	f038 080f 	bics.w	r8, r8, #15
 80105c8:	d04f      	beq.n	801066a <_strtod_l+0x522>
 80105ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80105ce:	dd22      	ble.n	8010616 <_strtod_l+0x4ce>
 80105d0:	2500      	movs	r5, #0
 80105d2:	462e      	mov	r6, r5
 80105d4:	9507      	str	r5, [sp, #28]
 80105d6:	9505      	str	r5, [sp, #20]
 80105d8:	2322      	movs	r3, #34	; 0x22
 80105da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80106f4 <_strtod_l+0x5ac>
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	f04f 0a00 	mov.w	sl, #0
 80105e4:	9b07      	ldr	r3, [sp, #28]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	f43f adf2 	beq.w	80101d0 <_strtod_l+0x88>
 80105ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80105ee:	4620      	mov	r0, r4
 80105f0:	f001 fe82 	bl	80122f8 <_Bfree>
 80105f4:	9905      	ldr	r1, [sp, #20]
 80105f6:	4620      	mov	r0, r4
 80105f8:	f001 fe7e 	bl	80122f8 <_Bfree>
 80105fc:	4631      	mov	r1, r6
 80105fe:	4620      	mov	r0, r4
 8010600:	f001 fe7a 	bl	80122f8 <_Bfree>
 8010604:	9907      	ldr	r1, [sp, #28]
 8010606:	4620      	mov	r0, r4
 8010608:	f001 fe76 	bl	80122f8 <_Bfree>
 801060c:	4629      	mov	r1, r5
 801060e:	4620      	mov	r0, r4
 8010610:	f001 fe72 	bl	80122f8 <_Bfree>
 8010614:	e5dc      	b.n	80101d0 <_strtod_l+0x88>
 8010616:	4b36      	ldr	r3, [pc, #216]	; (80106f0 <_strtod_l+0x5a8>)
 8010618:	9304      	str	r3, [sp, #16]
 801061a:	2300      	movs	r3, #0
 801061c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010620:	4650      	mov	r0, sl
 8010622:	4659      	mov	r1, fp
 8010624:	4699      	mov	r9, r3
 8010626:	f1b8 0f01 	cmp.w	r8, #1
 801062a:	dc21      	bgt.n	8010670 <_strtod_l+0x528>
 801062c:	b10b      	cbz	r3, 8010632 <_strtod_l+0x4ea>
 801062e:	4682      	mov	sl, r0
 8010630:	468b      	mov	fp, r1
 8010632:	4b2f      	ldr	r3, [pc, #188]	; (80106f0 <_strtod_l+0x5a8>)
 8010634:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8010638:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801063c:	4652      	mov	r2, sl
 801063e:	465b      	mov	r3, fp
 8010640:	e9d9 0100 	ldrd	r0, r1, [r9]
 8010644:	f7ef ffe8 	bl	8000618 <__aeabi_dmul>
 8010648:	4b2a      	ldr	r3, [pc, #168]	; (80106f4 <_strtod_l+0x5ac>)
 801064a:	460a      	mov	r2, r1
 801064c:	400b      	ands	r3, r1
 801064e:	492a      	ldr	r1, [pc, #168]	; (80106f8 <_strtod_l+0x5b0>)
 8010650:	428b      	cmp	r3, r1
 8010652:	4682      	mov	sl, r0
 8010654:	d8bc      	bhi.n	80105d0 <_strtod_l+0x488>
 8010656:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801065a:	428b      	cmp	r3, r1
 801065c:	bf86      	itte	hi
 801065e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80106fc <_strtod_l+0x5b4>
 8010662:	f04f 3aff 	movhi.w	sl, #4294967295
 8010666:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801066a:	2300      	movs	r3, #0
 801066c:	9304      	str	r3, [sp, #16]
 801066e:	e084      	b.n	801077a <_strtod_l+0x632>
 8010670:	f018 0f01 	tst.w	r8, #1
 8010674:	d005      	beq.n	8010682 <_strtod_l+0x53a>
 8010676:	9b04      	ldr	r3, [sp, #16]
 8010678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801067c:	f7ef ffcc 	bl	8000618 <__aeabi_dmul>
 8010680:	2301      	movs	r3, #1
 8010682:	9a04      	ldr	r2, [sp, #16]
 8010684:	3208      	adds	r2, #8
 8010686:	f109 0901 	add.w	r9, r9, #1
 801068a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801068e:	9204      	str	r2, [sp, #16]
 8010690:	e7c9      	b.n	8010626 <_strtod_l+0x4de>
 8010692:	d0ea      	beq.n	801066a <_strtod_l+0x522>
 8010694:	f1c8 0800 	rsb	r8, r8, #0
 8010698:	f018 020f 	ands.w	r2, r8, #15
 801069c:	d00a      	beq.n	80106b4 <_strtod_l+0x56c>
 801069e:	4b13      	ldr	r3, [pc, #76]	; (80106ec <_strtod_l+0x5a4>)
 80106a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106a4:	4650      	mov	r0, sl
 80106a6:	4659      	mov	r1, fp
 80106a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ac:	f7f0 f8de 	bl	800086c <__aeabi_ddiv>
 80106b0:	4682      	mov	sl, r0
 80106b2:	468b      	mov	fp, r1
 80106b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80106b8:	d0d7      	beq.n	801066a <_strtod_l+0x522>
 80106ba:	f1b8 0f1f 	cmp.w	r8, #31
 80106be:	dd1f      	ble.n	8010700 <_strtod_l+0x5b8>
 80106c0:	2500      	movs	r5, #0
 80106c2:	462e      	mov	r6, r5
 80106c4:	9507      	str	r5, [sp, #28]
 80106c6:	9505      	str	r5, [sp, #20]
 80106c8:	2322      	movs	r3, #34	; 0x22
 80106ca:	f04f 0a00 	mov.w	sl, #0
 80106ce:	f04f 0b00 	mov.w	fp, #0
 80106d2:	6023      	str	r3, [r4, #0]
 80106d4:	e786      	b.n	80105e4 <_strtod_l+0x49c>
 80106d6:	bf00      	nop
 80106d8:	080158c9 	.word	0x080158c9
 80106dc:	0801590c 	.word	0x0801590c
 80106e0:	080158c1 	.word	0x080158c1
 80106e4:	08015a4c 	.word	0x08015a4c
 80106e8:	08015cf8 	.word	0x08015cf8
 80106ec:	08015bd8 	.word	0x08015bd8
 80106f0:	08015bb0 	.word	0x08015bb0
 80106f4:	7ff00000 	.word	0x7ff00000
 80106f8:	7ca00000 	.word	0x7ca00000
 80106fc:	7fefffff 	.word	0x7fefffff
 8010700:	f018 0310 	ands.w	r3, r8, #16
 8010704:	bf18      	it	ne
 8010706:	236a      	movne	r3, #106	; 0x6a
 8010708:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010ab8 <_strtod_l+0x970>
 801070c:	9304      	str	r3, [sp, #16]
 801070e:	4650      	mov	r0, sl
 8010710:	4659      	mov	r1, fp
 8010712:	2300      	movs	r3, #0
 8010714:	f018 0f01 	tst.w	r8, #1
 8010718:	d004      	beq.n	8010724 <_strtod_l+0x5dc>
 801071a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801071e:	f7ef ff7b 	bl	8000618 <__aeabi_dmul>
 8010722:	2301      	movs	r3, #1
 8010724:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010728:	f109 0908 	add.w	r9, r9, #8
 801072c:	d1f2      	bne.n	8010714 <_strtod_l+0x5cc>
 801072e:	b10b      	cbz	r3, 8010734 <_strtod_l+0x5ec>
 8010730:	4682      	mov	sl, r0
 8010732:	468b      	mov	fp, r1
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	b1c3      	cbz	r3, 801076a <_strtod_l+0x622>
 8010738:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801073c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8010740:	2b00      	cmp	r3, #0
 8010742:	4659      	mov	r1, fp
 8010744:	dd11      	ble.n	801076a <_strtod_l+0x622>
 8010746:	2b1f      	cmp	r3, #31
 8010748:	f340 8124 	ble.w	8010994 <_strtod_l+0x84c>
 801074c:	2b34      	cmp	r3, #52	; 0x34
 801074e:	bfde      	ittt	le
 8010750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8010754:	f04f 33ff 	movle.w	r3, #4294967295
 8010758:	fa03 f202 	lslle.w	r2, r3, r2
 801075c:	f04f 0a00 	mov.w	sl, #0
 8010760:	bfcc      	ite	gt
 8010762:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8010766:	ea02 0b01 	andle.w	fp, r2, r1
 801076a:	2200      	movs	r2, #0
 801076c:	2300      	movs	r3, #0
 801076e:	4650      	mov	r0, sl
 8010770:	4659      	mov	r1, fp
 8010772:	f7f0 f9b9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010776:	2800      	cmp	r0, #0
 8010778:	d1a2      	bne.n	80106c0 <_strtod_l+0x578>
 801077a:	9b07      	ldr	r3, [sp, #28]
 801077c:	9300      	str	r3, [sp, #0]
 801077e:	9908      	ldr	r1, [sp, #32]
 8010780:	462b      	mov	r3, r5
 8010782:	463a      	mov	r2, r7
 8010784:	4620      	mov	r0, r4
 8010786:	f001 fe1f 	bl	80123c8 <__s2b>
 801078a:	9007      	str	r0, [sp, #28]
 801078c:	2800      	cmp	r0, #0
 801078e:	f43f af1f 	beq.w	80105d0 <_strtod_l+0x488>
 8010792:	9b05      	ldr	r3, [sp, #20]
 8010794:	1b9e      	subs	r6, r3, r6
 8010796:	9b06      	ldr	r3, [sp, #24]
 8010798:	2b00      	cmp	r3, #0
 801079a:	bfb4      	ite	lt
 801079c:	4633      	movlt	r3, r6
 801079e:	2300      	movge	r3, #0
 80107a0:	930c      	str	r3, [sp, #48]	; 0x30
 80107a2:	9b06      	ldr	r3, [sp, #24]
 80107a4:	2500      	movs	r5, #0
 80107a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80107aa:	9312      	str	r3, [sp, #72]	; 0x48
 80107ac:	462e      	mov	r6, r5
 80107ae:	9b07      	ldr	r3, [sp, #28]
 80107b0:	4620      	mov	r0, r4
 80107b2:	6859      	ldr	r1, [r3, #4]
 80107b4:	f001 fd60 	bl	8012278 <_Balloc>
 80107b8:	9005      	str	r0, [sp, #20]
 80107ba:	2800      	cmp	r0, #0
 80107bc:	f43f af0c 	beq.w	80105d8 <_strtod_l+0x490>
 80107c0:	9b07      	ldr	r3, [sp, #28]
 80107c2:	691a      	ldr	r2, [r3, #16]
 80107c4:	3202      	adds	r2, #2
 80107c6:	f103 010c 	add.w	r1, r3, #12
 80107ca:	0092      	lsls	r2, r2, #2
 80107cc:	300c      	adds	r0, #12
 80107ce:	f7fe fde9 	bl	800f3a4 <memcpy>
 80107d2:	ec4b ab10 	vmov	d0, sl, fp
 80107d6:	aa1a      	add	r2, sp, #104	; 0x68
 80107d8:	a919      	add	r1, sp, #100	; 0x64
 80107da:	4620      	mov	r0, r4
 80107dc:	f002 f93a 	bl	8012a54 <__d2b>
 80107e0:	ec4b ab18 	vmov	d8, sl, fp
 80107e4:	9018      	str	r0, [sp, #96]	; 0x60
 80107e6:	2800      	cmp	r0, #0
 80107e8:	f43f aef6 	beq.w	80105d8 <_strtod_l+0x490>
 80107ec:	2101      	movs	r1, #1
 80107ee:	4620      	mov	r0, r4
 80107f0:	f001 fe84 	bl	80124fc <__i2b>
 80107f4:	4606      	mov	r6, r0
 80107f6:	2800      	cmp	r0, #0
 80107f8:	f43f aeee 	beq.w	80105d8 <_strtod_l+0x490>
 80107fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80107fe:	9904      	ldr	r1, [sp, #16]
 8010800:	2b00      	cmp	r3, #0
 8010802:	bfab      	itete	ge
 8010804:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010806:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010808:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801080a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801080e:	bfac      	ite	ge
 8010810:	eb03 0902 	addge.w	r9, r3, r2
 8010814:	1ad7      	sublt	r7, r2, r3
 8010816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010818:	eba3 0801 	sub.w	r8, r3, r1
 801081c:	4490      	add	r8, r2
 801081e:	4ba1      	ldr	r3, [pc, #644]	; (8010aa4 <_strtod_l+0x95c>)
 8010820:	f108 38ff 	add.w	r8, r8, #4294967295
 8010824:	4598      	cmp	r8, r3
 8010826:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801082a:	f280 80c7 	bge.w	80109bc <_strtod_l+0x874>
 801082e:	eba3 0308 	sub.w	r3, r3, r8
 8010832:	2b1f      	cmp	r3, #31
 8010834:	eba2 0203 	sub.w	r2, r2, r3
 8010838:	f04f 0101 	mov.w	r1, #1
 801083c:	f300 80b1 	bgt.w	80109a2 <_strtod_l+0x85a>
 8010840:	fa01 f303 	lsl.w	r3, r1, r3
 8010844:	930d      	str	r3, [sp, #52]	; 0x34
 8010846:	2300      	movs	r3, #0
 8010848:	9308      	str	r3, [sp, #32]
 801084a:	eb09 0802 	add.w	r8, r9, r2
 801084e:	9b04      	ldr	r3, [sp, #16]
 8010850:	45c1      	cmp	r9, r8
 8010852:	4417      	add	r7, r2
 8010854:	441f      	add	r7, r3
 8010856:	464b      	mov	r3, r9
 8010858:	bfa8      	it	ge
 801085a:	4643      	movge	r3, r8
 801085c:	42bb      	cmp	r3, r7
 801085e:	bfa8      	it	ge
 8010860:	463b      	movge	r3, r7
 8010862:	2b00      	cmp	r3, #0
 8010864:	bfc2      	ittt	gt
 8010866:	eba8 0803 	subgt.w	r8, r8, r3
 801086a:	1aff      	subgt	r7, r7, r3
 801086c:	eba9 0903 	subgt.w	r9, r9, r3
 8010870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010872:	2b00      	cmp	r3, #0
 8010874:	dd17      	ble.n	80108a6 <_strtod_l+0x75e>
 8010876:	4631      	mov	r1, r6
 8010878:	461a      	mov	r2, r3
 801087a:	4620      	mov	r0, r4
 801087c:	f001 fefe 	bl	801267c <__pow5mult>
 8010880:	4606      	mov	r6, r0
 8010882:	2800      	cmp	r0, #0
 8010884:	f43f aea8 	beq.w	80105d8 <_strtod_l+0x490>
 8010888:	4601      	mov	r1, r0
 801088a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801088c:	4620      	mov	r0, r4
 801088e:	f001 fe4b 	bl	8012528 <__multiply>
 8010892:	900b      	str	r0, [sp, #44]	; 0x2c
 8010894:	2800      	cmp	r0, #0
 8010896:	f43f ae9f 	beq.w	80105d8 <_strtod_l+0x490>
 801089a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801089c:	4620      	mov	r0, r4
 801089e:	f001 fd2b 	bl	80122f8 <_Bfree>
 80108a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108a4:	9318      	str	r3, [sp, #96]	; 0x60
 80108a6:	f1b8 0f00 	cmp.w	r8, #0
 80108aa:	f300 808c 	bgt.w	80109c6 <_strtod_l+0x87e>
 80108ae:	9b06      	ldr	r3, [sp, #24]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	dd08      	ble.n	80108c6 <_strtod_l+0x77e>
 80108b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80108b6:	9905      	ldr	r1, [sp, #20]
 80108b8:	4620      	mov	r0, r4
 80108ba:	f001 fedf 	bl	801267c <__pow5mult>
 80108be:	9005      	str	r0, [sp, #20]
 80108c0:	2800      	cmp	r0, #0
 80108c2:	f43f ae89 	beq.w	80105d8 <_strtod_l+0x490>
 80108c6:	2f00      	cmp	r7, #0
 80108c8:	dd08      	ble.n	80108dc <_strtod_l+0x794>
 80108ca:	9905      	ldr	r1, [sp, #20]
 80108cc:	463a      	mov	r2, r7
 80108ce:	4620      	mov	r0, r4
 80108d0:	f001 ff2e 	bl	8012730 <__lshift>
 80108d4:	9005      	str	r0, [sp, #20]
 80108d6:	2800      	cmp	r0, #0
 80108d8:	f43f ae7e 	beq.w	80105d8 <_strtod_l+0x490>
 80108dc:	f1b9 0f00 	cmp.w	r9, #0
 80108e0:	dd08      	ble.n	80108f4 <_strtod_l+0x7ac>
 80108e2:	4631      	mov	r1, r6
 80108e4:	464a      	mov	r2, r9
 80108e6:	4620      	mov	r0, r4
 80108e8:	f001 ff22 	bl	8012730 <__lshift>
 80108ec:	4606      	mov	r6, r0
 80108ee:	2800      	cmp	r0, #0
 80108f0:	f43f ae72 	beq.w	80105d8 <_strtod_l+0x490>
 80108f4:	9a05      	ldr	r2, [sp, #20]
 80108f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80108f8:	4620      	mov	r0, r4
 80108fa:	f001 ffa5 	bl	8012848 <__mdiff>
 80108fe:	4605      	mov	r5, r0
 8010900:	2800      	cmp	r0, #0
 8010902:	f43f ae69 	beq.w	80105d8 <_strtod_l+0x490>
 8010906:	68c3      	ldr	r3, [r0, #12]
 8010908:	930b      	str	r3, [sp, #44]	; 0x2c
 801090a:	2300      	movs	r3, #0
 801090c:	60c3      	str	r3, [r0, #12]
 801090e:	4631      	mov	r1, r6
 8010910:	f001 ff7e 	bl	8012810 <__mcmp>
 8010914:	2800      	cmp	r0, #0
 8010916:	da60      	bge.n	80109da <_strtod_l+0x892>
 8010918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801091a:	ea53 030a 	orrs.w	r3, r3, sl
 801091e:	f040 8082 	bne.w	8010a26 <_strtod_l+0x8de>
 8010922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010926:	2b00      	cmp	r3, #0
 8010928:	d17d      	bne.n	8010a26 <_strtod_l+0x8de>
 801092a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801092e:	0d1b      	lsrs	r3, r3, #20
 8010930:	051b      	lsls	r3, r3, #20
 8010932:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010936:	d976      	bls.n	8010a26 <_strtod_l+0x8de>
 8010938:	696b      	ldr	r3, [r5, #20]
 801093a:	b913      	cbnz	r3, 8010942 <_strtod_l+0x7fa>
 801093c:	692b      	ldr	r3, [r5, #16]
 801093e:	2b01      	cmp	r3, #1
 8010940:	dd71      	ble.n	8010a26 <_strtod_l+0x8de>
 8010942:	4629      	mov	r1, r5
 8010944:	2201      	movs	r2, #1
 8010946:	4620      	mov	r0, r4
 8010948:	f001 fef2 	bl	8012730 <__lshift>
 801094c:	4631      	mov	r1, r6
 801094e:	4605      	mov	r5, r0
 8010950:	f001 ff5e 	bl	8012810 <__mcmp>
 8010954:	2800      	cmp	r0, #0
 8010956:	dd66      	ble.n	8010a26 <_strtod_l+0x8de>
 8010958:	9904      	ldr	r1, [sp, #16]
 801095a:	4a53      	ldr	r2, [pc, #332]	; (8010aa8 <_strtod_l+0x960>)
 801095c:	465b      	mov	r3, fp
 801095e:	2900      	cmp	r1, #0
 8010960:	f000 8081 	beq.w	8010a66 <_strtod_l+0x91e>
 8010964:	ea02 010b 	and.w	r1, r2, fp
 8010968:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801096c:	dc7b      	bgt.n	8010a66 <_strtod_l+0x91e>
 801096e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8010972:	f77f aea9 	ble.w	80106c8 <_strtod_l+0x580>
 8010976:	4b4d      	ldr	r3, [pc, #308]	; (8010aac <_strtod_l+0x964>)
 8010978:	4650      	mov	r0, sl
 801097a:	4659      	mov	r1, fp
 801097c:	2200      	movs	r2, #0
 801097e:	f7ef fe4b 	bl	8000618 <__aeabi_dmul>
 8010982:	460b      	mov	r3, r1
 8010984:	4303      	orrs	r3, r0
 8010986:	bf08      	it	eq
 8010988:	2322      	moveq	r3, #34	; 0x22
 801098a:	4682      	mov	sl, r0
 801098c:	468b      	mov	fp, r1
 801098e:	bf08      	it	eq
 8010990:	6023      	streq	r3, [r4, #0]
 8010992:	e62b      	b.n	80105ec <_strtod_l+0x4a4>
 8010994:	f04f 32ff 	mov.w	r2, #4294967295
 8010998:	fa02 f303 	lsl.w	r3, r2, r3
 801099c:	ea03 0a0a 	and.w	sl, r3, sl
 80109a0:	e6e3      	b.n	801076a <_strtod_l+0x622>
 80109a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80109a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80109aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80109ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80109b2:	fa01 f308 	lsl.w	r3, r1, r8
 80109b6:	9308      	str	r3, [sp, #32]
 80109b8:	910d      	str	r1, [sp, #52]	; 0x34
 80109ba:	e746      	b.n	801084a <_strtod_l+0x702>
 80109bc:	2300      	movs	r3, #0
 80109be:	9308      	str	r3, [sp, #32]
 80109c0:	2301      	movs	r3, #1
 80109c2:	930d      	str	r3, [sp, #52]	; 0x34
 80109c4:	e741      	b.n	801084a <_strtod_l+0x702>
 80109c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80109c8:	4642      	mov	r2, r8
 80109ca:	4620      	mov	r0, r4
 80109cc:	f001 feb0 	bl	8012730 <__lshift>
 80109d0:	9018      	str	r0, [sp, #96]	; 0x60
 80109d2:	2800      	cmp	r0, #0
 80109d4:	f47f af6b 	bne.w	80108ae <_strtod_l+0x766>
 80109d8:	e5fe      	b.n	80105d8 <_strtod_l+0x490>
 80109da:	465f      	mov	r7, fp
 80109dc:	d16e      	bne.n	8010abc <_strtod_l+0x974>
 80109de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80109e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80109e4:	b342      	cbz	r2, 8010a38 <_strtod_l+0x8f0>
 80109e6:	4a32      	ldr	r2, [pc, #200]	; (8010ab0 <_strtod_l+0x968>)
 80109e8:	4293      	cmp	r3, r2
 80109ea:	d128      	bne.n	8010a3e <_strtod_l+0x8f6>
 80109ec:	9b04      	ldr	r3, [sp, #16]
 80109ee:	4651      	mov	r1, sl
 80109f0:	b1eb      	cbz	r3, 8010a2e <_strtod_l+0x8e6>
 80109f2:	4b2d      	ldr	r3, [pc, #180]	; (8010aa8 <_strtod_l+0x960>)
 80109f4:	403b      	ands	r3, r7
 80109f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80109fa:	f04f 32ff 	mov.w	r2, #4294967295
 80109fe:	d819      	bhi.n	8010a34 <_strtod_l+0x8ec>
 8010a00:	0d1b      	lsrs	r3, r3, #20
 8010a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a06:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0a:	4299      	cmp	r1, r3
 8010a0c:	d117      	bne.n	8010a3e <_strtod_l+0x8f6>
 8010a0e:	4b29      	ldr	r3, [pc, #164]	; (8010ab4 <_strtod_l+0x96c>)
 8010a10:	429f      	cmp	r7, r3
 8010a12:	d102      	bne.n	8010a1a <_strtod_l+0x8d2>
 8010a14:	3101      	adds	r1, #1
 8010a16:	f43f addf 	beq.w	80105d8 <_strtod_l+0x490>
 8010a1a:	4b23      	ldr	r3, [pc, #140]	; (8010aa8 <_strtod_l+0x960>)
 8010a1c:	403b      	ands	r3, r7
 8010a1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010a22:	f04f 0a00 	mov.w	sl, #0
 8010a26:	9b04      	ldr	r3, [sp, #16]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d1a4      	bne.n	8010976 <_strtod_l+0x82e>
 8010a2c:	e5de      	b.n	80105ec <_strtod_l+0x4a4>
 8010a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a32:	e7ea      	b.n	8010a0a <_strtod_l+0x8c2>
 8010a34:	4613      	mov	r3, r2
 8010a36:	e7e8      	b.n	8010a0a <_strtod_l+0x8c2>
 8010a38:	ea53 030a 	orrs.w	r3, r3, sl
 8010a3c:	d08c      	beq.n	8010958 <_strtod_l+0x810>
 8010a3e:	9b08      	ldr	r3, [sp, #32]
 8010a40:	b1db      	cbz	r3, 8010a7a <_strtod_l+0x932>
 8010a42:	423b      	tst	r3, r7
 8010a44:	d0ef      	beq.n	8010a26 <_strtod_l+0x8de>
 8010a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a48:	9a04      	ldr	r2, [sp, #16]
 8010a4a:	4650      	mov	r0, sl
 8010a4c:	4659      	mov	r1, fp
 8010a4e:	b1c3      	cbz	r3, 8010a82 <_strtod_l+0x93a>
 8010a50:	f7ff fb5e 	bl	8010110 <sulp>
 8010a54:	4602      	mov	r2, r0
 8010a56:	460b      	mov	r3, r1
 8010a58:	ec51 0b18 	vmov	r0, r1, d8
 8010a5c:	f7ef fc26 	bl	80002ac <__adddf3>
 8010a60:	4682      	mov	sl, r0
 8010a62:	468b      	mov	fp, r1
 8010a64:	e7df      	b.n	8010a26 <_strtod_l+0x8de>
 8010a66:	4013      	ands	r3, r2
 8010a68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010a6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010a70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010a74:	f04f 3aff 	mov.w	sl, #4294967295
 8010a78:	e7d5      	b.n	8010a26 <_strtod_l+0x8de>
 8010a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010a7c:	ea13 0f0a 	tst.w	r3, sl
 8010a80:	e7e0      	b.n	8010a44 <_strtod_l+0x8fc>
 8010a82:	f7ff fb45 	bl	8010110 <sulp>
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	ec51 0b18 	vmov	r0, r1, d8
 8010a8e:	f7ef fc0b 	bl	80002a8 <__aeabi_dsub>
 8010a92:	2200      	movs	r2, #0
 8010a94:	2300      	movs	r3, #0
 8010a96:	4682      	mov	sl, r0
 8010a98:	468b      	mov	fp, r1
 8010a9a:	f7f0 f825 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d0c1      	beq.n	8010a26 <_strtod_l+0x8de>
 8010aa2:	e611      	b.n	80106c8 <_strtod_l+0x580>
 8010aa4:	fffffc02 	.word	0xfffffc02
 8010aa8:	7ff00000 	.word	0x7ff00000
 8010aac:	39500000 	.word	0x39500000
 8010ab0:	000fffff 	.word	0x000fffff
 8010ab4:	7fefffff 	.word	0x7fefffff
 8010ab8:	08015920 	.word	0x08015920
 8010abc:	4631      	mov	r1, r6
 8010abe:	4628      	mov	r0, r5
 8010ac0:	f002 f824 	bl	8012b0c <__ratio>
 8010ac4:	ec59 8b10 	vmov	r8, r9, d0
 8010ac8:	ee10 0a10 	vmov	r0, s0
 8010acc:	2200      	movs	r2, #0
 8010ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010ad2:	4649      	mov	r1, r9
 8010ad4:	f7f0 f81c 	bl	8000b10 <__aeabi_dcmple>
 8010ad8:	2800      	cmp	r0, #0
 8010ada:	d07a      	beq.n	8010bd2 <_strtod_l+0xa8a>
 8010adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d04a      	beq.n	8010b78 <_strtod_l+0xa30>
 8010ae2:	4b95      	ldr	r3, [pc, #596]	; (8010d38 <_strtod_l+0xbf0>)
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010aea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010d38 <_strtod_l+0xbf0>
 8010aee:	f04f 0800 	mov.w	r8, #0
 8010af2:	4b92      	ldr	r3, [pc, #584]	; (8010d3c <_strtod_l+0xbf4>)
 8010af4:	403b      	ands	r3, r7
 8010af6:	930d      	str	r3, [sp, #52]	; 0x34
 8010af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010afa:	4b91      	ldr	r3, [pc, #580]	; (8010d40 <_strtod_l+0xbf8>)
 8010afc:	429a      	cmp	r2, r3
 8010afe:	f040 80b0 	bne.w	8010c62 <_strtod_l+0xb1a>
 8010b02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010b0a:	ec4b ab10 	vmov	d0, sl, fp
 8010b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b12:	f001 ff23 	bl	801295c <__ulp>
 8010b16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b1a:	ec53 2b10 	vmov	r2, r3, d0
 8010b1e:	f7ef fd7b 	bl	8000618 <__aeabi_dmul>
 8010b22:	4652      	mov	r2, sl
 8010b24:	465b      	mov	r3, fp
 8010b26:	f7ef fbc1 	bl	80002ac <__adddf3>
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	4983      	ldr	r1, [pc, #524]	; (8010d3c <_strtod_l+0xbf4>)
 8010b2e:	4a85      	ldr	r2, [pc, #532]	; (8010d44 <_strtod_l+0xbfc>)
 8010b30:	4019      	ands	r1, r3
 8010b32:	4291      	cmp	r1, r2
 8010b34:	4682      	mov	sl, r0
 8010b36:	d960      	bls.n	8010bfa <_strtod_l+0xab2>
 8010b38:	ee18 3a90 	vmov	r3, s17
 8010b3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010b40:	4293      	cmp	r3, r2
 8010b42:	d104      	bne.n	8010b4e <_strtod_l+0xa06>
 8010b44:	ee18 3a10 	vmov	r3, s16
 8010b48:	3301      	adds	r3, #1
 8010b4a:	f43f ad45 	beq.w	80105d8 <_strtod_l+0x490>
 8010b4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010d50 <_strtod_l+0xc08>
 8010b52:	f04f 3aff 	mov.w	sl, #4294967295
 8010b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010b58:	4620      	mov	r0, r4
 8010b5a:	f001 fbcd 	bl	80122f8 <_Bfree>
 8010b5e:	9905      	ldr	r1, [sp, #20]
 8010b60:	4620      	mov	r0, r4
 8010b62:	f001 fbc9 	bl	80122f8 <_Bfree>
 8010b66:	4631      	mov	r1, r6
 8010b68:	4620      	mov	r0, r4
 8010b6a:	f001 fbc5 	bl	80122f8 <_Bfree>
 8010b6e:	4629      	mov	r1, r5
 8010b70:	4620      	mov	r0, r4
 8010b72:	f001 fbc1 	bl	80122f8 <_Bfree>
 8010b76:	e61a      	b.n	80107ae <_strtod_l+0x666>
 8010b78:	f1ba 0f00 	cmp.w	sl, #0
 8010b7c:	d11b      	bne.n	8010bb6 <_strtod_l+0xa6e>
 8010b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b82:	b9f3      	cbnz	r3, 8010bc2 <_strtod_l+0xa7a>
 8010b84:	4b6c      	ldr	r3, [pc, #432]	; (8010d38 <_strtod_l+0xbf0>)
 8010b86:	2200      	movs	r2, #0
 8010b88:	4640      	mov	r0, r8
 8010b8a:	4649      	mov	r1, r9
 8010b8c:	f7ef ffb6 	bl	8000afc <__aeabi_dcmplt>
 8010b90:	b9d0      	cbnz	r0, 8010bc8 <_strtod_l+0xa80>
 8010b92:	4640      	mov	r0, r8
 8010b94:	4649      	mov	r1, r9
 8010b96:	4b6c      	ldr	r3, [pc, #432]	; (8010d48 <_strtod_l+0xc00>)
 8010b98:	2200      	movs	r2, #0
 8010b9a:	f7ef fd3d 	bl	8000618 <__aeabi_dmul>
 8010b9e:	4680      	mov	r8, r0
 8010ba0:	4689      	mov	r9, r1
 8010ba2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010ba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010baa:	9315      	str	r3, [sp, #84]	; 0x54
 8010bac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010bb4:	e79d      	b.n	8010af2 <_strtod_l+0x9aa>
 8010bb6:	f1ba 0f01 	cmp.w	sl, #1
 8010bba:	d102      	bne.n	8010bc2 <_strtod_l+0xa7a>
 8010bbc:	2f00      	cmp	r7, #0
 8010bbe:	f43f ad83 	beq.w	80106c8 <_strtod_l+0x580>
 8010bc2:	4b62      	ldr	r3, [pc, #392]	; (8010d4c <_strtod_l+0xc04>)
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	e78e      	b.n	8010ae6 <_strtod_l+0x99e>
 8010bc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010d48 <_strtod_l+0xc00>
 8010bcc:	f04f 0800 	mov.w	r8, #0
 8010bd0:	e7e7      	b.n	8010ba2 <_strtod_l+0xa5a>
 8010bd2:	4b5d      	ldr	r3, [pc, #372]	; (8010d48 <_strtod_l+0xc00>)
 8010bd4:	4640      	mov	r0, r8
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	2200      	movs	r2, #0
 8010bda:	f7ef fd1d 	bl	8000618 <__aeabi_dmul>
 8010bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010be0:	4680      	mov	r8, r0
 8010be2:	4689      	mov	r9, r1
 8010be4:	b933      	cbnz	r3, 8010bf4 <_strtod_l+0xaac>
 8010be6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010bea:	900e      	str	r0, [sp, #56]	; 0x38
 8010bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8010bee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010bf2:	e7dd      	b.n	8010bb0 <_strtod_l+0xa68>
 8010bf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010bf8:	e7f9      	b.n	8010bee <_strtod_l+0xaa6>
 8010bfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010bfe:	9b04      	ldr	r3, [sp, #16]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d1a8      	bne.n	8010b56 <_strtod_l+0xa0e>
 8010c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c0a:	0d1b      	lsrs	r3, r3, #20
 8010c0c:	051b      	lsls	r3, r3, #20
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d1a1      	bne.n	8010b56 <_strtod_l+0xa0e>
 8010c12:	4640      	mov	r0, r8
 8010c14:	4649      	mov	r1, r9
 8010c16:	f7f0 f85f 	bl	8000cd8 <__aeabi_d2lz>
 8010c1a:	f7ef fccf 	bl	80005bc <__aeabi_l2d>
 8010c1e:	4602      	mov	r2, r0
 8010c20:	460b      	mov	r3, r1
 8010c22:	4640      	mov	r0, r8
 8010c24:	4649      	mov	r1, r9
 8010c26:	f7ef fb3f 	bl	80002a8 <__aeabi_dsub>
 8010c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010c30:	ea43 030a 	orr.w	r3, r3, sl
 8010c34:	4313      	orrs	r3, r2
 8010c36:	4680      	mov	r8, r0
 8010c38:	4689      	mov	r9, r1
 8010c3a:	d055      	beq.n	8010ce8 <_strtod_l+0xba0>
 8010c3c:	a336      	add	r3, pc, #216	; (adr r3, 8010d18 <_strtod_l+0xbd0>)
 8010c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c42:	f7ef ff5b 	bl	8000afc <__aeabi_dcmplt>
 8010c46:	2800      	cmp	r0, #0
 8010c48:	f47f acd0 	bne.w	80105ec <_strtod_l+0x4a4>
 8010c4c:	a334      	add	r3, pc, #208	; (adr r3, 8010d20 <_strtod_l+0xbd8>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	4640      	mov	r0, r8
 8010c54:	4649      	mov	r1, r9
 8010c56:	f7ef ff6f 	bl	8000b38 <__aeabi_dcmpgt>
 8010c5a:	2800      	cmp	r0, #0
 8010c5c:	f43f af7b 	beq.w	8010b56 <_strtod_l+0xa0e>
 8010c60:	e4c4      	b.n	80105ec <_strtod_l+0x4a4>
 8010c62:	9b04      	ldr	r3, [sp, #16]
 8010c64:	b333      	cbz	r3, 8010cb4 <_strtod_l+0xb6c>
 8010c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010c6c:	d822      	bhi.n	8010cb4 <_strtod_l+0xb6c>
 8010c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8010d28 <_strtod_l+0xbe0>)
 8010c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c74:	4640      	mov	r0, r8
 8010c76:	4649      	mov	r1, r9
 8010c78:	f7ef ff4a 	bl	8000b10 <__aeabi_dcmple>
 8010c7c:	b1a0      	cbz	r0, 8010ca8 <_strtod_l+0xb60>
 8010c7e:	4649      	mov	r1, r9
 8010c80:	4640      	mov	r0, r8
 8010c82:	f7ef ffa1 	bl	8000bc8 <__aeabi_d2uiz>
 8010c86:	2801      	cmp	r0, #1
 8010c88:	bf38      	it	cc
 8010c8a:	2001      	movcc	r0, #1
 8010c8c:	f7ef fc4a 	bl	8000524 <__aeabi_ui2d>
 8010c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c92:	4680      	mov	r8, r0
 8010c94:	4689      	mov	r9, r1
 8010c96:	bb23      	cbnz	r3, 8010ce2 <_strtod_l+0xb9a>
 8010c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c9c:	9010      	str	r0, [sp, #64]	; 0x40
 8010c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8010ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010ca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010cac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010cb0:	1a9b      	subs	r3, r3, r2
 8010cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8010cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8010cbc:	eef0 0a68 	vmov.f32	s1, s17
 8010cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010cc4:	f001 fe4a 	bl	801295c <__ulp>
 8010cc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010ccc:	ec53 2b10 	vmov	r2, r3, d0
 8010cd0:	f7ef fca2 	bl	8000618 <__aeabi_dmul>
 8010cd4:	ec53 2b18 	vmov	r2, r3, d8
 8010cd8:	f7ef fae8 	bl	80002ac <__adddf3>
 8010cdc:	4682      	mov	sl, r0
 8010cde:	468b      	mov	fp, r1
 8010ce0:	e78d      	b.n	8010bfe <_strtod_l+0xab6>
 8010ce2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010ce6:	e7db      	b.n	8010ca0 <_strtod_l+0xb58>
 8010ce8:	a311      	add	r3, pc, #68	; (adr r3, 8010d30 <_strtod_l+0xbe8>)
 8010cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cee:	f7ef ff05 	bl	8000afc <__aeabi_dcmplt>
 8010cf2:	e7b2      	b.n	8010c5a <_strtod_l+0xb12>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8010cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cfc:	6013      	str	r3, [r2, #0]
 8010cfe:	f7ff ba6b 	b.w	80101d8 <_strtod_l+0x90>
 8010d02:	2a65      	cmp	r2, #101	; 0x65
 8010d04:	f43f ab5f 	beq.w	80103c6 <_strtod_l+0x27e>
 8010d08:	2a45      	cmp	r2, #69	; 0x45
 8010d0a:	f43f ab5c 	beq.w	80103c6 <_strtod_l+0x27e>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	f7ff bb94 	b.w	801043c <_strtod_l+0x2f4>
 8010d14:	f3af 8000 	nop.w
 8010d18:	94a03595 	.word	0x94a03595
 8010d1c:	3fdfffff 	.word	0x3fdfffff
 8010d20:	35afe535 	.word	0x35afe535
 8010d24:	3fe00000 	.word	0x3fe00000
 8010d28:	ffc00000 	.word	0xffc00000
 8010d2c:	41dfffff 	.word	0x41dfffff
 8010d30:	94a03595 	.word	0x94a03595
 8010d34:	3fcfffff 	.word	0x3fcfffff
 8010d38:	3ff00000 	.word	0x3ff00000
 8010d3c:	7ff00000 	.word	0x7ff00000
 8010d40:	7fe00000 	.word	0x7fe00000
 8010d44:	7c9fffff 	.word	0x7c9fffff
 8010d48:	3fe00000 	.word	0x3fe00000
 8010d4c:	bff00000 	.word	0xbff00000
 8010d50:	7fefffff 	.word	0x7fefffff

08010d54 <_strtod_r>:
 8010d54:	4b01      	ldr	r3, [pc, #4]	; (8010d5c <_strtod_r+0x8>)
 8010d56:	f7ff b9f7 	b.w	8010148 <_strtod_l>
 8010d5a:	bf00      	nop
 8010d5c:	200001e4 	.word	0x200001e4

08010d60 <_strtol_l.constprop.0>:
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d66:	d001      	beq.n	8010d6c <_strtol_l.constprop.0+0xc>
 8010d68:	2b24      	cmp	r3, #36	; 0x24
 8010d6a:	d906      	bls.n	8010d7a <_strtol_l.constprop.0+0x1a>
 8010d6c:	f7fe faf0 	bl	800f350 <__errno>
 8010d70:	2316      	movs	r3, #22
 8010d72:	6003      	str	r3, [r0, #0]
 8010d74:	2000      	movs	r0, #0
 8010d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010e60 <_strtol_l.constprop.0+0x100>
 8010d7e:	460d      	mov	r5, r1
 8010d80:	462e      	mov	r6, r5
 8010d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010d8a:	f017 0708 	ands.w	r7, r7, #8
 8010d8e:	d1f7      	bne.n	8010d80 <_strtol_l.constprop.0+0x20>
 8010d90:	2c2d      	cmp	r4, #45	; 0x2d
 8010d92:	d132      	bne.n	8010dfa <_strtol_l.constprop.0+0x9a>
 8010d94:	782c      	ldrb	r4, [r5, #0]
 8010d96:	2701      	movs	r7, #1
 8010d98:	1cb5      	adds	r5, r6, #2
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d05b      	beq.n	8010e56 <_strtol_l.constprop.0+0xf6>
 8010d9e:	2b10      	cmp	r3, #16
 8010da0:	d109      	bne.n	8010db6 <_strtol_l.constprop.0+0x56>
 8010da2:	2c30      	cmp	r4, #48	; 0x30
 8010da4:	d107      	bne.n	8010db6 <_strtol_l.constprop.0+0x56>
 8010da6:	782c      	ldrb	r4, [r5, #0]
 8010da8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010dac:	2c58      	cmp	r4, #88	; 0x58
 8010dae:	d14d      	bne.n	8010e4c <_strtol_l.constprop.0+0xec>
 8010db0:	786c      	ldrb	r4, [r5, #1]
 8010db2:	2310      	movs	r3, #16
 8010db4:	3502      	adds	r5, #2
 8010db6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8010dbe:	f04f 0c00 	mov.w	ip, #0
 8010dc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8010dc6:	4666      	mov	r6, ip
 8010dc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8010dcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010dd0:	f1be 0f09 	cmp.w	lr, #9
 8010dd4:	d816      	bhi.n	8010e04 <_strtol_l.constprop.0+0xa4>
 8010dd6:	4674      	mov	r4, lr
 8010dd8:	42a3      	cmp	r3, r4
 8010dda:	dd24      	ble.n	8010e26 <_strtol_l.constprop.0+0xc6>
 8010ddc:	f1bc 0f00 	cmp.w	ip, #0
 8010de0:	db1e      	blt.n	8010e20 <_strtol_l.constprop.0+0xc0>
 8010de2:	45b1      	cmp	r9, r6
 8010de4:	d31c      	bcc.n	8010e20 <_strtol_l.constprop.0+0xc0>
 8010de6:	d101      	bne.n	8010dec <_strtol_l.constprop.0+0x8c>
 8010de8:	45a2      	cmp	sl, r4
 8010dea:	db19      	blt.n	8010e20 <_strtol_l.constprop.0+0xc0>
 8010dec:	fb06 4603 	mla	r6, r6, r3, r4
 8010df0:	f04f 0c01 	mov.w	ip, #1
 8010df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010df8:	e7e8      	b.n	8010dcc <_strtol_l.constprop.0+0x6c>
 8010dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8010dfc:	bf04      	itt	eq
 8010dfe:	782c      	ldrbeq	r4, [r5, #0]
 8010e00:	1cb5      	addeq	r5, r6, #2
 8010e02:	e7ca      	b.n	8010d9a <_strtol_l.constprop.0+0x3a>
 8010e04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010e08:	f1be 0f19 	cmp.w	lr, #25
 8010e0c:	d801      	bhi.n	8010e12 <_strtol_l.constprop.0+0xb2>
 8010e0e:	3c37      	subs	r4, #55	; 0x37
 8010e10:	e7e2      	b.n	8010dd8 <_strtol_l.constprop.0+0x78>
 8010e12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010e16:	f1be 0f19 	cmp.w	lr, #25
 8010e1a:	d804      	bhi.n	8010e26 <_strtol_l.constprop.0+0xc6>
 8010e1c:	3c57      	subs	r4, #87	; 0x57
 8010e1e:	e7db      	b.n	8010dd8 <_strtol_l.constprop.0+0x78>
 8010e20:	f04f 3cff 	mov.w	ip, #4294967295
 8010e24:	e7e6      	b.n	8010df4 <_strtol_l.constprop.0+0x94>
 8010e26:	f1bc 0f00 	cmp.w	ip, #0
 8010e2a:	da05      	bge.n	8010e38 <_strtol_l.constprop.0+0xd8>
 8010e2c:	2322      	movs	r3, #34	; 0x22
 8010e2e:	6003      	str	r3, [r0, #0]
 8010e30:	4646      	mov	r6, r8
 8010e32:	b942      	cbnz	r2, 8010e46 <_strtol_l.constprop.0+0xe6>
 8010e34:	4630      	mov	r0, r6
 8010e36:	e79e      	b.n	8010d76 <_strtol_l.constprop.0+0x16>
 8010e38:	b107      	cbz	r7, 8010e3c <_strtol_l.constprop.0+0xdc>
 8010e3a:	4276      	negs	r6, r6
 8010e3c:	2a00      	cmp	r2, #0
 8010e3e:	d0f9      	beq.n	8010e34 <_strtol_l.constprop.0+0xd4>
 8010e40:	f1bc 0f00 	cmp.w	ip, #0
 8010e44:	d000      	beq.n	8010e48 <_strtol_l.constprop.0+0xe8>
 8010e46:	1e69      	subs	r1, r5, #1
 8010e48:	6011      	str	r1, [r2, #0]
 8010e4a:	e7f3      	b.n	8010e34 <_strtol_l.constprop.0+0xd4>
 8010e4c:	2430      	movs	r4, #48	; 0x30
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d1b1      	bne.n	8010db6 <_strtol_l.constprop.0+0x56>
 8010e52:	2308      	movs	r3, #8
 8010e54:	e7af      	b.n	8010db6 <_strtol_l.constprop.0+0x56>
 8010e56:	2c30      	cmp	r4, #48	; 0x30
 8010e58:	d0a5      	beq.n	8010da6 <_strtol_l.constprop.0+0x46>
 8010e5a:	230a      	movs	r3, #10
 8010e5c:	e7ab      	b.n	8010db6 <_strtol_l.constprop.0+0x56>
 8010e5e:	bf00      	nop
 8010e60:	08015949 	.word	0x08015949

08010e64 <_strtol_r>:
 8010e64:	f7ff bf7c 	b.w	8010d60 <_strtol_l.constprop.0>

08010e68 <quorem>:
 8010e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	6903      	ldr	r3, [r0, #16]
 8010e6e:	690c      	ldr	r4, [r1, #16]
 8010e70:	42a3      	cmp	r3, r4
 8010e72:	4607      	mov	r7, r0
 8010e74:	f2c0 8081 	blt.w	8010f7a <quorem+0x112>
 8010e78:	3c01      	subs	r4, #1
 8010e7a:	f101 0814 	add.w	r8, r1, #20
 8010e7e:	f100 0514 	add.w	r5, r0, #20
 8010e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010e90:	3301      	adds	r3, #1
 8010e92:	429a      	cmp	r2, r3
 8010e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010ea0:	d331      	bcc.n	8010f06 <quorem+0x9e>
 8010ea2:	f04f 0e00 	mov.w	lr, #0
 8010ea6:	4640      	mov	r0, r8
 8010ea8:	46ac      	mov	ip, r5
 8010eaa:	46f2      	mov	sl, lr
 8010eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8010eb0:	b293      	uxth	r3, r2
 8010eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8010eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010eba:	b29b      	uxth	r3, r3
 8010ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8010ec0:	f8dc a000 	ldr.w	sl, [ip]
 8010ec4:	0c12      	lsrs	r2, r2, #16
 8010ec6:	fa13 f38a 	uxtah	r3, r3, sl
 8010eca:	fb06 e202 	mla	r2, r6, r2, lr
 8010ece:	9300      	str	r3, [sp, #0]
 8010ed0:	9b00      	ldr	r3, [sp, #0]
 8010ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010ed6:	b292      	uxth	r2, r2
 8010ed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010edc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010ee0:	f8bd 3000 	ldrh.w	r3, [sp]
 8010ee4:	4581      	cmp	r9, r0
 8010ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010eea:	f84c 3b04 	str.w	r3, [ip], #4
 8010eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010ef2:	d2db      	bcs.n	8010eac <quorem+0x44>
 8010ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8010ef8:	b92b      	cbnz	r3, 8010f06 <quorem+0x9e>
 8010efa:	9b01      	ldr	r3, [sp, #4]
 8010efc:	3b04      	subs	r3, #4
 8010efe:	429d      	cmp	r5, r3
 8010f00:	461a      	mov	r2, r3
 8010f02:	d32e      	bcc.n	8010f62 <quorem+0xfa>
 8010f04:	613c      	str	r4, [r7, #16]
 8010f06:	4638      	mov	r0, r7
 8010f08:	f001 fc82 	bl	8012810 <__mcmp>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	db24      	blt.n	8010f5a <quorem+0xf2>
 8010f10:	3601      	adds	r6, #1
 8010f12:	4628      	mov	r0, r5
 8010f14:	f04f 0c00 	mov.w	ip, #0
 8010f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8010f20:	b293      	uxth	r3, r2
 8010f22:	ebac 0303 	sub.w	r3, ip, r3
 8010f26:	0c12      	lsrs	r2, r2, #16
 8010f28:	fa13 f38e 	uxtah	r3, r3, lr
 8010f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f3a:	45c1      	cmp	r9, r8
 8010f3c:	f840 3b04 	str.w	r3, [r0], #4
 8010f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010f44:	d2e8      	bcs.n	8010f18 <quorem+0xb0>
 8010f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010f4e:	b922      	cbnz	r2, 8010f5a <quorem+0xf2>
 8010f50:	3b04      	subs	r3, #4
 8010f52:	429d      	cmp	r5, r3
 8010f54:	461a      	mov	r2, r3
 8010f56:	d30a      	bcc.n	8010f6e <quorem+0x106>
 8010f58:	613c      	str	r4, [r7, #16]
 8010f5a:	4630      	mov	r0, r6
 8010f5c:	b003      	add	sp, #12
 8010f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f62:	6812      	ldr	r2, [r2, #0]
 8010f64:	3b04      	subs	r3, #4
 8010f66:	2a00      	cmp	r2, #0
 8010f68:	d1cc      	bne.n	8010f04 <quorem+0x9c>
 8010f6a:	3c01      	subs	r4, #1
 8010f6c:	e7c7      	b.n	8010efe <quorem+0x96>
 8010f6e:	6812      	ldr	r2, [r2, #0]
 8010f70:	3b04      	subs	r3, #4
 8010f72:	2a00      	cmp	r2, #0
 8010f74:	d1f0      	bne.n	8010f58 <quorem+0xf0>
 8010f76:	3c01      	subs	r4, #1
 8010f78:	e7eb      	b.n	8010f52 <quorem+0xea>
 8010f7a:	2000      	movs	r0, #0
 8010f7c:	e7ee      	b.n	8010f5c <quorem+0xf4>
	...

08010f80 <_dtoa_r>:
 8010f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f84:	ed2d 8b04 	vpush	{d8-d9}
 8010f88:	ec57 6b10 	vmov	r6, r7, d0
 8010f8c:	b093      	sub	sp, #76	; 0x4c
 8010f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010f94:	9106      	str	r1, [sp, #24]
 8010f96:	ee10 aa10 	vmov	sl, s0
 8010f9a:	4604      	mov	r4, r0
 8010f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9e:	930c      	str	r3, [sp, #48]	; 0x30
 8010fa0:	46bb      	mov	fp, r7
 8010fa2:	b975      	cbnz	r5, 8010fc2 <_dtoa_r+0x42>
 8010fa4:	2010      	movs	r0, #16
 8010fa6:	f001 f94d 	bl	8012244 <malloc>
 8010faa:	4602      	mov	r2, r0
 8010fac:	6260      	str	r0, [r4, #36]	; 0x24
 8010fae:	b920      	cbnz	r0, 8010fba <_dtoa_r+0x3a>
 8010fb0:	4ba7      	ldr	r3, [pc, #668]	; (8011250 <_dtoa_r+0x2d0>)
 8010fb2:	21ea      	movs	r1, #234	; 0xea
 8010fb4:	48a7      	ldr	r0, [pc, #668]	; (8011254 <_dtoa_r+0x2d4>)
 8010fb6:	f002 f8ad 	bl	8013114 <__assert_func>
 8010fba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010fbe:	6005      	str	r5, [r0, #0]
 8010fc0:	60c5      	str	r5, [r0, #12]
 8010fc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fc4:	6819      	ldr	r1, [r3, #0]
 8010fc6:	b151      	cbz	r1, 8010fde <_dtoa_r+0x5e>
 8010fc8:	685a      	ldr	r2, [r3, #4]
 8010fca:	604a      	str	r2, [r1, #4]
 8010fcc:	2301      	movs	r3, #1
 8010fce:	4093      	lsls	r3, r2
 8010fd0:	608b      	str	r3, [r1, #8]
 8010fd2:	4620      	mov	r0, r4
 8010fd4:	f001 f990 	bl	80122f8 <_Bfree>
 8010fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fda:	2200      	movs	r2, #0
 8010fdc:	601a      	str	r2, [r3, #0]
 8010fde:	1e3b      	subs	r3, r7, #0
 8010fe0:	bfaa      	itet	ge
 8010fe2:	2300      	movge	r3, #0
 8010fe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8010fe8:	f8c8 3000 	strge.w	r3, [r8]
 8010fec:	4b9a      	ldr	r3, [pc, #616]	; (8011258 <_dtoa_r+0x2d8>)
 8010fee:	bfbc      	itt	lt
 8010ff0:	2201      	movlt	r2, #1
 8010ff2:	f8c8 2000 	strlt.w	r2, [r8]
 8010ff6:	ea33 030b 	bics.w	r3, r3, fp
 8010ffa:	d11b      	bne.n	8011034 <_dtoa_r+0xb4>
 8010ffc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010ffe:	f242 730f 	movw	r3, #9999	; 0x270f
 8011002:	6013      	str	r3, [r2, #0]
 8011004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011008:	4333      	orrs	r3, r6
 801100a:	f000 8592 	beq.w	8011b32 <_dtoa_r+0xbb2>
 801100e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011010:	b963      	cbnz	r3, 801102c <_dtoa_r+0xac>
 8011012:	4b92      	ldr	r3, [pc, #584]	; (801125c <_dtoa_r+0x2dc>)
 8011014:	e022      	b.n	801105c <_dtoa_r+0xdc>
 8011016:	4b92      	ldr	r3, [pc, #584]	; (8011260 <_dtoa_r+0x2e0>)
 8011018:	9301      	str	r3, [sp, #4]
 801101a:	3308      	adds	r3, #8
 801101c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801101e:	6013      	str	r3, [r2, #0]
 8011020:	9801      	ldr	r0, [sp, #4]
 8011022:	b013      	add	sp, #76	; 0x4c
 8011024:	ecbd 8b04 	vpop	{d8-d9}
 8011028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	4b8b      	ldr	r3, [pc, #556]	; (801125c <_dtoa_r+0x2dc>)
 801102e:	9301      	str	r3, [sp, #4]
 8011030:	3303      	adds	r3, #3
 8011032:	e7f3      	b.n	801101c <_dtoa_r+0x9c>
 8011034:	2200      	movs	r2, #0
 8011036:	2300      	movs	r3, #0
 8011038:	4650      	mov	r0, sl
 801103a:	4659      	mov	r1, fp
 801103c:	f7ef fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 8011040:	ec4b ab19 	vmov	d9, sl, fp
 8011044:	4680      	mov	r8, r0
 8011046:	b158      	cbz	r0, 8011060 <_dtoa_r+0xe0>
 8011048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801104a:	2301      	movs	r3, #1
 801104c:	6013      	str	r3, [r2, #0]
 801104e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011050:	2b00      	cmp	r3, #0
 8011052:	f000 856b 	beq.w	8011b2c <_dtoa_r+0xbac>
 8011056:	4883      	ldr	r0, [pc, #524]	; (8011264 <_dtoa_r+0x2e4>)
 8011058:	6018      	str	r0, [r3, #0]
 801105a:	1e43      	subs	r3, r0, #1
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	e7df      	b.n	8011020 <_dtoa_r+0xa0>
 8011060:	ec4b ab10 	vmov	d0, sl, fp
 8011064:	aa10      	add	r2, sp, #64	; 0x40
 8011066:	a911      	add	r1, sp, #68	; 0x44
 8011068:	4620      	mov	r0, r4
 801106a:	f001 fcf3 	bl	8012a54 <__d2b>
 801106e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8011072:	ee08 0a10 	vmov	s16, r0
 8011076:	2d00      	cmp	r5, #0
 8011078:	f000 8084 	beq.w	8011184 <_dtoa_r+0x204>
 801107c:	ee19 3a90 	vmov	r3, s19
 8011080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8011088:	4656      	mov	r6, sl
 801108a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801108e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011096:	4b74      	ldr	r3, [pc, #464]	; (8011268 <_dtoa_r+0x2e8>)
 8011098:	2200      	movs	r2, #0
 801109a:	4630      	mov	r0, r6
 801109c:	4639      	mov	r1, r7
 801109e:	f7ef f903 	bl	80002a8 <__aeabi_dsub>
 80110a2:	a365      	add	r3, pc, #404	; (adr r3, 8011238 <_dtoa_r+0x2b8>)
 80110a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110a8:	f7ef fab6 	bl	8000618 <__aeabi_dmul>
 80110ac:	a364      	add	r3, pc, #400	; (adr r3, 8011240 <_dtoa_r+0x2c0>)
 80110ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b2:	f7ef f8fb 	bl	80002ac <__adddf3>
 80110b6:	4606      	mov	r6, r0
 80110b8:	4628      	mov	r0, r5
 80110ba:	460f      	mov	r7, r1
 80110bc:	f7ef fa42 	bl	8000544 <__aeabi_i2d>
 80110c0:	a361      	add	r3, pc, #388	; (adr r3, 8011248 <_dtoa_r+0x2c8>)
 80110c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c6:	f7ef faa7 	bl	8000618 <__aeabi_dmul>
 80110ca:	4602      	mov	r2, r0
 80110cc:	460b      	mov	r3, r1
 80110ce:	4630      	mov	r0, r6
 80110d0:	4639      	mov	r1, r7
 80110d2:	f7ef f8eb 	bl	80002ac <__adddf3>
 80110d6:	4606      	mov	r6, r0
 80110d8:	460f      	mov	r7, r1
 80110da:	f7ef fd4d 	bl	8000b78 <__aeabi_d2iz>
 80110de:	2200      	movs	r2, #0
 80110e0:	9000      	str	r0, [sp, #0]
 80110e2:	2300      	movs	r3, #0
 80110e4:	4630      	mov	r0, r6
 80110e6:	4639      	mov	r1, r7
 80110e8:	f7ef fd08 	bl	8000afc <__aeabi_dcmplt>
 80110ec:	b150      	cbz	r0, 8011104 <_dtoa_r+0x184>
 80110ee:	9800      	ldr	r0, [sp, #0]
 80110f0:	f7ef fa28 	bl	8000544 <__aeabi_i2d>
 80110f4:	4632      	mov	r2, r6
 80110f6:	463b      	mov	r3, r7
 80110f8:	f7ef fcf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80110fc:	b910      	cbnz	r0, 8011104 <_dtoa_r+0x184>
 80110fe:	9b00      	ldr	r3, [sp, #0]
 8011100:	3b01      	subs	r3, #1
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	9b00      	ldr	r3, [sp, #0]
 8011106:	2b16      	cmp	r3, #22
 8011108:	d85a      	bhi.n	80111c0 <_dtoa_r+0x240>
 801110a:	9a00      	ldr	r2, [sp, #0]
 801110c:	4b57      	ldr	r3, [pc, #348]	; (801126c <_dtoa_r+0x2ec>)
 801110e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	ec51 0b19 	vmov	r0, r1, d9
 801111a:	f7ef fcef 	bl	8000afc <__aeabi_dcmplt>
 801111e:	2800      	cmp	r0, #0
 8011120:	d050      	beq.n	80111c4 <_dtoa_r+0x244>
 8011122:	9b00      	ldr	r3, [sp, #0]
 8011124:	3b01      	subs	r3, #1
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	2300      	movs	r3, #0
 801112a:	930b      	str	r3, [sp, #44]	; 0x2c
 801112c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801112e:	1b5d      	subs	r5, r3, r5
 8011130:	1e6b      	subs	r3, r5, #1
 8011132:	9305      	str	r3, [sp, #20]
 8011134:	bf45      	ittet	mi
 8011136:	f1c5 0301 	rsbmi	r3, r5, #1
 801113a:	9304      	strmi	r3, [sp, #16]
 801113c:	2300      	movpl	r3, #0
 801113e:	2300      	movmi	r3, #0
 8011140:	bf4c      	ite	mi
 8011142:	9305      	strmi	r3, [sp, #20]
 8011144:	9304      	strpl	r3, [sp, #16]
 8011146:	9b00      	ldr	r3, [sp, #0]
 8011148:	2b00      	cmp	r3, #0
 801114a:	db3d      	blt.n	80111c8 <_dtoa_r+0x248>
 801114c:	9b05      	ldr	r3, [sp, #20]
 801114e:	9a00      	ldr	r2, [sp, #0]
 8011150:	920a      	str	r2, [sp, #40]	; 0x28
 8011152:	4413      	add	r3, r2
 8011154:	9305      	str	r3, [sp, #20]
 8011156:	2300      	movs	r3, #0
 8011158:	9307      	str	r3, [sp, #28]
 801115a:	9b06      	ldr	r3, [sp, #24]
 801115c:	2b09      	cmp	r3, #9
 801115e:	f200 8089 	bhi.w	8011274 <_dtoa_r+0x2f4>
 8011162:	2b05      	cmp	r3, #5
 8011164:	bfc4      	itt	gt
 8011166:	3b04      	subgt	r3, #4
 8011168:	9306      	strgt	r3, [sp, #24]
 801116a:	9b06      	ldr	r3, [sp, #24]
 801116c:	f1a3 0302 	sub.w	r3, r3, #2
 8011170:	bfcc      	ite	gt
 8011172:	2500      	movgt	r5, #0
 8011174:	2501      	movle	r5, #1
 8011176:	2b03      	cmp	r3, #3
 8011178:	f200 8087 	bhi.w	801128a <_dtoa_r+0x30a>
 801117c:	e8df f003 	tbb	[pc, r3]
 8011180:	59383a2d 	.word	0x59383a2d
 8011184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011188:	441d      	add	r5, r3
 801118a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801118e:	2b20      	cmp	r3, #32
 8011190:	bfc1      	itttt	gt
 8011192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801119a:	fa0b f303 	lslgt.w	r3, fp, r3
 801119e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80111a2:	bfda      	itte	le
 80111a4:	f1c3 0320 	rsble	r3, r3, #32
 80111a8:	fa06 f003 	lslle.w	r0, r6, r3
 80111ac:	4318      	orrgt	r0, r3
 80111ae:	f7ef f9b9 	bl	8000524 <__aeabi_ui2d>
 80111b2:	2301      	movs	r3, #1
 80111b4:	4606      	mov	r6, r0
 80111b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80111ba:	3d01      	subs	r5, #1
 80111bc:	930e      	str	r3, [sp, #56]	; 0x38
 80111be:	e76a      	b.n	8011096 <_dtoa_r+0x116>
 80111c0:	2301      	movs	r3, #1
 80111c2:	e7b2      	b.n	801112a <_dtoa_r+0x1aa>
 80111c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80111c6:	e7b1      	b.n	801112c <_dtoa_r+0x1ac>
 80111c8:	9b04      	ldr	r3, [sp, #16]
 80111ca:	9a00      	ldr	r2, [sp, #0]
 80111cc:	1a9b      	subs	r3, r3, r2
 80111ce:	9304      	str	r3, [sp, #16]
 80111d0:	4253      	negs	r3, r2
 80111d2:	9307      	str	r3, [sp, #28]
 80111d4:	2300      	movs	r3, #0
 80111d6:	930a      	str	r3, [sp, #40]	; 0x28
 80111d8:	e7bf      	b.n	801115a <_dtoa_r+0x1da>
 80111da:	2300      	movs	r3, #0
 80111dc:	9308      	str	r3, [sp, #32]
 80111de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dc55      	bgt.n	8011290 <_dtoa_r+0x310>
 80111e4:	2301      	movs	r3, #1
 80111e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80111ea:	461a      	mov	r2, r3
 80111ec:	9209      	str	r2, [sp, #36]	; 0x24
 80111ee:	e00c      	b.n	801120a <_dtoa_r+0x28a>
 80111f0:	2301      	movs	r3, #1
 80111f2:	e7f3      	b.n	80111dc <_dtoa_r+0x25c>
 80111f4:	2300      	movs	r3, #0
 80111f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80111f8:	9308      	str	r3, [sp, #32]
 80111fa:	9b00      	ldr	r3, [sp, #0]
 80111fc:	4413      	add	r3, r2
 80111fe:	9302      	str	r3, [sp, #8]
 8011200:	3301      	adds	r3, #1
 8011202:	2b01      	cmp	r3, #1
 8011204:	9303      	str	r3, [sp, #12]
 8011206:	bfb8      	it	lt
 8011208:	2301      	movlt	r3, #1
 801120a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801120c:	2200      	movs	r2, #0
 801120e:	6042      	str	r2, [r0, #4]
 8011210:	2204      	movs	r2, #4
 8011212:	f102 0614 	add.w	r6, r2, #20
 8011216:	429e      	cmp	r6, r3
 8011218:	6841      	ldr	r1, [r0, #4]
 801121a:	d93d      	bls.n	8011298 <_dtoa_r+0x318>
 801121c:	4620      	mov	r0, r4
 801121e:	f001 f82b 	bl	8012278 <_Balloc>
 8011222:	9001      	str	r0, [sp, #4]
 8011224:	2800      	cmp	r0, #0
 8011226:	d13b      	bne.n	80112a0 <_dtoa_r+0x320>
 8011228:	4b11      	ldr	r3, [pc, #68]	; (8011270 <_dtoa_r+0x2f0>)
 801122a:	4602      	mov	r2, r0
 801122c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011230:	e6c0      	b.n	8010fb4 <_dtoa_r+0x34>
 8011232:	2301      	movs	r3, #1
 8011234:	e7df      	b.n	80111f6 <_dtoa_r+0x276>
 8011236:	bf00      	nop
 8011238:	636f4361 	.word	0x636f4361
 801123c:	3fd287a7 	.word	0x3fd287a7
 8011240:	8b60c8b3 	.word	0x8b60c8b3
 8011244:	3fc68a28 	.word	0x3fc68a28
 8011248:	509f79fb 	.word	0x509f79fb
 801124c:	3fd34413 	.word	0x3fd34413
 8011250:	08015a56 	.word	0x08015a56
 8011254:	08015a6d 	.word	0x08015a6d
 8011258:	7ff00000 	.word	0x7ff00000
 801125c:	08015a52 	.word	0x08015a52
 8011260:	08015a49 	.word	0x08015a49
 8011264:	080158cd 	.word	0x080158cd
 8011268:	3ff80000 	.word	0x3ff80000
 801126c:	08015bd8 	.word	0x08015bd8
 8011270:	08015ac8 	.word	0x08015ac8
 8011274:	2501      	movs	r5, #1
 8011276:	2300      	movs	r3, #0
 8011278:	9306      	str	r3, [sp, #24]
 801127a:	9508      	str	r5, [sp, #32]
 801127c:	f04f 33ff 	mov.w	r3, #4294967295
 8011280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011284:	2200      	movs	r2, #0
 8011286:	2312      	movs	r3, #18
 8011288:	e7b0      	b.n	80111ec <_dtoa_r+0x26c>
 801128a:	2301      	movs	r3, #1
 801128c:	9308      	str	r3, [sp, #32]
 801128e:	e7f5      	b.n	801127c <_dtoa_r+0x2fc>
 8011290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011296:	e7b8      	b.n	801120a <_dtoa_r+0x28a>
 8011298:	3101      	adds	r1, #1
 801129a:	6041      	str	r1, [r0, #4]
 801129c:	0052      	lsls	r2, r2, #1
 801129e:	e7b8      	b.n	8011212 <_dtoa_r+0x292>
 80112a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112a2:	9a01      	ldr	r2, [sp, #4]
 80112a4:	601a      	str	r2, [r3, #0]
 80112a6:	9b03      	ldr	r3, [sp, #12]
 80112a8:	2b0e      	cmp	r3, #14
 80112aa:	f200 809d 	bhi.w	80113e8 <_dtoa_r+0x468>
 80112ae:	2d00      	cmp	r5, #0
 80112b0:	f000 809a 	beq.w	80113e8 <_dtoa_r+0x468>
 80112b4:	9b00      	ldr	r3, [sp, #0]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	dd32      	ble.n	8011320 <_dtoa_r+0x3a0>
 80112ba:	4ab7      	ldr	r2, [pc, #732]	; (8011598 <_dtoa_r+0x618>)
 80112bc:	f003 030f 	and.w	r3, r3, #15
 80112c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80112c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112c8:	9b00      	ldr	r3, [sp, #0]
 80112ca:	05d8      	lsls	r0, r3, #23
 80112cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80112d0:	d516      	bpl.n	8011300 <_dtoa_r+0x380>
 80112d2:	4bb2      	ldr	r3, [pc, #712]	; (801159c <_dtoa_r+0x61c>)
 80112d4:	ec51 0b19 	vmov	r0, r1, d9
 80112d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80112dc:	f7ef fac6 	bl	800086c <__aeabi_ddiv>
 80112e0:	f007 070f 	and.w	r7, r7, #15
 80112e4:	4682      	mov	sl, r0
 80112e6:	468b      	mov	fp, r1
 80112e8:	2503      	movs	r5, #3
 80112ea:	4eac      	ldr	r6, [pc, #688]	; (801159c <_dtoa_r+0x61c>)
 80112ec:	b957      	cbnz	r7, 8011304 <_dtoa_r+0x384>
 80112ee:	4642      	mov	r2, r8
 80112f0:	464b      	mov	r3, r9
 80112f2:	4650      	mov	r0, sl
 80112f4:	4659      	mov	r1, fp
 80112f6:	f7ef fab9 	bl	800086c <__aeabi_ddiv>
 80112fa:	4682      	mov	sl, r0
 80112fc:	468b      	mov	fp, r1
 80112fe:	e028      	b.n	8011352 <_dtoa_r+0x3d2>
 8011300:	2502      	movs	r5, #2
 8011302:	e7f2      	b.n	80112ea <_dtoa_r+0x36a>
 8011304:	07f9      	lsls	r1, r7, #31
 8011306:	d508      	bpl.n	801131a <_dtoa_r+0x39a>
 8011308:	4640      	mov	r0, r8
 801130a:	4649      	mov	r1, r9
 801130c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011310:	f7ef f982 	bl	8000618 <__aeabi_dmul>
 8011314:	3501      	adds	r5, #1
 8011316:	4680      	mov	r8, r0
 8011318:	4689      	mov	r9, r1
 801131a:	107f      	asrs	r7, r7, #1
 801131c:	3608      	adds	r6, #8
 801131e:	e7e5      	b.n	80112ec <_dtoa_r+0x36c>
 8011320:	f000 809b 	beq.w	801145a <_dtoa_r+0x4da>
 8011324:	9b00      	ldr	r3, [sp, #0]
 8011326:	4f9d      	ldr	r7, [pc, #628]	; (801159c <_dtoa_r+0x61c>)
 8011328:	425e      	negs	r6, r3
 801132a:	4b9b      	ldr	r3, [pc, #620]	; (8011598 <_dtoa_r+0x618>)
 801132c:	f006 020f 	and.w	r2, r6, #15
 8011330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011338:	ec51 0b19 	vmov	r0, r1, d9
 801133c:	f7ef f96c 	bl	8000618 <__aeabi_dmul>
 8011340:	1136      	asrs	r6, r6, #4
 8011342:	4682      	mov	sl, r0
 8011344:	468b      	mov	fp, r1
 8011346:	2300      	movs	r3, #0
 8011348:	2502      	movs	r5, #2
 801134a:	2e00      	cmp	r6, #0
 801134c:	d17a      	bne.n	8011444 <_dtoa_r+0x4c4>
 801134e:	2b00      	cmp	r3, #0
 8011350:	d1d3      	bne.n	80112fa <_dtoa_r+0x37a>
 8011352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011354:	2b00      	cmp	r3, #0
 8011356:	f000 8082 	beq.w	801145e <_dtoa_r+0x4de>
 801135a:	4b91      	ldr	r3, [pc, #580]	; (80115a0 <_dtoa_r+0x620>)
 801135c:	2200      	movs	r2, #0
 801135e:	4650      	mov	r0, sl
 8011360:	4659      	mov	r1, fp
 8011362:	f7ef fbcb 	bl	8000afc <__aeabi_dcmplt>
 8011366:	2800      	cmp	r0, #0
 8011368:	d079      	beq.n	801145e <_dtoa_r+0x4de>
 801136a:	9b03      	ldr	r3, [sp, #12]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d076      	beq.n	801145e <_dtoa_r+0x4de>
 8011370:	9b02      	ldr	r3, [sp, #8]
 8011372:	2b00      	cmp	r3, #0
 8011374:	dd36      	ble.n	80113e4 <_dtoa_r+0x464>
 8011376:	9b00      	ldr	r3, [sp, #0]
 8011378:	4650      	mov	r0, sl
 801137a:	4659      	mov	r1, fp
 801137c:	1e5f      	subs	r7, r3, #1
 801137e:	2200      	movs	r2, #0
 8011380:	4b88      	ldr	r3, [pc, #544]	; (80115a4 <_dtoa_r+0x624>)
 8011382:	f7ef f949 	bl	8000618 <__aeabi_dmul>
 8011386:	9e02      	ldr	r6, [sp, #8]
 8011388:	4682      	mov	sl, r0
 801138a:	468b      	mov	fp, r1
 801138c:	3501      	adds	r5, #1
 801138e:	4628      	mov	r0, r5
 8011390:	f7ef f8d8 	bl	8000544 <__aeabi_i2d>
 8011394:	4652      	mov	r2, sl
 8011396:	465b      	mov	r3, fp
 8011398:	f7ef f93e 	bl	8000618 <__aeabi_dmul>
 801139c:	4b82      	ldr	r3, [pc, #520]	; (80115a8 <_dtoa_r+0x628>)
 801139e:	2200      	movs	r2, #0
 80113a0:	f7ee ff84 	bl	80002ac <__adddf3>
 80113a4:	46d0      	mov	r8, sl
 80113a6:	46d9      	mov	r9, fp
 80113a8:	4682      	mov	sl, r0
 80113aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80113ae:	2e00      	cmp	r6, #0
 80113b0:	d158      	bne.n	8011464 <_dtoa_r+0x4e4>
 80113b2:	4b7e      	ldr	r3, [pc, #504]	; (80115ac <_dtoa_r+0x62c>)
 80113b4:	2200      	movs	r2, #0
 80113b6:	4640      	mov	r0, r8
 80113b8:	4649      	mov	r1, r9
 80113ba:	f7ee ff75 	bl	80002a8 <__aeabi_dsub>
 80113be:	4652      	mov	r2, sl
 80113c0:	465b      	mov	r3, fp
 80113c2:	4680      	mov	r8, r0
 80113c4:	4689      	mov	r9, r1
 80113c6:	f7ef fbb7 	bl	8000b38 <__aeabi_dcmpgt>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	f040 8295 	bne.w	80118fa <_dtoa_r+0x97a>
 80113d0:	4652      	mov	r2, sl
 80113d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80113d6:	4640      	mov	r0, r8
 80113d8:	4649      	mov	r1, r9
 80113da:	f7ef fb8f 	bl	8000afc <__aeabi_dcmplt>
 80113de:	2800      	cmp	r0, #0
 80113e0:	f040 8289 	bne.w	80118f6 <_dtoa_r+0x976>
 80113e4:	ec5b ab19 	vmov	sl, fp, d9
 80113e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	f2c0 8148 	blt.w	8011680 <_dtoa_r+0x700>
 80113f0:	9a00      	ldr	r2, [sp, #0]
 80113f2:	2a0e      	cmp	r2, #14
 80113f4:	f300 8144 	bgt.w	8011680 <_dtoa_r+0x700>
 80113f8:	4b67      	ldr	r3, [pc, #412]	; (8011598 <_dtoa_r+0x618>)
 80113fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011404:	2b00      	cmp	r3, #0
 8011406:	f280 80d5 	bge.w	80115b4 <_dtoa_r+0x634>
 801140a:	9b03      	ldr	r3, [sp, #12]
 801140c:	2b00      	cmp	r3, #0
 801140e:	f300 80d1 	bgt.w	80115b4 <_dtoa_r+0x634>
 8011412:	f040 826f 	bne.w	80118f4 <_dtoa_r+0x974>
 8011416:	4b65      	ldr	r3, [pc, #404]	; (80115ac <_dtoa_r+0x62c>)
 8011418:	2200      	movs	r2, #0
 801141a:	4640      	mov	r0, r8
 801141c:	4649      	mov	r1, r9
 801141e:	f7ef f8fb 	bl	8000618 <__aeabi_dmul>
 8011422:	4652      	mov	r2, sl
 8011424:	465b      	mov	r3, fp
 8011426:	f7ef fb7d 	bl	8000b24 <__aeabi_dcmpge>
 801142a:	9e03      	ldr	r6, [sp, #12]
 801142c:	4637      	mov	r7, r6
 801142e:	2800      	cmp	r0, #0
 8011430:	f040 8245 	bne.w	80118be <_dtoa_r+0x93e>
 8011434:	9d01      	ldr	r5, [sp, #4]
 8011436:	2331      	movs	r3, #49	; 0x31
 8011438:	f805 3b01 	strb.w	r3, [r5], #1
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	3301      	adds	r3, #1
 8011440:	9300      	str	r3, [sp, #0]
 8011442:	e240      	b.n	80118c6 <_dtoa_r+0x946>
 8011444:	07f2      	lsls	r2, r6, #31
 8011446:	d505      	bpl.n	8011454 <_dtoa_r+0x4d4>
 8011448:	e9d7 2300 	ldrd	r2, r3, [r7]
 801144c:	f7ef f8e4 	bl	8000618 <__aeabi_dmul>
 8011450:	3501      	adds	r5, #1
 8011452:	2301      	movs	r3, #1
 8011454:	1076      	asrs	r6, r6, #1
 8011456:	3708      	adds	r7, #8
 8011458:	e777      	b.n	801134a <_dtoa_r+0x3ca>
 801145a:	2502      	movs	r5, #2
 801145c:	e779      	b.n	8011352 <_dtoa_r+0x3d2>
 801145e:	9f00      	ldr	r7, [sp, #0]
 8011460:	9e03      	ldr	r6, [sp, #12]
 8011462:	e794      	b.n	801138e <_dtoa_r+0x40e>
 8011464:	9901      	ldr	r1, [sp, #4]
 8011466:	4b4c      	ldr	r3, [pc, #304]	; (8011598 <_dtoa_r+0x618>)
 8011468:	4431      	add	r1, r6
 801146a:	910d      	str	r1, [sp, #52]	; 0x34
 801146c:	9908      	ldr	r1, [sp, #32]
 801146e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011476:	2900      	cmp	r1, #0
 8011478:	d043      	beq.n	8011502 <_dtoa_r+0x582>
 801147a:	494d      	ldr	r1, [pc, #308]	; (80115b0 <_dtoa_r+0x630>)
 801147c:	2000      	movs	r0, #0
 801147e:	f7ef f9f5 	bl	800086c <__aeabi_ddiv>
 8011482:	4652      	mov	r2, sl
 8011484:	465b      	mov	r3, fp
 8011486:	f7ee ff0f 	bl	80002a8 <__aeabi_dsub>
 801148a:	9d01      	ldr	r5, [sp, #4]
 801148c:	4682      	mov	sl, r0
 801148e:	468b      	mov	fp, r1
 8011490:	4649      	mov	r1, r9
 8011492:	4640      	mov	r0, r8
 8011494:	f7ef fb70 	bl	8000b78 <__aeabi_d2iz>
 8011498:	4606      	mov	r6, r0
 801149a:	f7ef f853 	bl	8000544 <__aeabi_i2d>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ee feff 	bl	80002a8 <__aeabi_dsub>
 80114aa:	3630      	adds	r6, #48	; 0x30
 80114ac:	f805 6b01 	strb.w	r6, [r5], #1
 80114b0:	4652      	mov	r2, sl
 80114b2:	465b      	mov	r3, fp
 80114b4:	4680      	mov	r8, r0
 80114b6:	4689      	mov	r9, r1
 80114b8:	f7ef fb20 	bl	8000afc <__aeabi_dcmplt>
 80114bc:	2800      	cmp	r0, #0
 80114be:	d163      	bne.n	8011588 <_dtoa_r+0x608>
 80114c0:	4642      	mov	r2, r8
 80114c2:	464b      	mov	r3, r9
 80114c4:	4936      	ldr	r1, [pc, #216]	; (80115a0 <_dtoa_r+0x620>)
 80114c6:	2000      	movs	r0, #0
 80114c8:	f7ee feee 	bl	80002a8 <__aeabi_dsub>
 80114cc:	4652      	mov	r2, sl
 80114ce:	465b      	mov	r3, fp
 80114d0:	f7ef fb14 	bl	8000afc <__aeabi_dcmplt>
 80114d4:	2800      	cmp	r0, #0
 80114d6:	f040 80b5 	bne.w	8011644 <_dtoa_r+0x6c4>
 80114da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80114dc:	429d      	cmp	r5, r3
 80114de:	d081      	beq.n	80113e4 <_dtoa_r+0x464>
 80114e0:	4b30      	ldr	r3, [pc, #192]	; (80115a4 <_dtoa_r+0x624>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	4650      	mov	r0, sl
 80114e6:	4659      	mov	r1, fp
 80114e8:	f7ef f896 	bl	8000618 <__aeabi_dmul>
 80114ec:	4b2d      	ldr	r3, [pc, #180]	; (80115a4 <_dtoa_r+0x624>)
 80114ee:	4682      	mov	sl, r0
 80114f0:	468b      	mov	fp, r1
 80114f2:	4640      	mov	r0, r8
 80114f4:	4649      	mov	r1, r9
 80114f6:	2200      	movs	r2, #0
 80114f8:	f7ef f88e 	bl	8000618 <__aeabi_dmul>
 80114fc:	4680      	mov	r8, r0
 80114fe:	4689      	mov	r9, r1
 8011500:	e7c6      	b.n	8011490 <_dtoa_r+0x510>
 8011502:	4650      	mov	r0, sl
 8011504:	4659      	mov	r1, fp
 8011506:	f7ef f887 	bl	8000618 <__aeabi_dmul>
 801150a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801150c:	9d01      	ldr	r5, [sp, #4]
 801150e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011510:	4682      	mov	sl, r0
 8011512:	468b      	mov	fp, r1
 8011514:	4649      	mov	r1, r9
 8011516:	4640      	mov	r0, r8
 8011518:	f7ef fb2e 	bl	8000b78 <__aeabi_d2iz>
 801151c:	4606      	mov	r6, r0
 801151e:	f7ef f811 	bl	8000544 <__aeabi_i2d>
 8011522:	3630      	adds	r6, #48	; 0x30
 8011524:	4602      	mov	r2, r0
 8011526:	460b      	mov	r3, r1
 8011528:	4640      	mov	r0, r8
 801152a:	4649      	mov	r1, r9
 801152c:	f7ee febc 	bl	80002a8 <__aeabi_dsub>
 8011530:	f805 6b01 	strb.w	r6, [r5], #1
 8011534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011536:	429d      	cmp	r5, r3
 8011538:	4680      	mov	r8, r0
 801153a:	4689      	mov	r9, r1
 801153c:	f04f 0200 	mov.w	r2, #0
 8011540:	d124      	bne.n	801158c <_dtoa_r+0x60c>
 8011542:	4b1b      	ldr	r3, [pc, #108]	; (80115b0 <_dtoa_r+0x630>)
 8011544:	4650      	mov	r0, sl
 8011546:	4659      	mov	r1, fp
 8011548:	f7ee feb0 	bl	80002ac <__adddf3>
 801154c:	4602      	mov	r2, r0
 801154e:	460b      	mov	r3, r1
 8011550:	4640      	mov	r0, r8
 8011552:	4649      	mov	r1, r9
 8011554:	f7ef faf0 	bl	8000b38 <__aeabi_dcmpgt>
 8011558:	2800      	cmp	r0, #0
 801155a:	d173      	bne.n	8011644 <_dtoa_r+0x6c4>
 801155c:	4652      	mov	r2, sl
 801155e:	465b      	mov	r3, fp
 8011560:	4913      	ldr	r1, [pc, #76]	; (80115b0 <_dtoa_r+0x630>)
 8011562:	2000      	movs	r0, #0
 8011564:	f7ee fea0 	bl	80002a8 <__aeabi_dsub>
 8011568:	4602      	mov	r2, r0
 801156a:	460b      	mov	r3, r1
 801156c:	4640      	mov	r0, r8
 801156e:	4649      	mov	r1, r9
 8011570:	f7ef fac4 	bl	8000afc <__aeabi_dcmplt>
 8011574:	2800      	cmp	r0, #0
 8011576:	f43f af35 	beq.w	80113e4 <_dtoa_r+0x464>
 801157a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801157c:	1e6b      	subs	r3, r5, #1
 801157e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011584:	2b30      	cmp	r3, #48	; 0x30
 8011586:	d0f8      	beq.n	801157a <_dtoa_r+0x5fa>
 8011588:	9700      	str	r7, [sp, #0]
 801158a:	e049      	b.n	8011620 <_dtoa_r+0x6a0>
 801158c:	4b05      	ldr	r3, [pc, #20]	; (80115a4 <_dtoa_r+0x624>)
 801158e:	f7ef f843 	bl	8000618 <__aeabi_dmul>
 8011592:	4680      	mov	r8, r0
 8011594:	4689      	mov	r9, r1
 8011596:	e7bd      	b.n	8011514 <_dtoa_r+0x594>
 8011598:	08015bd8 	.word	0x08015bd8
 801159c:	08015bb0 	.word	0x08015bb0
 80115a0:	3ff00000 	.word	0x3ff00000
 80115a4:	40240000 	.word	0x40240000
 80115a8:	401c0000 	.word	0x401c0000
 80115ac:	40140000 	.word	0x40140000
 80115b0:	3fe00000 	.word	0x3fe00000
 80115b4:	9d01      	ldr	r5, [sp, #4]
 80115b6:	4656      	mov	r6, sl
 80115b8:	465f      	mov	r7, fp
 80115ba:	4642      	mov	r2, r8
 80115bc:	464b      	mov	r3, r9
 80115be:	4630      	mov	r0, r6
 80115c0:	4639      	mov	r1, r7
 80115c2:	f7ef f953 	bl	800086c <__aeabi_ddiv>
 80115c6:	f7ef fad7 	bl	8000b78 <__aeabi_d2iz>
 80115ca:	4682      	mov	sl, r0
 80115cc:	f7ee ffba 	bl	8000544 <__aeabi_i2d>
 80115d0:	4642      	mov	r2, r8
 80115d2:	464b      	mov	r3, r9
 80115d4:	f7ef f820 	bl	8000618 <__aeabi_dmul>
 80115d8:	4602      	mov	r2, r0
 80115da:	460b      	mov	r3, r1
 80115dc:	4630      	mov	r0, r6
 80115de:	4639      	mov	r1, r7
 80115e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80115e4:	f7ee fe60 	bl	80002a8 <__aeabi_dsub>
 80115e8:	f805 6b01 	strb.w	r6, [r5], #1
 80115ec:	9e01      	ldr	r6, [sp, #4]
 80115ee:	9f03      	ldr	r7, [sp, #12]
 80115f0:	1bae      	subs	r6, r5, r6
 80115f2:	42b7      	cmp	r7, r6
 80115f4:	4602      	mov	r2, r0
 80115f6:	460b      	mov	r3, r1
 80115f8:	d135      	bne.n	8011666 <_dtoa_r+0x6e6>
 80115fa:	f7ee fe57 	bl	80002ac <__adddf3>
 80115fe:	4642      	mov	r2, r8
 8011600:	464b      	mov	r3, r9
 8011602:	4606      	mov	r6, r0
 8011604:	460f      	mov	r7, r1
 8011606:	f7ef fa97 	bl	8000b38 <__aeabi_dcmpgt>
 801160a:	b9d0      	cbnz	r0, 8011642 <_dtoa_r+0x6c2>
 801160c:	4642      	mov	r2, r8
 801160e:	464b      	mov	r3, r9
 8011610:	4630      	mov	r0, r6
 8011612:	4639      	mov	r1, r7
 8011614:	f7ef fa68 	bl	8000ae8 <__aeabi_dcmpeq>
 8011618:	b110      	cbz	r0, 8011620 <_dtoa_r+0x6a0>
 801161a:	f01a 0f01 	tst.w	sl, #1
 801161e:	d110      	bne.n	8011642 <_dtoa_r+0x6c2>
 8011620:	4620      	mov	r0, r4
 8011622:	ee18 1a10 	vmov	r1, s16
 8011626:	f000 fe67 	bl	80122f8 <_Bfree>
 801162a:	2300      	movs	r3, #0
 801162c:	9800      	ldr	r0, [sp, #0]
 801162e:	702b      	strb	r3, [r5, #0]
 8011630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011632:	3001      	adds	r0, #1
 8011634:	6018      	str	r0, [r3, #0]
 8011636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011638:	2b00      	cmp	r3, #0
 801163a:	f43f acf1 	beq.w	8011020 <_dtoa_r+0xa0>
 801163e:	601d      	str	r5, [r3, #0]
 8011640:	e4ee      	b.n	8011020 <_dtoa_r+0xa0>
 8011642:	9f00      	ldr	r7, [sp, #0]
 8011644:	462b      	mov	r3, r5
 8011646:	461d      	mov	r5, r3
 8011648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801164c:	2a39      	cmp	r2, #57	; 0x39
 801164e:	d106      	bne.n	801165e <_dtoa_r+0x6de>
 8011650:	9a01      	ldr	r2, [sp, #4]
 8011652:	429a      	cmp	r2, r3
 8011654:	d1f7      	bne.n	8011646 <_dtoa_r+0x6c6>
 8011656:	9901      	ldr	r1, [sp, #4]
 8011658:	2230      	movs	r2, #48	; 0x30
 801165a:	3701      	adds	r7, #1
 801165c:	700a      	strb	r2, [r1, #0]
 801165e:	781a      	ldrb	r2, [r3, #0]
 8011660:	3201      	adds	r2, #1
 8011662:	701a      	strb	r2, [r3, #0]
 8011664:	e790      	b.n	8011588 <_dtoa_r+0x608>
 8011666:	4ba6      	ldr	r3, [pc, #664]	; (8011900 <_dtoa_r+0x980>)
 8011668:	2200      	movs	r2, #0
 801166a:	f7ee ffd5 	bl	8000618 <__aeabi_dmul>
 801166e:	2200      	movs	r2, #0
 8011670:	2300      	movs	r3, #0
 8011672:	4606      	mov	r6, r0
 8011674:	460f      	mov	r7, r1
 8011676:	f7ef fa37 	bl	8000ae8 <__aeabi_dcmpeq>
 801167a:	2800      	cmp	r0, #0
 801167c:	d09d      	beq.n	80115ba <_dtoa_r+0x63a>
 801167e:	e7cf      	b.n	8011620 <_dtoa_r+0x6a0>
 8011680:	9a08      	ldr	r2, [sp, #32]
 8011682:	2a00      	cmp	r2, #0
 8011684:	f000 80d7 	beq.w	8011836 <_dtoa_r+0x8b6>
 8011688:	9a06      	ldr	r2, [sp, #24]
 801168a:	2a01      	cmp	r2, #1
 801168c:	f300 80ba 	bgt.w	8011804 <_dtoa_r+0x884>
 8011690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011692:	2a00      	cmp	r2, #0
 8011694:	f000 80b2 	beq.w	80117fc <_dtoa_r+0x87c>
 8011698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801169c:	9e07      	ldr	r6, [sp, #28]
 801169e:	9d04      	ldr	r5, [sp, #16]
 80116a0:	9a04      	ldr	r2, [sp, #16]
 80116a2:	441a      	add	r2, r3
 80116a4:	9204      	str	r2, [sp, #16]
 80116a6:	9a05      	ldr	r2, [sp, #20]
 80116a8:	2101      	movs	r1, #1
 80116aa:	441a      	add	r2, r3
 80116ac:	4620      	mov	r0, r4
 80116ae:	9205      	str	r2, [sp, #20]
 80116b0:	f000 ff24 	bl	80124fc <__i2b>
 80116b4:	4607      	mov	r7, r0
 80116b6:	2d00      	cmp	r5, #0
 80116b8:	dd0c      	ble.n	80116d4 <_dtoa_r+0x754>
 80116ba:	9b05      	ldr	r3, [sp, #20]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	dd09      	ble.n	80116d4 <_dtoa_r+0x754>
 80116c0:	42ab      	cmp	r3, r5
 80116c2:	9a04      	ldr	r2, [sp, #16]
 80116c4:	bfa8      	it	ge
 80116c6:	462b      	movge	r3, r5
 80116c8:	1ad2      	subs	r2, r2, r3
 80116ca:	9204      	str	r2, [sp, #16]
 80116cc:	9a05      	ldr	r2, [sp, #20]
 80116ce:	1aed      	subs	r5, r5, r3
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	9305      	str	r3, [sp, #20]
 80116d4:	9b07      	ldr	r3, [sp, #28]
 80116d6:	b31b      	cbz	r3, 8011720 <_dtoa_r+0x7a0>
 80116d8:	9b08      	ldr	r3, [sp, #32]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	f000 80af 	beq.w	801183e <_dtoa_r+0x8be>
 80116e0:	2e00      	cmp	r6, #0
 80116e2:	dd13      	ble.n	801170c <_dtoa_r+0x78c>
 80116e4:	4639      	mov	r1, r7
 80116e6:	4632      	mov	r2, r6
 80116e8:	4620      	mov	r0, r4
 80116ea:	f000 ffc7 	bl	801267c <__pow5mult>
 80116ee:	ee18 2a10 	vmov	r2, s16
 80116f2:	4601      	mov	r1, r0
 80116f4:	4607      	mov	r7, r0
 80116f6:	4620      	mov	r0, r4
 80116f8:	f000 ff16 	bl	8012528 <__multiply>
 80116fc:	ee18 1a10 	vmov	r1, s16
 8011700:	4680      	mov	r8, r0
 8011702:	4620      	mov	r0, r4
 8011704:	f000 fdf8 	bl	80122f8 <_Bfree>
 8011708:	ee08 8a10 	vmov	s16, r8
 801170c:	9b07      	ldr	r3, [sp, #28]
 801170e:	1b9a      	subs	r2, r3, r6
 8011710:	d006      	beq.n	8011720 <_dtoa_r+0x7a0>
 8011712:	ee18 1a10 	vmov	r1, s16
 8011716:	4620      	mov	r0, r4
 8011718:	f000 ffb0 	bl	801267c <__pow5mult>
 801171c:	ee08 0a10 	vmov	s16, r0
 8011720:	2101      	movs	r1, #1
 8011722:	4620      	mov	r0, r4
 8011724:	f000 feea 	bl	80124fc <__i2b>
 8011728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801172a:	2b00      	cmp	r3, #0
 801172c:	4606      	mov	r6, r0
 801172e:	f340 8088 	ble.w	8011842 <_dtoa_r+0x8c2>
 8011732:	461a      	mov	r2, r3
 8011734:	4601      	mov	r1, r0
 8011736:	4620      	mov	r0, r4
 8011738:	f000 ffa0 	bl	801267c <__pow5mult>
 801173c:	9b06      	ldr	r3, [sp, #24]
 801173e:	2b01      	cmp	r3, #1
 8011740:	4606      	mov	r6, r0
 8011742:	f340 8081 	ble.w	8011848 <_dtoa_r+0x8c8>
 8011746:	f04f 0800 	mov.w	r8, #0
 801174a:	6933      	ldr	r3, [r6, #16]
 801174c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011750:	6918      	ldr	r0, [r3, #16]
 8011752:	f000 fe83 	bl	801245c <__hi0bits>
 8011756:	f1c0 0020 	rsb	r0, r0, #32
 801175a:	9b05      	ldr	r3, [sp, #20]
 801175c:	4418      	add	r0, r3
 801175e:	f010 001f 	ands.w	r0, r0, #31
 8011762:	f000 8092 	beq.w	801188a <_dtoa_r+0x90a>
 8011766:	f1c0 0320 	rsb	r3, r0, #32
 801176a:	2b04      	cmp	r3, #4
 801176c:	f340 808a 	ble.w	8011884 <_dtoa_r+0x904>
 8011770:	f1c0 001c 	rsb	r0, r0, #28
 8011774:	9b04      	ldr	r3, [sp, #16]
 8011776:	4403      	add	r3, r0
 8011778:	9304      	str	r3, [sp, #16]
 801177a:	9b05      	ldr	r3, [sp, #20]
 801177c:	4403      	add	r3, r0
 801177e:	4405      	add	r5, r0
 8011780:	9305      	str	r3, [sp, #20]
 8011782:	9b04      	ldr	r3, [sp, #16]
 8011784:	2b00      	cmp	r3, #0
 8011786:	dd07      	ble.n	8011798 <_dtoa_r+0x818>
 8011788:	ee18 1a10 	vmov	r1, s16
 801178c:	461a      	mov	r2, r3
 801178e:	4620      	mov	r0, r4
 8011790:	f000 ffce 	bl	8012730 <__lshift>
 8011794:	ee08 0a10 	vmov	s16, r0
 8011798:	9b05      	ldr	r3, [sp, #20]
 801179a:	2b00      	cmp	r3, #0
 801179c:	dd05      	ble.n	80117aa <_dtoa_r+0x82a>
 801179e:	4631      	mov	r1, r6
 80117a0:	461a      	mov	r2, r3
 80117a2:	4620      	mov	r0, r4
 80117a4:	f000 ffc4 	bl	8012730 <__lshift>
 80117a8:	4606      	mov	r6, r0
 80117aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d06e      	beq.n	801188e <_dtoa_r+0x90e>
 80117b0:	ee18 0a10 	vmov	r0, s16
 80117b4:	4631      	mov	r1, r6
 80117b6:	f001 f82b 	bl	8012810 <__mcmp>
 80117ba:	2800      	cmp	r0, #0
 80117bc:	da67      	bge.n	801188e <_dtoa_r+0x90e>
 80117be:	9b00      	ldr	r3, [sp, #0]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	ee18 1a10 	vmov	r1, s16
 80117c6:	9300      	str	r3, [sp, #0]
 80117c8:	220a      	movs	r2, #10
 80117ca:	2300      	movs	r3, #0
 80117cc:	4620      	mov	r0, r4
 80117ce:	f000 fdb5 	bl	801233c <__multadd>
 80117d2:	9b08      	ldr	r3, [sp, #32]
 80117d4:	ee08 0a10 	vmov	s16, r0
 80117d8:	2b00      	cmp	r3, #0
 80117da:	f000 81b1 	beq.w	8011b40 <_dtoa_r+0xbc0>
 80117de:	2300      	movs	r3, #0
 80117e0:	4639      	mov	r1, r7
 80117e2:	220a      	movs	r2, #10
 80117e4:	4620      	mov	r0, r4
 80117e6:	f000 fda9 	bl	801233c <__multadd>
 80117ea:	9b02      	ldr	r3, [sp, #8]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	4607      	mov	r7, r0
 80117f0:	f300 808e 	bgt.w	8011910 <_dtoa_r+0x990>
 80117f4:	9b06      	ldr	r3, [sp, #24]
 80117f6:	2b02      	cmp	r3, #2
 80117f8:	dc51      	bgt.n	801189e <_dtoa_r+0x91e>
 80117fa:	e089      	b.n	8011910 <_dtoa_r+0x990>
 80117fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80117fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011802:	e74b      	b.n	801169c <_dtoa_r+0x71c>
 8011804:	9b03      	ldr	r3, [sp, #12]
 8011806:	1e5e      	subs	r6, r3, #1
 8011808:	9b07      	ldr	r3, [sp, #28]
 801180a:	42b3      	cmp	r3, r6
 801180c:	bfbf      	itttt	lt
 801180e:	9b07      	ldrlt	r3, [sp, #28]
 8011810:	9607      	strlt	r6, [sp, #28]
 8011812:	1af2      	sublt	r2, r6, r3
 8011814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011816:	bfb6      	itet	lt
 8011818:	189b      	addlt	r3, r3, r2
 801181a:	1b9e      	subge	r6, r3, r6
 801181c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801181e:	9b03      	ldr	r3, [sp, #12]
 8011820:	bfb8      	it	lt
 8011822:	2600      	movlt	r6, #0
 8011824:	2b00      	cmp	r3, #0
 8011826:	bfb7      	itett	lt
 8011828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801182c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8011830:	1a9d      	sublt	r5, r3, r2
 8011832:	2300      	movlt	r3, #0
 8011834:	e734      	b.n	80116a0 <_dtoa_r+0x720>
 8011836:	9e07      	ldr	r6, [sp, #28]
 8011838:	9d04      	ldr	r5, [sp, #16]
 801183a:	9f08      	ldr	r7, [sp, #32]
 801183c:	e73b      	b.n	80116b6 <_dtoa_r+0x736>
 801183e:	9a07      	ldr	r2, [sp, #28]
 8011840:	e767      	b.n	8011712 <_dtoa_r+0x792>
 8011842:	9b06      	ldr	r3, [sp, #24]
 8011844:	2b01      	cmp	r3, #1
 8011846:	dc18      	bgt.n	801187a <_dtoa_r+0x8fa>
 8011848:	f1ba 0f00 	cmp.w	sl, #0
 801184c:	d115      	bne.n	801187a <_dtoa_r+0x8fa>
 801184e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011852:	b993      	cbnz	r3, 801187a <_dtoa_r+0x8fa>
 8011854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011858:	0d1b      	lsrs	r3, r3, #20
 801185a:	051b      	lsls	r3, r3, #20
 801185c:	b183      	cbz	r3, 8011880 <_dtoa_r+0x900>
 801185e:	9b04      	ldr	r3, [sp, #16]
 8011860:	3301      	adds	r3, #1
 8011862:	9304      	str	r3, [sp, #16]
 8011864:	9b05      	ldr	r3, [sp, #20]
 8011866:	3301      	adds	r3, #1
 8011868:	9305      	str	r3, [sp, #20]
 801186a:	f04f 0801 	mov.w	r8, #1
 801186e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011870:	2b00      	cmp	r3, #0
 8011872:	f47f af6a 	bne.w	801174a <_dtoa_r+0x7ca>
 8011876:	2001      	movs	r0, #1
 8011878:	e76f      	b.n	801175a <_dtoa_r+0x7da>
 801187a:	f04f 0800 	mov.w	r8, #0
 801187e:	e7f6      	b.n	801186e <_dtoa_r+0x8ee>
 8011880:	4698      	mov	r8, r3
 8011882:	e7f4      	b.n	801186e <_dtoa_r+0x8ee>
 8011884:	f43f af7d 	beq.w	8011782 <_dtoa_r+0x802>
 8011888:	4618      	mov	r0, r3
 801188a:	301c      	adds	r0, #28
 801188c:	e772      	b.n	8011774 <_dtoa_r+0x7f4>
 801188e:	9b03      	ldr	r3, [sp, #12]
 8011890:	2b00      	cmp	r3, #0
 8011892:	dc37      	bgt.n	8011904 <_dtoa_r+0x984>
 8011894:	9b06      	ldr	r3, [sp, #24]
 8011896:	2b02      	cmp	r3, #2
 8011898:	dd34      	ble.n	8011904 <_dtoa_r+0x984>
 801189a:	9b03      	ldr	r3, [sp, #12]
 801189c:	9302      	str	r3, [sp, #8]
 801189e:	9b02      	ldr	r3, [sp, #8]
 80118a0:	b96b      	cbnz	r3, 80118be <_dtoa_r+0x93e>
 80118a2:	4631      	mov	r1, r6
 80118a4:	2205      	movs	r2, #5
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fd48 	bl	801233c <__multadd>
 80118ac:	4601      	mov	r1, r0
 80118ae:	4606      	mov	r6, r0
 80118b0:	ee18 0a10 	vmov	r0, s16
 80118b4:	f000 ffac 	bl	8012810 <__mcmp>
 80118b8:	2800      	cmp	r0, #0
 80118ba:	f73f adbb 	bgt.w	8011434 <_dtoa_r+0x4b4>
 80118be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118c0:	9d01      	ldr	r5, [sp, #4]
 80118c2:	43db      	mvns	r3, r3
 80118c4:	9300      	str	r3, [sp, #0]
 80118c6:	f04f 0800 	mov.w	r8, #0
 80118ca:	4631      	mov	r1, r6
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 fd13 	bl	80122f8 <_Bfree>
 80118d2:	2f00      	cmp	r7, #0
 80118d4:	f43f aea4 	beq.w	8011620 <_dtoa_r+0x6a0>
 80118d8:	f1b8 0f00 	cmp.w	r8, #0
 80118dc:	d005      	beq.n	80118ea <_dtoa_r+0x96a>
 80118de:	45b8      	cmp	r8, r7
 80118e0:	d003      	beq.n	80118ea <_dtoa_r+0x96a>
 80118e2:	4641      	mov	r1, r8
 80118e4:	4620      	mov	r0, r4
 80118e6:	f000 fd07 	bl	80122f8 <_Bfree>
 80118ea:	4639      	mov	r1, r7
 80118ec:	4620      	mov	r0, r4
 80118ee:	f000 fd03 	bl	80122f8 <_Bfree>
 80118f2:	e695      	b.n	8011620 <_dtoa_r+0x6a0>
 80118f4:	2600      	movs	r6, #0
 80118f6:	4637      	mov	r7, r6
 80118f8:	e7e1      	b.n	80118be <_dtoa_r+0x93e>
 80118fa:	9700      	str	r7, [sp, #0]
 80118fc:	4637      	mov	r7, r6
 80118fe:	e599      	b.n	8011434 <_dtoa_r+0x4b4>
 8011900:	40240000 	.word	0x40240000
 8011904:	9b08      	ldr	r3, [sp, #32]
 8011906:	2b00      	cmp	r3, #0
 8011908:	f000 80ca 	beq.w	8011aa0 <_dtoa_r+0xb20>
 801190c:	9b03      	ldr	r3, [sp, #12]
 801190e:	9302      	str	r3, [sp, #8]
 8011910:	2d00      	cmp	r5, #0
 8011912:	dd05      	ble.n	8011920 <_dtoa_r+0x9a0>
 8011914:	4639      	mov	r1, r7
 8011916:	462a      	mov	r2, r5
 8011918:	4620      	mov	r0, r4
 801191a:	f000 ff09 	bl	8012730 <__lshift>
 801191e:	4607      	mov	r7, r0
 8011920:	f1b8 0f00 	cmp.w	r8, #0
 8011924:	d05b      	beq.n	80119de <_dtoa_r+0xa5e>
 8011926:	6879      	ldr	r1, [r7, #4]
 8011928:	4620      	mov	r0, r4
 801192a:	f000 fca5 	bl	8012278 <_Balloc>
 801192e:	4605      	mov	r5, r0
 8011930:	b928      	cbnz	r0, 801193e <_dtoa_r+0x9be>
 8011932:	4b87      	ldr	r3, [pc, #540]	; (8011b50 <_dtoa_r+0xbd0>)
 8011934:	4602      	mov	r2, r0
 8011936:	f240 21ea 	movw	r1, #746	; 0x2ea
 801193a:	f7ff bb3b 	b.w	8010fb4 <_dtoa_r+0x34>
 801193e:	693a      	ldr	r2, [r7, #16]
 8011940:	3202      	adds	r2, #2
 8011942:	0092      	lsls	r2, r2, #2
 8011944:	f107 010c 	add.w	r1, r7, #12
 8011948:	300c      	adds	r0, #12
 801194a:	f7fd fd2b 	bl	800f3a4 <memcpy>
 801194e:	2201      	movs	r2, #1
 8011950:	4629      	mov	r1, r5
 8011952:	4620      	mov	r0, r4
 8011954:	f000 feec 	bl	8012730 <__lshift>
 8011958:	9b01      	ldr	r3, [sp, #4]
 801195a:	f103 0901 	add.w	r9, r3, #1
 801195e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8011962:	4413      	add	r3, r2
 8011964:	9305      	str	r3, [sp, #20]
 8011966:	f00a 0301 	and.w	r3, sl, #1
 801196a:	46b8      	mov	r8, r7
 801196c:	9304      	str	r3, [sp, #16]
 801196e:	4607      	mov	r7, r0
 8011970:	4631      	mov	r1, r6
 8011972:	ee18 0a10 	vmov	r0, s16
 8011976:	f7ff fa77 	bl	8010e68 <quorem>
 801197a:	4641      	mov	r1, r8
 801197c:	9002      	str	r0, [sp, #8]
 801197e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011982:	ee18 0a10 	vmov	r0, s16
 8011986:	f000 ff43 	bl	8012810 <__mcmp>
 801198a:	463a      	mov	r2, r7
 801198c:	9003      	str	r0, [sp, #12]
 801198e:	4631      	mov	r1, r6
 8011990:	4620      	mov	r0, r4
 8011992:	f000 ff59 	bl	8012848 <__mdiff>
 8011996:	68c2      	ldr	r2, [r0, #12]
 8011998:	f109 3bff 	add.w	fp, r9, #4294967295
 801199c:	4605      	mov	r5, r0
 801199e:	bb02      	cbnz	r2, 80119e2 <_dtoa_r+0xa62>
 80119a0:	4601      	mov	r1, r0
 80119a2:	ee18 0a10 	vmov	r0, s16
 80119a6:	f000 ff33 	bl	8012810 <__mcmp>
 80119aa:	4602      	mov	r2, r0
 80119ac:	4629      	mov	r1, r5
 80119ae:	4620      	mov	r0, r4
 80119b0:	9207      	str	r2, [sp, #28]
 80119b2:	f000 fca1 	bl	80122f8 <_Bfree>
 80119b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80119ba:	ea43 0102 	orr.w	r1, r3, r2
 80119be:	9b04      	ldr	r3, [sp, #16]
 80119c0:	430b      	orrs	r3, r1
 80119c2:	464d      	mov	r5, r9
 80119c4:	d10f      	bne.n	80119e6 <_dtoa_r+0xa66>
 80119c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80119ca:	d02a      	beq.n	8011a22 <_dtoa_r+0xaa2>
 80119cc:	9b03      	ldr	r3, [sp, #12]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	dd02      	ble.n	80119d8 <_dtoa_r+0xa58>
 80119d2:	9b02      	ldr	r3, [sp, #8]
 80119d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80119d8:	f88b a000 	strb.w	sl, [fp]
 80119dc:	e775      	b.n	80118ca <_dtoa_r+0x94a>
 80119de:	4638      	mov	r0, r7
 80119e0:	e7ba      	b.n	8011958 <_dtoa_r+0x9d8>
 80119e2:	2201      	movs	r2, #1
 80119e4:	e7e2      	b.n	80119ac <_dtoa_r+0xa2c>
 80119e6:	9b03      	ldr	r3, [sp, #12]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	db04      	blt.n	80119f6 <_dtoa_r+0xa76>
 80119ec:	9906      	ldr	r1, [sp, #24]
 80119ee:	430b      	orrs	r3, r1
 80119f0:	9904      	ldr	r1, [sp, #16]
 80119f2:	430b      	orrs	r3, r1
 80119f4:	d122      	bne.n	8011a3c <_dtoa_r+0xabc>
 80119f6:	2a00      	cmp	r2, #0
 80119f8:	ddee      	ble.n	80119d8 <_dtoa_r+0xa58>
 80119fa:	ee18 1a10 	vmov	r1, s16
 80119fe:	2201      	movs	r2, #1
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 fe95 	bl	8012730 <__lshift>
 8011a06:	4631      	mov	r1, r6
 8011a08:	ee08 0a10 	vmov	s16, r0
 8011a0c:	f000 ff00 	bl	8012810 <__mcmp>
 8011a10:	2800      	cmp	r0, #0
 8011a12:	dc03      	bgt.n	8011a1c <_dtoa_r+0xa9c>
 8011a14:	d1e0      	bne.n	80119d8 <_dtoa_r+0xa58>
 8011a16:	f01a 0f01 	tst.w	sl, #1
 8011a1a:	d0dd      	beq.n	80119d8 <_dtoa_r+0xa58>
 8011a1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a20:	d1d7      	bne.n	80119d2 <_dtoa_r+0xa52>
 8011a22:	2339      	movs	r3, #57	; 0x39
 8011a24:	f88b 3000 	strb.w	r3, [fp]
 8011a28:	462b      	mov	r3, r5
 8011a2a:	461d      	mov	r5, r3
 8011a2c:	3b01      	subs	r3, #1
 8011a2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011a32:	2a39      	cmp	r2, #57	; 0x39
 8011a34:	d071      	beq.n	8011b1a <_dtoa_r+0xb9a>
 8011a36:	3201      	adds	r2, #1
 8011a38:	701a      	strb	r2, [r3, #0]
 8011a3a:	e746      	b.n	80118ca <_dtoa_r+0x94a>
 8011a3c:	2a00      	cmp	r2, #0
 8011a3e:	dd07      	ble.n	8011a50 <_dtoa_r+0xad0>
 8011a40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a44:	d0ed      	beq.n	8011a22 <_dtoa_r+0xaa2>
 8011a46:	f10a 0301 	add.w	r3, sl, #1
 8011a4a:	f88b 3000 	strb.w	r3, [fp]
 8011a4e:	e73c      	b.n	80118ca <_dtoa_r+0x94a>
 8011a50:	9b05      	ldr	r3, [sp, #20]
 8011a52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011a56:	4599      	cmp	r9, r3
 8011a58:	d047      	beq.n	8011aea <_dtoa_r+0xb6a>
 8011a5a:	ee18 1a10 	vmov	r1, s16
 8011a5e:	2300      	movs	r3, #0
 8011a60:	220a      	movs	r2, #10
 8011a62:	4620      	mov	r0, r4
 8011a64:	f000 fc6a 	bl	801233c <__multadd>
 8011a68:	45b8      	cmp	r8, r7
 8011a6a:	ee08 0a10 	vmov	s16, r0
 8011a6e:	f04f 0300 	mov.w	r3, #0
 8011a72:	f04f 020a 	mov.w	r2, #10
 8011a76:	4641      	mov	r1, r8
 8011a78:	4620      	mov	r0, r4
 8011a7a:	d106      	bne.n	8011a8a <_dtoa_r+0xb0a>
 8011a7c:	f000 fc5e 	bl	801233c <__multadd>
 8011a80:	4680      	mov	r8, r0
 8011a82:	4607      	mov	r7, r0
 8011a84:	f109 0901 	add.w	r9, r9, #1
 8011a88:	e772      	b.n	8011970 <_dtoa_r+0x9f0>
 8011a8a:	f000 fc57 	bl	801233c <__multadd>
 8011a8e:	4639      	mov	r1, r7
 8011a90:	4680      	mov	r8, r0
 8011a92:	2300      	movs	r3, #0
 8011a94:	220a      	movs	r2, #10
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 fc50 	bl	801233c <__multadd>
 8011a9c:	4607      	mov	r7, r0
 8011a9e:	e7f1      	b.n	8011a84 <_dtoa_r+0xb04>
 8011aa0:	9b03      	ldr	r3, [sp, #12]
 8011aa2:	9302      	str	r3, [sp, #8]
 8011aa4:	9d01      	ldr	r5, [sp, #4]
 8011aa6:	ee18 0a10 	vmov	r0, s16
 8011aaa:	4631      	mov	r1, r6
 8011aac:	f7ff f9dc 	bl	8010e68 <quorem>
 8011ab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011ab4:	9b01      	ldr	r3, [sp, #4]
 8011ab6:	f805 ab01 	strb.w	sl, [r5], #1
 8011aba:	1aea      	subs	r2, r5, r3
 8011abc:	9b02      	ldr	r3, [sp, #8]
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	dd09      	ble.n	8011ad6 <_dtoa_r+0xb56>
 8011ac2:	ee18 1a10 	vmov	r1, s16
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	220a      	movs	r2, #10
 8011aca:	4620      	mov	r0, r4
 8011acc:	f000 fc36 	bl	801233c <__multadd>
 8011ad0:	ee08 0a10 	vmov	s16, r0
 8011ad4:	e7e7      	b.n	8011aa6 <_dtoa_r+0xb26>
 8011ad6:	9b02      	ldr	r3, [sp, #8]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	bfc8      	it	gt
 8011adc:	461d      	movgt	r5, r3
 8011ade:	9b01      	ldr	r3, [sp, #4]
 8011ae0:	bfd8      	it	le
 8011ae2:	2501      	movle	r5, #1
 8011ae4:	441d      	add	r5, r3
 8011ae6:	f04f 0800 	mov.w	r8, #0
 8011aea:	ee18 1a10 	vmov	r1, s16
 8011aee:	2201      	movs	r2, #1
 8011af0:	4620      	mov	r0, r4
 8011af2:	f000 fe1d 	bl	8012730 <__lshift>
 8011af6:	4631      	mov	r1, r6
 8011af8:	ee08 0a10 	vmov	s16, r0
 8011afc:	f000 fe88 	bl	8012810 <__mcmp>
 8011b00:	2800      	cmp	r0, #0
 8011b02:	dc91      	bgt.n	8011a28 <_dtoa_r+0xaa8>
 8011b04:	d102      	bne.n	8011b0c <_dtoa_r+0xb8c>
 8011b06:	f01a 0f01 	tst.w	sl, #1
 8011b0a:	d18d      	bne.n	8011a28 <_dtoa_r+0xaa8>
 8011b0c:	462b      	mov	r3, r5
 8011b0e:	461d      	mov	r5, r3
 8011b10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b14:	2a30      	cmp	r2, #48	; 0x30
 8011b16:	d0fa      	beq.n	8011b0e <_dtoa_r+0xb8e>
 8011b18:	e6d7      	b.n	80118ca <_dtoa_r+0x94a>
 8011b1a:	9a01      	ldr	r2, [sp, #4]
 8011b1c:	429a      	cmp	r2, r3
 8011b1e:	d184      	bne.n	8011a2a <_dtoa_r+0xaaa>
 8011b20:	9b00      	ldr	r3, [sp, #0]
 8011b22:	3301      	adds	r3, #1
 8011b24:	9300      	str	r3, [sp, #0]
 8011b26:	2331      	movs	r3, #49	; 0x31
 8011b28:	7013      	strb	r3, [r2, #0]
 8011b2a:	e6ce      	b.n	80118ca <_dtoa_r+0x94a>
 8011b2c:	4b09      	ldr	r3, [pc, #36]	; (8011b54 <_dtoa_r+0xbd4>)
 8011b2e:	f7ff ba95 	b.w	801105c <_dtoa_r+0xdc>
 8011b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	f47f aa6e 	bne.w	8011016 <_dtoa_r+0x96>
 8011b3a:	4b07      	ldr	r3, [pc, #28]	; (8011b58 <_dtoa_r+0xbd8>)
 8011b3c:	f7ff ba8e 	b.w	801105c <_dtoa_r+0xdc>
 8011b40:	9b02      	ldr	r3, [sp, #8]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	dcae      	bgt.n	8011aa4 <_dtoa_r+0xb24>
 8011b46:	9b06      	ldr	r3, [sp, #24]
 8011b48:	2b02      	cmp	r3, #2
 8011b4a:	f73f aea8 	bgt.w	801189e <_dtoa_r+0x91e>
 8011b4e:	e7a9      	b.n	8011aa4 <_dtoa_r+0xb24>
 8011b50:	08015ac8 	.word	0x08015ac8
 8011b54:	080158cc 	.word	0x080158cc
 8011b58:	08015a49 	.word	0x08015a49

08011b5c <rshift>:
 8011b5c:	6903      	ldr	r3, [r0, #16]
 8011b5e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011b66:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011b6a:	f100 0414 	add.w	r4, r0, #20
 8011b6e:	dd45      	ble.n	8011bfc <rshift+0xa0>
 8011b70:	f011 011f 	ands.w	r1, r1, #31
 8011b74:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011b78:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011b7c:	d10c      	bne.n	8011b98 <rshift+0x3c>
 8011b7e:	f100 0710 	add.w	r7, r0, #16
 8011b82:	4629      	mov	r1, r5
 8011b84:	42b1      	cmp	r1, r6
 8011b86:	d334      	bcc.n	8011bf2 <rshift+0x96>
 8011b88:	1a9b      	subs	r3, r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	1eea      	subs	r2, r5, #3
 8011b8e:	4296      	cmp	r6, r2
 8011b90:	bf38      	it	cc
 8011b92:	2300      	movcc	r3, #0
 8011b94:	4423      	add	r3, r4
 8011b96:	e015      	b.n	8011bc4 <rshift+0x68>
 8011b98:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011b9c:	f1c1 0820 	rsb	r8, r1, #32
 8011ba0:	40cf      	lsrs	r7, r1
 8011ba2:	f105 0e04 	add.w	lr, r5, #4
 8011ba6:	46a1      	mov	r9, r4
 8011ba8:	4576      	cmp	r6, lr
 8011baa:	46f4      	mov	ip, lr
 8011bac:	d815      	bhi.n	8011bda <rshift+0x7e>
 8011bae:	1a9a      	subs	r2, r3, r2
 8011bb0:	0092      	lsls	r2, r2, #2
 8011bb2:	3a04      	subs	r2, #4
 8011bb4:	3501      	adds	r5, #1
 8011bb6:	42ae      	cmp	r6, r5
 8011bb8:	bf38      	it	cc
 8011bba:	2200      	movcc	r2, #0
 8011bbc:	18a3      	adds	r3, r4, r2
 8011bbe:	50a7      	str	r7, [r4, r2]
 8011bc0:	b107      	cbz	r7, 8011bc4 <rshift+0x68>
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	1b1a      	subs	r2, r3, r4
 8011bc6:	42a3      	cmp	r3, r4
 8011bc8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011bcc:	bf08      	it	eq
 8011bce:	2300      	moveq	r3, #0
 8011bd0:	6102      	str	r2, [r0, #16]
 8011bd2:	bf08      	it	eq
 8011bd4:	6143      	streq	r3, [r0, #20]
 8011bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011bda:	f8dc c000 	ldr.w	ip, [ip]
 8011bde:	fa0c fc08 	lsl.w	ip, ip, r8
 8011be2:	ea4c 0707 	orr.w	r7, ip, r7
 8011be6:	f849 7b04 	str.w	r7, [r9], #4
 8011bea:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011bee:	40cf      	lsrs	r7, r1
 8011bf0:	e7da      	b.n	8011ba8 <rshift+0x4c>
 8011bf2:	f851 cb04 	ldr.w	ip, [r1], #4
 8011bf6:	f847 cf04 	str.w	ip, [r7, #4]!
 8011bfa:	e7c3      	b.n	8011b84 <rshift+0x28>
 8011bfc:	4623      	mov	r3, r4
 8011bfe:	e7e1      	b.n	8011bc4 <rshift+0x68>

08011c00 <__hexdig_fun>:
 8011c00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c04:	2b09      	cmp	r3, #9
 8011c06:	d802      	bhi.n	8011c0e <__hexdig_fun+0xe>
 8011c08:	3820      	subs	r0, #32
 8011c0a:	b2c0      	uxtb	r0, r0
 8011c0c:	4770      	bx	lr
 8011c0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011c12:	2b05      	cmp	r3, #5
 8011c14:	d801      	bhi.n	8011c1a <__hexdig_fun+0x1a>
 8011c16:	3847      	subs	r0, #71	; 0x47
 8011c18:	e7f7      	b.n	8011c0a <__hexdig_fun+0xa>
 8011c1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011c1e:	2b05      	cmp	r3, #5
 8011c20:	d801      	bhi.n	8011c26 <__hexdig_fun+0x26>
 8011c22:	3827      	subs	r0, #39	; 0x27
 8011c24:	e7f1      	b.n	8011c0a <__hexdig_fun+0xa>
 8011c26:	2000      	movs	r0, #0
 8011c28:	4770      	bx	lr
	...

08011c2c <__gethex>:
 8011c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c30:	ed2d 8b02 	vpush	{d8}
 8011c34:	b089      	sub	sp, #36	; 0x24
 8011c36:	ee08 0a10 	vmov	s16, r0
 8011c3a:	9304      	str	r3, [sp, #16]
 8011c3c:	4bb4      	ldr	r3, [pc, #720]	; (8011f10 <__gethex+0x2e4>)
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	9301      	str	r3, [sp, #4]
 8011c42:	4618      	mov	r0, r3
 8011c44:	468b      	mov	fp, r1
 8011c46:	4690      	mov	r8, r2
 8011c48:	f7ee fad2 	bl	80001f0 <strlen>
 8011c4c:	9b01      	ldr	r3, [sp, #4]
 8011c4e:	f8db 2000 	ldr.w	r2, [fp]
 8011c52:	4403      	add	r3, r0
 8011c54:	4682      	mov	sl, r0
 8011c56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011c5a:	9305      	str	r3, [sp, #20]
 8011c5c:	1c93      	adds	r3, r2, #2
 8011c5e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011c62:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011c66:	32fe      	adds	r2, #254	; 0xfe
 8011c68:	18d1      	adds	r1, r2, r3
 8011c6a:	461f      	mov	r7, r3
 8011c6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011c70:	9100      	str	r1, [sp, #0]
 8011c72:	2830      	cmp	r0, #48	; 0x30
 8011c74:	d0f8      	beq.n	8011c68 <__gethex+0x3c>
 8011c76:	f7ff ffc3 	bl	8011c00 <__hexdig_fun>
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d13a      	bne.n	8011cf6 <__gethex+0xca>
 8011c80:	9901      	ldr	r1, [sp, #4]
 8011c82:	4652      	mov	r2, sl
 8011c84:	4638      	mov	r0, r7
 8011c86:	f001 fa23 	bl	80130d0 <strncmp>
 8011c8a:	4605      	mov	r5, r0
 8011c8c:	2800      	cmp	r0, #0
 8011c8e:	d168      	bne.n	8011d62 <__gethex+0x136>
 8011c90:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011c94:	eb07 060a 	add.w	r6, r7, sl
 8011c98:	f7ff ffb2 	bl	8011c00 <__hexdig_fun>
 8011c9c:	2800      	cmp	r0, #0
 8011c9e:	d062      	beq.n	8011d66 <__gethex+0x13a>
 8011ca0:	4633      	mov	r3, r6
 8011ca2:	7818      	ldrb	r0, [r3, #0]
 8011ca4:	2830      	cmp	r0, #48	; 0x30
 8011ca6:	461f      	mov	r7, r3
 8011ca8:	f103 0301 	add.w	r3, r3, #1
 8011cac:	d0f9      	beq.n	8011ca2 <__gethex+0x76>
 8011cae:	f7ff ffa7 	bl	8011c00 <__hexdig_fun>
 8011cb2:	2301      	movs	r3, #1
 8011cb4:	fab0 f480 	clz	r4, r0
 8011cb8:	0964      	lsrs	r4, r4, #5
 8011cba:	4635      	mov	r5, r6
 8011cbc:	9300      	str	r3, [sp, #0]
 8011cbe:	463a      	mov	r2, r7
 8011cc0:	4616      	mov	r6, r2
 8011cc2:	3201      	adds	r2, #1
 8011cc4:	7830      	ldrb	r0, [r6, #0]
 8011cc6:	f7ff ff9b 	bl	8011c00 <__hexdig_fun>
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d1f8      	bne.n	8011cc0 <__gethex+0x94>
 8011cce:	9901      	ldr	r1, [sp, #4]
 8011cd0:	4652      	mov	r2, sl
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	f001 f9fc 	bl	80130d0 <strncmp>
 8011cd8:	b980      	cbnz	r0, 8011cfc <__gethex+0xd0>
 8011cda:	b94d      	cbnz	r5, 8011cf0 <__gethex+0xc4>
 8011cdc:	eb06 050a 	add.w	r5, r6, sl
 8011ce0:	462a      	mov	r2, r5
 8011ce2:	4616      	mov	r6, r2
 8011ce4:	3201      	adds	r2, #1
 8011ce6:	7830      	ldrb	r0, [r6, #0]
 8011ce8:	f7ff ff8a 	bl	8011c00 <__hexdig_fun>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d1f8      	bne.n	8011ce2 <__gethex+0xb6>
 8011cf0:	1bad      	subs	r5, r5, r6
 8011cf2:	00ad      	lsls	r5, r5, #2
 8011cf4:	e004      	b.n	8011d00 <__gethex+0xd4>
 8011cf6:	2400      	movs	r4, #0
 8011cf8:	4625      	mov	r5, r4
 8011cfa:	e7e0      	b.n	8011cbe <__gethex+0x92>
 8011cfc:	2d00      	cmp	r5, #0
 8011cfe:	d1f7      	bne.n	8011cf0 <__gethex+0xc4>
 8011d00:	7833      	ldrb	r3, [r6, #0]
 8011d02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d06:	2b50      	cmp	r3, #80	; 0x50
 8011d08:	d13b      	bne.n	8011d82 <__gethex+0x156>
 8011d0a:	7873      	ldrb	r3, [r6, #1]
 8011d0c:	2b2b      	cmp	r3, #43	; 0x2b
 8011d0e:	d02c      	beq.n	8011d6a <__gethex+0x13e>
 8011d10:	2b2d      	cmp	r3, #45	; 0x2d
 8011d12:	d02e      	beq.n	8011d72 <__gethex+0x146>
 8011d14:	1c71      	adds	r1, r6, #1
 8011d16:	f04f 0900 	mov.w	r9, #0
 8011d1a:	7808      	ldrb	r0, [r1, #0]
 8011d1c:	f7ff ff70 	bl	8011c00 <__hexdig_fun>
 8011d20:	1e43      	subs	r3, r0, #1
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	2b18      	cmp	r3, #24
 8011d26:	d82c      	bhi.n	8011d82 <__gethex+0x156>
 8011d28:	f1a0 0210 	sub.w	r2, r0, #16
 8011d2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011d30:	f7ff ff66 	bl	8011c00 <__hexdig_fun>
 8011d34:	1e43      	subs	r3, r0, #1
 8011d36:	b2db      	uxtb	r3, r3
 8011d38:	2b18      	cmp	r3, #24
 8011d3a:	d91d      	bls.n	8011d78 <__gethex+0x14c>
 8011d3c:	f1b9 0f00 	cmp.w	r9, #0
 8011d40:	d000      	beq.n	8011d44 <__gethex+0x118>
 8011d42:	4252      	negs	r2, r2
 8011d44:	4415      	add	r5, r2
 8011d46:	f8cb 1000 	str.w	r1, [fp]
 8011d4a:	b1e4      	cbz	r4, 8011d86 <__gethex+0x15a>
 8011d4c:	9b00      	ldr	r3, [sp, #0]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	bf14      	ite	ne
 8011d52:	2700      	movne	r7, #0
 8011d54:	2706      	moveq	r7, #6
 8011d56:	4638      	mov	r0, r7
 8011d58:	b009      	add	sp, #36	; 0x24
 8011d5a:	ecbd 8b02 	vpop	{d8}
 8011d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d62:	463e      	mov	r6, r7
 8011d64:	4625      	mov	r5, r4
 8011d66:	2401      	movs	r4, #1
 8011d68:	e7ca      	b.n	8011d00 <__gethex+0xd4>
 8011d6a:	f04f 0900 	mov.w	r9, #0
 8011d6e:	1cb1      	adds	r1, r6, #2
 8011d70:	e7d3      	b.n	8011d1a <__gethex+0xee>
 8011d72:	f04f 0901 	mov.w	r9, #1
 8011d76:	e7fa      	b.n	8011d6e <__gethex+0x142>
 8011d78:	230a      	movs	r3, #10
 8011d7a:	fb03 0202 	mla	r2, r3, r2, r0
 8011d7e:	3a10      	subs	r2, #16
 8011d80:	e7d4      	b.n	8011d2c <__gethex+0x100>
 8011d82:	4631      	mov	r1, r6
 8011d84:	e7df      	b.n	8011d46 <__gethex+0x11a>
 8011d86:	1bf3      	subs	r3, r6, r7
 8011d88:	3b01      	subs	r3, #1
 8011d8a:	4621      	mov	r1, r4
 8011d8c:	2b07      	cmp	r3, #7
 8011d8e:	dc0b      	bgt.n	8011da8 <__gethex+0x17c>
 8011d90:	ee18 0a10 	vmov	r0, s16
 8011d94:	f000 fa70 	bl	8012278 <_Balloc>
 8011d98:	4604      	mov	r4, r0
 8011d9a:	b940      	cbnz	r0, 8011dae <__gethex+0x182>
 8011d9c:	4b5d      	ldr	r3, [pc, #372]	; (8011f14 <__gethex+0x2e8>)
 8011d9e:	4602      	mov	r2, r0
 8011da0:	21de      	movs	r1, #222	; 0xde
 8011da2:	485d      	ldr	r0, [pc, #372]	; (8011f18 <__gethex+0x2ec>)
 8011da4:	f001 f9b6 	bl	8013114 <__assert_func>
 8011da8:	3101      	adds	r1, #1
 8011daa:	105b      	asrs	r3, r3, #1
 8011dac:	e7ee      	b.n	8011d8c <__gethex+0x160>
 8011dae:	f100 0914 	add.w	r9, r0, #20
 8011db2:	f04f 0b00 	mov.w	fp, #0
 8011db6:	f1ca 0301 	rsb	r3, sl, #1
 8011dba:	f8cd 9008 	str.w	r9, [sp, #8]
 8011dbe:	f8cd b000 	str.w	fp, [sp]
 8011dc2:	9306      	str	r3, [sp, #24]
 8011dc4:	42b7      	cmp	r7, r6
 8011dc6:	d340      	bcc.n	8011e4a <__gethex+0x21e>
 8011dc8:	9802      	ldr	r0, [sp, #8]
 8011dca:	9b00      	ldr	r3, [sp, #0]
 8011dcc:	f840 3b04 	str.w	r3, [r0], #4
 8011dd0:	eba0 0009 	sub.w	r0, r0, r9
 8011dd4:	1080      	asrs	r0, r0, #2
 8011dd6:	0146      	lsls	r6, r0, #5
 8011dd8:	6120      	str	r0, [r4, #16]
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f000 fb3e 	bl	801245c <__hi0bits>
 8011de0:	1a30      	subs	r0, r6, r0
 8011de2:	f8d8 6000 	ldr.w	r6, [r8]
 8011de6:	42b0      	cmp	r0, r6
 8011de8:	dd63      	ble.n	8011eb2 <__gethex+0x286>
 8011dea:	1b87      	subs	r7, r0, r6
 8011dec:	4639      	mov	r1, r7
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 fee2 	bl	8012bb8 <__any_on>
 8011df4:	4682      	mov	sl, r0
 8011df6:	b1a8      	cbz	r0, 8011e24 <__gethex+0x1f8>
 8011df8:	1e7b      	subs	r3, r7, #1
 8011dfa:	1159      	asrs	r1, r3, #5
 8011dfc:	f003 021f 	and.w	r2, r3, #31
 8011e00:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e04:	f04f 0a01 	mov.w	sl, #1
 8011e08:	fa0a f202 	lsl.w	r2, sl, r2
 8011e0c:	420a      	tst	r2, r1
 8011e0e:	d009      	beq.n	8011e24 <__gethex+0x1f8>
 8011e10:	4553      	cmp	r3, sl
 8011e12:	dd05      	ble.n	8011e20 <__gethex+0x1f4>
 8011e14:	1eb9      	subs	r1, r7, #2
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 fece 	bl	8012bb8 <__any_on>
 8011e1c:	2800      	cmp	r0, #0
 8011e1e:	d145      	bne.n	8011eac <__gethex+0x280>
 8011e20:	f04f 0a02 	mov.w	sl, #2
 8011e24:	4639      	mov	r1, r7
 8011e26:	4620      	mov	r0, r4
 8011e28:	f7ff fe98 	bl	8011b5c <rshift>
 8011e2c:	443d      	add	r5, r7
 8011e2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011e32:	42ab      	cmp	r3, r5
 8011e34:	da4c      	bge.n	8011ed0 <__gethex+0x2a4>
 8011e36:	ee18 0a10 	vmov	r0, s16
 8011e3a:	4621      	mov	r1, r4
 8011e3c:	f000 fa5c 	bl	80122f8 <_Bfree>
 8011e40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011e42:	2300      	movs	r3, #0
 8011e44:	6013      	str	r3, [r2, #0]
 8011e46:	27a3      	movs	r7, #163	; 0xa3
 8011e48:	e785      	b.n	8011d56 <__gethex+0x12a>
 8011e4a:	1e73      	subs	r3, r6, #1
 8011e4c:	9a05      	ldr	r2, [sp, #20]
 8011e4e:	9303      	str	r3, [sp, #12]
 8011e50:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d019      	beq.n	8011e8c <__gethex+0x260>
 8011e58:	f1bb 0f20 	cmp.w	fp, #32
 8011e5c:	d107      	bne.n	8011e6e <__gethex+0x242>
 8011e5e:	9b02      	ldr	r3, [sp, #8]
 8011e60:	9a00      	ldr	r2, [sp, #0]
 8011e62:	f843 2b04 	str.w	r2, [r3], #4
 8011e66:	9302      	str	r3, [sp, #8]
 8011e68:	2300      	movs	r3, #0
 8011e6a:	9300      	str	r3, [sp, #0]
 8011e6c:	469b      	mov	fp, r3
 8011e6e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011e72:	f7ff fec5 	bl	8011c00 <__hexdig_fun>
 8011e76:	9b00      	ldr	r3, [sp, #0]
 8011e78:	f000 000f 	and.w	r0, r0, #15
 8011e7c:	fa00 f00b 	lsl.w	r0, r0, fp
 8011e80:	4303      	orrs	r3, r0
 8011e82:	9300      	str	r3, [sp, #0]
 8011e84:	f10b 0b04 	add.w	fp, fp, #4
 8011e88:	9b03      	ldr	r3, [sp, #12]
 8011e8a:	e00d      	b.n	8011ea8 <__gethex+0x27c>
 8011e8c:	9b03      	ldr	r3, [sp, #12]
 8011e8e:	9a06      	ldr	r2, [sp, #24]
 8011e90:	4413      	add	r3, r2
 8011e92:	42bb      	cmp	r3, r7
 8011e94:	d3e0      	bcc.n	8011e58 <__gethex+0x22c>
 8011e96:	4618      	mov	r0, r3
 8011e98:	9901      	ldr	r1, [sp, #4]
 8011e9a:	9307      	str	r3, [sp, #28]
 8011e9c:	4652      	mov	r2, sl
 8011e9e:	f001 f917 	bl	80130d0 <strncmp>
 8011ea2:	9b07      	ldr	r3, [sp, #28]
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d1d7      	bne.n	8011e58 <__gethex+0x22c>
 8011ea8:	461e      	mov	r6, r3
 8011eaa:	e78b      	b.n	8011dc4 <__gethex+0x198>
 8011eac:	f04f 0a03 	mov.w	sl, #3
 8011eb0:	e7b8      	b.n	8011e24 <__gethex+0x1f8>
 8011eb2:	da0a      	bge.n	8011eca <__gethex+0x29e>
 8011eb4:	1a37      	subs	r7, r6, r0
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	ee18 0a10 	vmov	r0, s16
 8011ebc:	463a      	mov	r2, r7
 8011ebe:	f000 fc37 	bl	8012730 <__lshift>
 8011ec2:	1bed      	subs	r5, r5, r7
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	f100 0914 	add.w	r9, r0, #20
 8011eca:	f04f 0a00 	mov.w	sl, #0
 8011ece:	e7ae      	b.n	8011e2e <__gethex+0x202>
 8011ed0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011ed4:	42a8      	cmp	r0, r5
 8011ed6:	dd72      	ble.n	8011fbe <__gethex+0x392>
 8011ed8:	1b45      	subs	r5, r0, r5
 8011eda:	42ae      	cmp	r6, r5
 8011edc:	dc36      	bgt.n	8011f4c <__gethex+0x320>
 8011ede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011ee2:	2b02      	cmp	r3, #2
 8011ee4:	d02a      	beq.n	8011f3c <__gethex+0x310>
 8011ee6:	2b03      	cmp	r3, #3
 8011ee8:	d02c      	beq.n	8011f44 <__gethex+0x318>
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d11c      	bne.n	8011f28 <__gethex+0x2fc>
 8011eee:	42ae      	cmp	r6, r5
 8011ef0:	d11a      	bne.n	8011f28 <__gethex+0x2fc>
 8011ef2:	2e01      	cmp	r6, #1
 8011ef4:	d112      	bne.n	8011f1c <__gethex+0x2f0>
 8011ef6:	9a04      	ldr	r2, [sp, #16]
 8011ef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011efc:	6013      	str	r3, [r2, #0]
 8011efe:	2301      	movs	r3, #1
 8011f00:	6123      	str	r3, [r4, #16]
 8011f02:	f8c9 3000 	str.w	r3, [r9]
 8011f06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f08:	2762      	movs	r7, #98	; 0x62
 8011f0a:	601c      	str	r4, [r3, #0]
 8011f0c:	e723      	b.n	8011d56 <__gethex+0x12a>
 8011f0e:	bf00      	nop
 8011f10:	08015b40 	.word	0x08015b40
 8011f14:	08015ac8 	.word	0x08015ac8
 8011f18:	08015ad9 	.word	0x08015ad9
 8011f1c:	1e71      	subs	r1, r6, #1
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f000 fe4a 	bl	8012bb8 <__any_on>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d1e6      	bne.n	8011ef6 <__gethex+0x2ca>
 8011f28:	ee18 0a10 	vmov	r0, s16
 8011f2c:	4621      	mov	r1, r4
 8011f2e:	f000 f9e3 	bl	80122f8 <_Bfree>
 8011f32:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011f34:	2300      	movs	r3, #0
 8011f36:	6013      	str	r3, [r2, #0]
 8011f38:	2750      	movs	r7, #80	; 0x50
 8011f3a:	e70c      	b.n	8011d56 <__gethex+0x12a>
 8011f3c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d1f2      	bne.n	8011f28 <__gethex+0x2fc>
 8011f42:	e7d8      	b.n	8011ef6 <__gethex+0x2ca>
 8011f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d1d5      	bne.n	8011ef6 <__gethex+0x2ca>
 8011f4a:	e7ed      	b.n	8011f28 <__gethex+0x2fc>
 8011f4c:	1e6f      	subs	r7, r5, #1
 8011f4e:	f1ba 0f00 	cmp.w	sl, #0
 8011f52:	d131      	bne.n	8011fb8 <__gethex+0x38c>
 8011f54:	b127      	cbz	r7, 8011f60 <__gethex+0x334>
 8011f56:	4639      	mov	r1, r7
 8011f58:	4620      	mov	r0, r4
 8011f5a:	f000 fe2d 	bl	8012bb8 <__any_on>
 8011f5e:	4682      	mov	sl, r0
 8011f60:	117b      	asrs	r3, r7, #5
 8011f62:	2101      	movs	r1, #1
 8011f64:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011f68:	f007 071f 	and.w	r7, r7, #31
 8011f6c:	fa01 f707 	lsl.w	r7, r1, r7
 8011f70:	421f      	tst	r7, r3
 8011f72:	4629      	mov	r1, r5
 8011f74:	4620      	mov	r0, r4
 8011f76:	bf18      	it	ne
 8011f78:	f04a 0a02 	orrne.w	sl, sl, #2
 8011f7c:	1b76      	subs	r6, r6, r5
 8011f7e:	f7ff fded 	bl	8011b5c <rshift>
 8011f82:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011f86:	2702      	movs	r7, #2
 8011f88:	f1ba 0f00 	cmp.w	sl, #0
 8011f8c:	d048      	beq.n	8012020 <__gethex+0x3f4>
 8011f8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f92:	2b02      	cmp	r3, #2
 8011f94:	d015      	beq.n	8011fc2 <__gethex+0x396>
 8011f96:	2b03      	cmp	r3, #3
 8011f98:	d017      	beq.n	8011fca <__gethex+0x39e>
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d109      	bne.n	8011fb2 <__gethex+0x386>
 8011f9e:	f01a 0f02 	tst.w	sl, #2
 8011fa2:	d006      	beq.n	8011fb2 <__gethex+0x386>
 8011fa4:	f8d9 0000 	ldr.w	r0, [r9]
 8011fa8:	ea4a 0a00 	orr.w	sl, sl, r0
 8011fac:	f01a 0f01 	tst.w	sl, #1
 8011fb0:	d10e      	bne.n	8011fd0 <__gethex+0x3a4>
 8011fb2:	f047 0710 	orr.w	r7, r7, #16
 8011fb6:	e033      	b.n	8012020 <__gethex+0x3f4>
 8011fb8:	f04f 0a01 	mov.w	sl, #1
 8011fbc:	e7d0      	b.n	8011f60 <__gethex+0x334>
 8011fbe:	2701      	movs	r7, #1
 8011fc0:	e7e2      	b.n	8011f88 <__gethex+0x35c>
 8011fc2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fc4:	f1c3 0301 	rsb	r3, r3, #1
 8011fc8:	9315      	str	r3, [sp, #84]	; 0x54
 8011fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d0f0      	beq.n	8011fb2 <__gethex+0x386>
 8011fd0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011fd4:	f104 0314 	add.w	r3, r4, #20
 8011fd8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011fdc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011fe0:	f04f 0c00 	mov.w	ip, #0
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f853 2b04 	ldr.w	r2, [r3], #4
 8011fea:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011fee:	d01c      	beq.n	801202a <__gethex+0x3fe>
 8011ff0:	3201      	adds	r2, #1
 8011ff2:	6002      	str	r2, [r0, #0]
 8011ff4:	2f02      	cmp	r7, #2
 8011ff6:	f104 0314 	add.w	r3, r4, #20
 8011ffa:	d13f      	bne.n	801207c <__gethex+0x450>
 8011ffc:	f8d8 2000 	ldr.w	r2, [r8]
 8012000:	3a01      	subs	r2, #1
 8012002:	42b2      	cmp	r2, r6
 8012004:	d10a      	bne.n	801201c <__gethex+0x3f0>
 8012006:	1171      	asrs	r1, r6, #5
 8012008:	2201      	movs	r2, #1
 801200a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801200e:	f006 061f 	and.w	r6, r6, #31
 8012012:	fa02 f606 	lsl.w	r6, r2, r6
 8012016:	421e      	tst	r6, r3
 8012018:	bf18      	it	ne
 801201a:	4617      	movne	r7, r2
 801201c:	f047 0720 	orr.w	r7, r7, #32
 8012020:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012022:	601c      	str	r4, [r3, #0]
 8012024:	9b04      	ldr	r3, [sp, #16]
 8012026:	601d      	str	r5, [r3, #0]
 8012028:	e695      	b.n	8011d56 <__gethex+0x12a>
 801202a:	4299      	cmp	r1, r3
 801202c:	f843 cc04 	str.w	ip, [r3, #-4]
 8012030:	d8d8      	bhi.n	8011fe4 <__gethex+0x3b8>
 8012032:	68a3      	ldr	r3, [r4, #8]
 8012034:	459b      	cmp	fp, r3
 8012036:	db19      	blt.n	801206c <__gethex+0x440>
 8012038:	6861      	ldr	r1, [r4, #4]
 801203a:	ee18 0a10 	vmov	r0, s16
 801203e:	3101      	adds	r1, #1
 8012040:	f000 f91a 	bl	8012278 <_Balloc>
 8012044:	4681      	mov	r9, r0
 8012046:	b918      	cbnz	r0, 8012050 <__gethex+0x424>
 8012048:	4b1a      	ldr	r3, [pc, #104]	; (80120b4 <__gethex+0x488>)
 801204a:	4602      	mov	r2, r0
 801204c:	2184      	movs	r1, #132	; 0x84
 801204e:	e6a8      	b.n	8011da2 <__gethex+0x176>
 8012050:	6922      	ldr	r2, [r4, #16]
 8012052:	3202      	adds	r2, #2
 8012054:	f104 010c 	add.w	r1, r4, #12
 8012058:	0092      	lsls	r2, r2, #2
 801205a:	300c      	adds	r0, #12
 801205c:	f7fd f9a2 	bl	800f3a4 <memcpy>
 8012060:	4621      	mov	r1, r4
 8012062:	ee18 0a10 	vmov	r0, s16
 8012066:	f000 f947 	bl	80122f8 <_Bfree>
 801206a:	464c      	mov	r4, r9
 801206c:	6923      	ldr	r3, [r4, #16]
 801206e:	1c5a      	adds	r2, r3, #1
 8012070:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012074:	6122      	str	r2, [r4, #16]
 8012076:	2201      	movs	r2, #1
 8012078:	615a      	str	r2, [r3, #20]
 801207a:	e7bb      	b.n	8011ff4 <__gethex+0x3c8>
 801207c:	6922      	ldr	r2, [r4, #16]
 801207e:	455a      	cmp	r2, fp
 8012080:	dd0b      	ble.n	801209a <__gethex+0x46e>
 8012082:	2101      	movs	r1, #1
 8012084:	4620      	mov	r0, r4
 8012086:	f7ff fd69 	bl	8011b5c <rshift>
 801208a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801208e:	3501      	adds	r5, #1
 8012090:	42ab      	cmp	r3, r5
 8012092:	f6ff aed0 	blt.w	8011e36 <__gethex+0x20a>
 8012096:	2701      	movs	r7, #1
 8012098:	e7c0      	b.n	801201c <__gethex+0x3f0>
 801209a:	f016 061f 	ands.w	r6, r6, #31
 801209e:	d0fa      	beq.n	8012096 <__gethex+0x46a>
 80120a0:	4453      	add	r3, sl
 80120a2:	f1c6 0620 	rsb	r6, r6, #32
 80120a6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80120aa:	f000 f9d7 	bl	801245c <__hi0bits>
 80120ae:	42b0      	cmp	r0, r6
 80120b0:	dbe7      	blt.n	8012082 <__gethex+0x456>
 80120b2:	e7f0      	b.n	8012096 <__gethex+0x46a>
 80120b4:	08015ac8 	.word	0x08015ac8

080120b8 <L_shift>:
 80120b8:	f1c2 0208 	rsb	r2, r2, #8
 80120bc:	0092      	lsls	r2, r2, #2
 80120be:	b570      	push	{r4, r5, r6, lr}
 80120c0:	f1c2 0620 	rsb	r6, r2, #32
 80120c4:	6843      	ldr	r3, [r0, #4]
 80120c6:	6804      	ldr	r4, [r0, #0]
 80120c8:	fa03 f506 	lsl.w	r5, r3, r6
 80120cc:	432c      	orrs	r4, r5
 80120ce:	40d3      	lsrs	r3, r2
 80120d0:	6004      	str	r4, [r0, #0]
 80120d2:	f840 3f04 	str.w	r3, [r0, #4]!
 80120d6:	4288      	cmp	r0, r1
 80120d8:	d3f4      	bcc.n	80120c4 <L_shift+0xc>
 80120da:	bd70      	pop	{r4, r5, r6, pc}

080120dc <__match>:
 80120dc:	b530      	push	{r4, r5, lr}
 80120de:	6803      	ldr	r3, [r0, #0]
 80120e0:	3301      	adds	r3, #1
 80120e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120e6:	b914      	cbnz	r4, 80120ee <__match+0x12>
 80120e8:	6003      	str	r3, [r0, #0]
 80120ea:	2001      	movs	r0, #1
 80120ec:	bd30      	pop	{r4, r5, pc}
 80120ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120f2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80120f6:	2d19      	cmp	r5, #25
 80120f8:	bf98      	it	ls
 80120fa:	3220      	addls	r2, #32
 80120fc:	42a2      	cmp	r2, r4
 80120fe:	d0f0      	beq.n	80120e2 <__match+0x6>
 8012100:	2000      	movs	r0, #0
 8012102:	e7f3      	b.n	80120ec <__match+0x10>

08012104 <__hexnan>:
 8012104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012108:	680b      	ldr	r3, [r1, #0]
 801210a:	115e      	asrs	r6, r3, #5
 801210c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012110:	f013 031f 	ands.w	r3, r3, #31
 8012114:	b087      	sub	sp, #28
 8012116:	bf18      	it	ne
 8012118:	3604      	addne	r6, #4
 801211a:	2500      	movs	r5, #0
 801211c:	1f37      	subs	r7, r6, #4
 801211e:	4690      	mov	r8, r2
 8012120:	6802      	ldr	r2, [r0, #0]
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	4682      	mov	sl, r0
 8012126:	f846 5c04 	str.w	r5, [r6, #-4]
 801212a:	46b9      	mov	r9, r7
 801212c:	463c      	mov	r4, r7
 801212e:	9502      	str	r5, [sp, #8]
 8012130:	46ab      	mov	fp, r5
 8012132:	7851      	ldrb	r1, [r2, #1]
 8012134:	1c53      	adds	r3, r2, #1
 8012136:	9303      	str	r3, [sp, #12]
 8012138:	b341      	cbz	r1, 801218c <__hexnan+0x88>
 801213a:	4608      	mov	r0, r1
 801213c:	9205      	str	r2, [sp, #20]
 801213e:	9104      	str	r1, [sp, #16]
 8012140:	f7ff fd5e 	bl	8011c00 <__hexdig_fun>
 8012144:	2800      	cmp	r0, #0
 8012146:	d14f      	bne.n	80121e8 <__hexnan+0xe4>
 8012148:	9904      	ldr	r1, [sp, #16]
 801214a:	9a05      	ldr	r2, [sp, #20]
 801214c:	2920      	cmp	r1, #32
 801214e:	d818      	bhi.n	8012182 <__hexnan+0x7e>
 8012150:	9b02      	ldr	r3, [sp, #8]
 8012152:	459b      	cmp	fp, r3
 8012154:	dd13      	ble.n	801217e <__hexnan+0x7a>
 8012156:	454c      	cmp	r4, r9
 8012158:	d206      	bcs.n	8012168 <__hexnan+0x64>
 801215a:	2d07      	cmp	r5, #7
 801215c:	dc04      	bgt.n	8012168 <__hexnan+0x64>
 801215e:	462a      	mov	r2, r5
 8012160:	4649      	mov	r1, r9
 8012162:	4620      	mov	r0, r4
 8012164:	f7ff ffa8 	bl	80120b8 <L_shift>
 8012168:	4544      	cmp	r4, r8
 801216a:	d950      	bls.n	801220e <__hexnan+0x10a>
 801216c:	2300      	movs	r3, #0
 801216e:	f1a4 0904 	sub.w	r9, r4, #4
 8012172:	f844 3c04 	str.w	r3, [r4, #-4]
 8012176:	f8cd b008 	str.w	fp, [sp, #8]
 801217a:	464c      	mov	r4, r9
 801217c:	461d      	mov	r5, r3
 801217e:	9a03      	ldr	r2, [sp, #12]
 8012180:	e7d7      	b.n	8012132 <__hexnan+0x2e>
 8012182:	2929      	cmp	r1, #41	; 0x29
 8012184:	d156      	bne.n	8012234 <__hexnan+0x130>
 8012186:	3202      	adds	r2, #2
 8012188:	f8ca 2000 	str.w	r2, [sl]
 801218c:	f1bb 0f00 	cmp.w	fp, #0
 8012190:	d050      	beq.n	8012234 <__hexnan+0x130>
 8012192:	454c      	cmp	r4, r9
 8012194:	d206      	bcs.n	80121a4 <__hexnan+0xa0>
 8012196:	2d07      	cmp	r5, #7
 8012198:	dc04      	bgt.n	80121a4 <__hexnan+0xa0>
 801219a:	462a      	mov	r2, r5
 801219c:	4649      	mov	r1, r9
 801219e:	4620      	mov	r0, r4
 80121a0:	f7ff ff8a 	bl	80120b8 <L_shift>
 80121a4:	4544      	cmp	r4, r8
 80121a6:	d934      	bls.n	8012212 <__hexnan+0x10e>
 80121a8:	f1a8 0204 	sub.w	r2, r8, #4
 80121ac:	4623      	mov	r3, r4
 80121ae:	f853 1b04 	ldr.w	r1, [r3], #4
 80121b2:	f842 1f04 	str.w	r1, [r2, #4]!
 80121b6:	429f      	cmp	r7, r3
 80121b8:	d2f9      	bcs.n	80121ae <__hexnan+0xaa>
 80121ba:	1b3b      	subs	r3, r7, r4
 80121bc:	f023 0303 	bic.w	r3, r3, #3
 80121c0:	3304      	adds	r3, #4
 80121c2:	3401      	adds	r4, #1
 80121c4:	3e03      	subs	r6, #3
 80121c6:	42b4      	cmp	r4, r6
 80121c8:	bf88      	it	hi
 80121ca:	2304      	movhi	r3, #4
 80121cc:	4443      	add	r3, r8
 80121ce:	2200      	movs	r2, #0
 80121d0:	f843 2b04 	str.w	r2, [r3], #4
 80121d4:	429f      	cmp	r7, r3
 80121d6:	d2fb      	bcs.n	80121d0 <__hexnan+0xcc>
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	b91b      	cbnz	r3, 80121e4 <__hexnan+0xe0>
 80121dc:	4547      	cmp	r7, r8
 80121de:	d127      	bne.n	8012230 <__hexnan+0x12c>
 80121e0:	2301      	movs	r3, #1
 80121e2:	603b      	str	r3, [r7, #0]
 80121e4:	2005      	movs	r0, #5
 80121e6:	e026      	b.n	8012236 <__hexnan+0x132>
 80121e8:	3501      	adds	r5, #1
 80121ea:	2d08      	cmp	r5, #8
 80121ec:	f10b 0b01 	add.w	fp, fp, #1
 80121f0:	dd06      	ble.n	8012200 <__hexnan+0xfc>
 80121f2:	4544      	cmp	r4, r8
 80121f4:	d9c3      	bls.n	801217e <__hexnan+0x7a>
 80121f6:	2300      	movs	r3, #0
 80121f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80121fc:	2501      	movs	r5, #1
 80121fe:	3c04      	subs	r4, #4
 8012200:	6822      	ldr	r2, [r4, #0]
 8012202:	f000 000f 	and.w	r0, r0, #15
 8012206:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801220a:	6022      	str	r2, [r4, #0]
 801220c:	e7b7      	b.n	801217e <__hexnan+0x7a>
 801220e:	2508      	movs	r5, #8
 8012210:	e7b5      	b.n	801217e <__hexnan+0x7a>
 8012212:	9b01      	ldr	r3, [sp, #4]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d0df      	beq.n	80121d8 <__hexnan+0xd4>
 8012218:	f04f 32ff 	mov.w	r2, #4294967295
 801221c:	f1c3 0320 	rsb	r3, r3, #32
 8012220:	fa22 f303 	lsr.w	r3, r2, r3
 8012224:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012228:	401a      	ands	r2, r3
 801222a:	f846 2c04 	str.w	r2, [r6, #-4]
 801222e:	e7d3      	b.n	80121d8 <__hexnan+0xd4>
 8012230:	3f04      	subs	r7, #4
 8012232:	e7d1      	b.n	80121d8 <__hexnan+0xd4>
 8012234:	2004      	movs	r0, #4
 8012236:	b007      	add	sp, #28
 8012238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801223c <_localeconv_r>:
 801223c:	4800      	ldr	r0, [pc, #0]	; (8012240 <_localeconv_r+0x4>)
 801223e:	4770      	bx	lr
 8012240:	200002d4 	.word	0x200002d4

08012244 <malloc>:
 8012244:	4b02      	ldr	r3, [pc, #8]	; (8012250 <malloc+0xc>)
 8012246:	4601      	mov	r1, r0
 8012248:	6818      	ldr	r0, [r3, #0]
 801224a:	f000 bd59 	b.w	8012d00 <_malloc_r>
 801224e:	bf00      	nop
 8012250:	2000017c 	.word	0x2000017c

08012254 <__ascii_mbtowc>:
 8012254:	b082      	sub	sp, #8
 8012256:	b901      	cbnz	r1, 801225a <__ascii_mbtowc+0x6>
 8012258:	a901      	add	r1, sp, #4
 801225a:	b142      	cbz	r2, 801226e <__ascii_mbtowc+0x1a>
 801225c:	b14b      	cbz	r3, 8012272 <__ascii_mbtowc+0x1e>
 801225e:	7813      	ldrb	r3, [r2, #0]
 8012260:	600b      	str	r3, [r1, #0]
 8012262:	7812      	ldrb	r2, [r2, #0]
 8012264:	1e10      	subs	r0, r2, #0
 8012266:	bf18      	it	ne
 8012268:	2001      	movne	r0, #1
 801226a:	b002      	add	sp, #8
 801226c:	4770      	bx	lr
 801226e:	4610      	mov	r0, r2
 8012270:	e7fb      	b.n	801226a <__ascii_mbtowc+0x16>
 8012272:	f06f 0001 	mvn.w	r0, #1
 8012276:	e7f8      	b.n	801226a <__ascii_mbtowc+0x16>

08012278 <_Balloc>:
 8012278:	b570      	push	{r4, r5, r6, lr}
 801227a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801227c:	4604      	mov	r4, r0
 801227e:	460d      	mov	r5, r1
 8012280:	b976      	cbnz	r6, 80122a0 <_Balloc+0x28>
 8012282:	2010      	movs	r0, #16
 8012284:	f7ff ffde 	bl	8012244 <malloc>
 8012288:	4602      	mov	r2, r0
 801228a:	6260      	str	r0, [r4, #36]	; 0x24
 801228c:	b920      	cbnz	r0, 8012298 <_Balloc+0x20>
 801228e:	4b18      	ldr	r3, [pc, #96]	; (80122f0 <_Balloc+0x78>)
 8012290:	4818      	ldr	r0, [pc, #96]	; (80122f4 <_Balloc+0x7c>)
 8012292:	2166      	movs	r1, #102	; 0x66
 8012294:	f000 ff3e 	bl	8013114 <__assert_func>
 8012298:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801229c:	6006      	str	r6, [r0, #0]
 801229e:	60c6      	str	r6, [r0, #12]
 80122a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80122a2:	68f3      	ldr	r3, [r6, #12]
 80122a4:	b183      	cbz	r3, 80122c8 <_Balloc+0x50>
 80122a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122a8:	68db      	ldr	r3, [r3, #12]
 80122aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80122ae:	b9b8      	cbnz	r0, 80122e0 <_Balloc+0x68>
 80122b0:	2101      	movs	r1, #1
 80122b2:	fa01 f605 	lsl.w	r6, r1, r5
 80122b6:	1d72      	adds	r2, r6, #5
 80122b8:	0092      	lsls	r2, r2, #2
 80122ba:	4620      	mov	r0, r4
 80122bc:	f000 fc9d 	bl	8012bfa <_calloc_r>
 80122c0:	b160      	cbz	r0, 80122dc <_Balloc+0x64>
 80122c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80122c6:	e00e      	b.n	80122e6 <_Balloc+0x6e>
 80122c8:	2221      	movs	r2, #33	; 0x21
 80122ca:	2104      	movs	r1, #4
 80122cc:	4620      	mov	r0, r4
 80122ce:	f000 fc94 	bl	8012bfa <_calloc_r>
 80122d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122d4:	60f0      	str	r0, [r6, #12]
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d1e4      	bne.n	80122a6 <_Balloc+0x2e>
 80122dc:	2000      	movs	r0, #0
 80122de:	bd70      	pop	{r4, r5, r6, pc}
 80122e0:	6802      	ldr	r2, [r0, #0]
 80122e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80122e6:	2300      	movs	r3, #0
 80122e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80122ec:	e7f7      	b.n	80122de <_Balloc+0x66>
 80122ee:	bf00      	nop
 80122f0:	08015a56 	.word	0x08015a56
 80122f4:	08015b54 	.word	0x08015b54

080122f8 <_Bfree>:
 80122f8:	b570      	push	{r4, r5, r6, lr}
 80122fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122fc:	4605      	mov	r5, r0
 80122fe:	460c      	mov	r4, r1
 8012300:	b976      	cbnz	r6, 8012320 <_Bfree+0x28>
 8012302:	2010      	movs	r0, #16
 8012304:	f7ff ff9e 	bl	8012244 <malloc>
 8012308:	4602      	mov	r2, r0
 801230a:	6268      	str	r0, [r5, #36]	; 0x24
 801230c:	b920      	cbnz	r0, 8012318 <_Bfree+0x20>
 801230e:	4b09      	ldr	r3, [pc, #36]	; (8012334 <_Bfree+0x3c>)
 8012310:	4809      	ldr	r0, [pc, #36]	; (8012338 <_Bfree+0x40>)
 8012312:	218a      	movs	r1, #138	; 0x8a
 8012314:	f000 fefe 	bl	8013114 <__assert_func>
 8012318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801231c:	6006      	str	r6, [r0, #0]
 801231e:	60c6      	str	r6, [r0, #12]
 8012320:	b13c      	cbz	r4, 8012332 <_Bfree+0x3a>
 8012322:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012324:	6862      	ldr	r2, [r4, #4]
 8012326:	68db      	ldr	r3, [r3, #12]
 8012328:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801232c:	6021      	str	r1, [r4, #0]
 801232e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012332:	bd70      	pop	{r4, r5, r6, pc}
 8012334:	08015a56 	.word	0x08015a56
 8012338:	08015b54 	.word	0x08015b54

0801233c <__multadd>:
 801233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012340:	690d      	ldr	r5, [r1, #16]
 8012342:	4607      	mov	r7, r0
 8012344:	460c      	mov	r4, r1
 8012346:	461e      	mov	r6, r3
 8012348:	f101 0c14 	add.w	ip, r1, #20
 801234c:	2000      	movs	r0, #0
 801234e:	f8dc 3000 	ldr.w	r3, [ip]
 8012352:	b299      	uxth	r1, r3
 8012354:	fb02 6101 	mla	r1, r2, r1, r6
 8012358:	0c1e      	lsrs	r6, r3, #16
 801235a:	0c0b      	lsrs	r3, r1, #16
 801235c:	fb02 3306 	mla	r3, r2, r6, r3
 8012360:	b289      	uxth	r1, r1
 8012362:	3001      	adds	r0, #1
 8012364:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012368:	4285      	cmp	r5, r0
 801236a:	f84c 1b04 	str.w	r1, [ip], #4
 801236e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012372:	dcec      	bgt.n	801234e <__multadd+0x12>
 8012374:	b30e      	cbz	r6, 80123ba <__multadd+0x7e>
 8012376:	68a3      	ldr	r3, [r4, #8]
 8012378:	42ab      	cmp	r3, r5
 801237a:	dc19      	bgt.n	80123b0 <__multadd+0x74>
 801237c:	6861      	ldr	r1, [r4, #4]
 801237e:	4638      	mov	r0, r7
 8012380:	3101      	adds	r1, #1
 8012382:	f7ff ff79 	bl	8012278 <_Balloc>
 8012386:	4680      	mov	r8, r0
 8012388:	b928      	cbnz	r0, 8012396 <__multadd+0x5a>
 801238a:	4602      	mov	r2, r0
 801238c:	4b0c      	ldr	r3, [pc, #48]	; (80123c0 <__multadd+0x84>)
 801238e:	480d      	ldr	r0, [pc, #52]	; (80123c4 <__multadd+0x88>)
 8012390:	21b5      	movs	r1, #181	; 0xb5
 8012392:	f000 febf 	bl	8013114 <__assert_func>
 8012396:	6922      	ldr	r2, [r4, #16]
 8012398:	3202      	adds	r2, #2
 801239a:	f104 010c 	add.w	r1, r4, #12
 801239e:	0092      	lsls	r2, r2, #2
 80123a0:	300c      	adds	r0, #12
 80123a2:	f7fc ffff 	bl	800f3a4 <memcpy>
 80123a6:	4621      	mov	r1, r4
 80123a8:	4638      	mov	r0, r7
 80123aa:	f7ff ffa5 	bl	80122f8 <_Bfree>
 80123ae:	4644      	mov	r4, r8
 80123b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80123b4:	3501      	adds	r5, #1
 80123b6:	615e      	str	r6, [r3, #20]
 80123b8:	6125      	str	r5, [r4, #16]
 80123ba:	4620      	mov	r0, r4
 80123bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123c0:	08015ac8 	.word	0x08015ac8
 80123c4:	08015b54 	.word	0x08015b54

080123c8 <__s2b>:
 80123c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80123cc:	460c      	mov	r4, r1
 80123ce:	4615      	mov	r5, r2
 80123d0:	461f      	mov	r7, r3
 80123d2:	2209      	movs	r2, #9
 80123d4:	3308      	adds	r3, #8
 80123d6:	4606      	mov	r6, r0
 80123d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80123dc:	2100      	movs	r1, #0
 80123de:	2201      	movs	r2, #1
 80123e0:	429a      	cmp	r2, r3
 80123e2:	db09      	blt.n	80123f8 <__s2b+0x30>
 80123e4:	4630      	mov	r0, r6
 80123e6:	f7ff ff47 	bl	8012278 <_Balloc>
 80123ea:	b940      	cbnz	r0, 80123fe <__s2b+0x36>
 80123ec:	4602      	mov	r2, r0
 80123ee:	4b19      	ldr	r3, [pc, #100]	; (8012454 <__s2b+0x8c>)
 80123f0:	4819      	ldr	r0, [pc, #100]	; (8012458 <__s2b+0x90>)
 80123f2:	21ce      	movs	r1, #206	; 0xce
 80123f4:	f000 fe8e 	bl	8013114 <__assert_func>
 80123f8:	0052      	lsls	r2, r2, #1
 80123fa:	3101      	adds	r1, #1
 80123fc:	e7f0      	b.n	80123e0 <__s2b+0x18>
 80123fe:	9b08      	ldr	r3, [sp, #32]
 8012400:	6143      	str	r3, [r0, #20]
 8012402:	2d09      	cmp	r5, #9
 8012404:	f04f 0301 	mov.w	r3, #1
 8012408:	6103      	str	r3, [r0, #16]
 801240a:	dd16      	ble.n	801243a <__s2b+0x72>
 801240c:	f104 0909 	add.w	r9, r4, #9
 8012410:	46c8      	mov	r8, r9
 8012412:	442c      	add	r4, r5
 8012414:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012418:	4601      	mov	r1, r0
 801241a:	3b30      	subs	r3, #48	; 0x30
 801241c:	220a      	movs	r2, #10
 801241e:	4630      	mov	r0, r6
 8012420:	f7ff ff8c 	bl	801233c <__multadd>
 8012424:	45a0      	cmp	r8, r4
 8012426:	d1f5      	bne.n	8012414 <__s2b+0x4c>
 8012428:	f1a5 0408 	sub.w	r4, r5, #8
 801242c:	444c      	add	r4, r9
 801242e:	1b2d      	subs	r5, r5, r4
 8012430:	1963      	adds	r3, r4, r5
 8012432:	42bb      	cmp	r3, r7
 8012434:	db04      	blt.n	8012440 <__s2b+0x78>
 8012436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801243a:	340a      	adds	r4, #10
 801243c:	2509      	movs	r5, #9
 801243e:	e7f6      	b.n	801242e <__s2b+0x66>
 8012440:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012444:	4601      	mov	r1, r0
 8012446:	3b30      	subs	r3, #48	; 0x30
 8012448:	220a      	movs	r2, #10
 801244a:	4630      	mov	r0, r6
 801244c:	f7ff ff76 	bl	801233c <__multadd>
 8012450:	e7ee      	b.n	8012430 <__s2b+0x68>
 8012452:	bf00      	nop
 8012454:	08015ac8 	.word	0x08015ac8
 8012458:	08015b54 	.word	0x08015b54

0801245c <__hi0bits>:
 801245c:	0c03      	lsrs	r3, r0, #16
 801245e:	041b      	lsls	r3, r3, #16
 8012460:	b9d3      	cbnz	r3, 8012498 <__hi0bits+0x3c>
 8012462:	0400      	lsls	r0, r0, #16
 8012464:	2310      	movs	r3, #16
 8012466:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801246a:	bf04      	itt	eq
 801246c:	0200      	lsleq	r0, r0, #8
 801246e:	3308      	addeq	r3, #8
 8012470:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012474:	bf04      	itt	eq
 8012476:	0100      	lsleq	r0, r0, #4
 8012478:	3304      	addeq	r3, #4
 801247a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801247e:	bf04      	itt	eq
 8012480:	0080      	lsleq	r0, r0, #2
 8012482:	3302      	addeq	r3, #2
 8012484:	2800      	cmp	r0, #0
 8012486:	db05      	blt.n	8012494 <__hi0bits+0x38>
 8012488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801248c:	f103 0301 	add.w	r3, r3, #1
 8012490:	bf08      	it	eq
 8012492:	2320      	moveq	r3, #32
 8012494:	4618      	mov	r0, r3
 8012496:	4770      	bx	lr
 8012498:	2300      	movs	r3, #0
 801249a:	e7e4      	b.n	8012466 <__hi0bits+0xa>

0801249c <__lo0bits>:
 801249c:	6803      	ldr	r3, [r0, #0]
 801249e:	f013 0207 	ands.w	r2, r3, #7
 80124a2:	4601      	mov	r1, r0
 80124a4:	d00b      	beq.n	80124be <__lo0bits+0x22>
 80124a6:	07da      	lsls	r2, r3, #31
 80124a8:	d423      	bmi.n	80124f2 <__lo0bits+0x56>
 80124aa:	0798      	lsls	r0, r3, #30
 80124ac:	bf49      	itett	mi
 80124ae:	085b      	lsrmi	r3, r3, #1
 80124b0:	089b      	lsrpl	r3, r3, #2
 80124b2:	2001      	movmi	r0, #1
 80124b4:	600b      	strmi	r3, [r1, #0]
 80124b6:	bf5c      	itt	pl
 80124b8:	600b      	strpl	r3, [r1, #0]
 80124ba:	2002      	movpl	r0, #2
 80124bc:	4770      	bx	lr
 80124be:	b298      	uxth	r0, r3
 80124c0:	b9a8      	cbnz	r0, 80124ee <__lo0bits+0x52>
 80124c2:	0c1b      	lsrs	r3, r3, #16
 80124c4:	2010      	movs	r0, #16
 80124c6:	b2da      	uxtb	r2, r3
 80124c8:	b90a      	cbnz	r2, 80124ce <__lo0bits+0x32>
 80124ca:	3008      	adds	r0, #8
 80124cc:	0a1b      	lsrs	r3, r3, #8
 80124ce:	071a      	lsls	r2, r3, #28
 80124d0:	bf04      	itt	eq
 80124d2:	091b      	lsreq	r3, r3, #4
 80124d4:	3004      	addeq	r0, #4
 80124d6:	079a      	lsls	r2, r3, #30
 80124d8:	bf04      	itt	eq
 80124da:	089b      	lsreq	r3, r3, #2
 80124dc:	3002      	addeq	r0, #2
 80124de:	07da      	lsls	r2, r3, #31
 80124e0:	d403      	bmi.n	80124ea <__lo0bits+0x4e>
 80124e2:	085b      	lsrs	r3, r3, #1
 80124e4:	f100 0001 	add.w	r0, r0, #1
 80124e8:	d005      	beq.n	80124f6 <__lo0bits+0x5a>
 80124ea:	600b      	str	r3, [r1, #0]
 80124ec:	4770      	bx	lr
 80124ee:	4610      	mov	r0, r2
 80124f0:	e7e9      	b.n	80124c6 <__lo0bits+0x2a>
 80124f2:	2000      	movs	r0, #0
 80124f4:	4770      	bx	lr
 80124f6:	2020      	movs	r0, #32
 80124f8:	4770      	bx	lr
	...

080124fc <__i2b>:
 80124fc:	b510      	push	{r4, lr}
 80124fe:	460c      	mov	r4, r1
 8012500:	2101      	movs	r1, #1
 8012502:	f7ff feb9 	bl	8012278 <_Balloc>
 8012506:	4602      	mov	r2, r0
 8012508:	b928      	cbnz	r0, 8012516 <__i2b+0x1a>
 801250a:	4b05      	ldr	r3, [pc, #20]	; (8012520 <__i2b+0x24>)
 801250c:	4805      	ldr	r0, [pc, #20]	; (8012524 <__i2b+0x28>)
 801250e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012512:	f000 fdff 	bl	8013114 <__assert_func>
 8012516:	2301      	movs	r3, #1
 8012518:	6144      	str	r4, [r0, #20]
 801251a:	6103      	str	r3, [r0, #16]
 801251c:	bd10      	pop	{r4, pc}
 801251e:	bf00      	nop
 8012520:	08015ac8 	.word	0x08015ac8
 8012524:	08015b54 	.word	0x08015b54

08012528 <__multiply>:
 8012528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801252c:	4691      	mov	r9, r2
 801252e:	690a      	ldr	r2, [r1, #16]
 8012530:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012534:	429a      	cmp	r2, r3
 8012536:	bfb8      	it	lt
 8012538:	460b      	movlt	r3, r1
 801253a:	460c      	mov	r4, r1
 801253c:	bfbc      	itt	lt
 801253e:	464c      	movlt	r4, r9
 8012540:	4699      	movlt	r9, r3
 8012542:	6927      	ldr	r7, [r4, #16]
 8012544:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012548:	68a3      	ldr	r3, [r4, #8]
 801254a:	6861      	ldr	r1, [r4, #4]
 801254c:	eb07 060a 	add.w	r6, r7, sl
 8012550:	42b3      	cmp	r3, r6
 8012552:	b085      	sub	sp, #20
 8012554:	bfb8      	it	lt
 8012556:	3101      	addlt	r1, #1
 8012558:	f7ff fe8e 	bl	8012278 <_Balloc>
 801255c:	b930      	cbnz	r0, 801256c <__multiply+0x44>
 801255e:	4602      	mov	r2, r0
 8012560:	4b44      	ldr	r3, [pc, #272]	; (8012674 <__multiply+0x14c>)
 8012562:	4845      	ldr	r0, [pc, #276]	; (8012678 <__multiply+0x150>)
 8012564:	f240 115d 	movw	r1, #349	; 0x15d
 8012568:	f000 fdd4 	bl	8013114 <__assert_func>
 801256c:	f100 0514 	add.w	r5, r0, #20
 8012570:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012574:	462b      	mov	r3, r5
 8012576:	2200      	movs	r2, #0
 8012578:	4543      	cmp	r3, r8
 801257a:	d321      	bcc.n	80125c0 <__multiply+0x98>
 801257c:	f104 0314 	add.w	r3, r4, #20
 8012580:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012584:	f109 0314 	add.w	r3, r9, #20
 8012588:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801258c:	9202      	str	r2, [sp, #8]
 801258e:	1b3a      	subs	r2, r7, r4
 8012590:	3a15      	subs	r2, #21
 8012592:	f022 0203 	bic.w	r2, r2, #3
 8012596:	3204      	adds	r2, #4
 8012598:	f104 0115 	add.w	r1, r4, #21
 801259c:	428f      	cmp	r7, r1
 801259e:	bf38      	it	cc
 80125a0:	2204      	movcc	r2, #4
 80125a2:	9201      	str	r2, [sp, #4]
 80125a4:	9a02      	ldr	r2, [sp, #8]
 80125a6:	9303      	str	r3, [sp, #12]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d80c      	bhi.n	80125c6 <__multiply+0x9e>
 80125ac:	2e00      	cmp	r6, #0
 80125ae:	dd03      	ble.n	80125b8 <__multiply+0x90>
 80125b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d05a      	beq.n	801266e <__multiply+0x146>
 80125b8:	6106      	str	r6, [r0, #16]
 80125ba:	b005      	add	sp, #20
 80125bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125c0:	f843 2b04 	str.w	r2, [r3], #4
 80125c4:	e7d8      	b.n	8012578 <__multiply+0x50>
 80125c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80125ca:	f1ba 0f00 	cmp.w	sl, #0
 80125ce:	d024      	beq.n	801261a <__multiply+0xf2>
 80125d0:	f104 0e14 	add.w	lr, r4, #20
 80125d4:	46a9      	mov	r9, r5
 80125d6:	f04f 0c00 	mov.w	ip, #0
 80125da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80125de:	f8d9 1000 	ldr.w	r1, [r9]
 80125e2:	fa1f fb82 	uxth.w	fp, r2
 80125e6:	b289      	uxth	r1, r1
 80125e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80125ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80125f0:	f8d9 2000 	ldr.w	r2, [r9]
 80125f4:	4461      	add	r1, ip
 80125f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80125fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80125fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012602:	b289      	uxth	r1, r1
 8012604:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012608:	4577      	cmp	r7, lr
 801260a:	f849 1b04 	str.w	r1, [r9], #4
 801260e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012612:	d8e2      	bhi.n	80125da <__multiply+0xb2>
 8012614:	9a01      	ldr	r2, [sp, #4]
 8012616:	f845 c002 	str.w	ip, [r5, r2]
 801261a:	9a03      	ldr	r2, [sp, #12]
 801261c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012620:	3304      	adds	r3, #4
 8012622:	f1b9 0f00 	cmp.w	r9, #0
 8012626:	d020      	beq.n	801266a <__multiply+0x142>
 8012628:	6829      	ldr	r1, [r5, #0]
 801262a:	f104 0c14 	add.w	ip, r4, #20
 801262e:	46ae      	mov	lr, r5
 8012630:	f04f 0a00 	mov.w	sl, #0
 8012634:	f8bc b000 	ldrh.w	fp, [ip]
 8012638:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801263c:	fb09 220b 	mla	r2, r9, fp, r2
 8012640:	4492      	add	sl, r2
 8012642:	b289      	uxth	r1, r1
 8012644:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8012648:	f84e 1b04 	str.w	r1, [lr], #4
 801264c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8012650:	f8be 1000 	ldrh.w	r1, [lr]
 8012654:	0c12      	lsrs	r2, r2, #16
 8012656:	fb09 1102 	mla	r1, r9, r2, r1
 801265a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801265e:	4567      	cmp	r7, ip
 8012660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012664:	d8e6      	bhi.n	8012634 <__multiply+0x10c>
 8012666:	9a01      	ldr	r2, [sp, #4]
 8012668:	50a9      	str	r1, [r5, r2]
 801266a:	3504      	adds	r5, #4
 801266c:	e79a      	b.n	80125a4 <__multiply+0x7c>
 801266e:	3e01      	subs	r6, #1
 8012670:	e79c      	b.n	80125ac <__multiply+0x84>
 8012672:	bf00      	nop
 8012674:	08015ac8 	.word	0x08015ac8
 8012678:	08015b54 	.word	0x08015b54

0801267c <__pow5mult>:
 801267c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012680:	4615      	mov	r5, r2
 8012682:	f012 0203 	ands.w	r2, r2, #3
 8012686:	4606      	mov	r6, r0
 8012688:	460f      	mov	r7, r1
 801268a:	d007      	beq.n	801269c <__pow5mult+0x20>
 801268c:	4c25      	ldr	r4, [pc, #148]	; (8012724 <__pow5mult+0xa8>)
 801268e:	3a01      	subs	r2, #1
 8012690:	2300      	movs	r3, #0
 8012692:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012696:	f7ff fe51 	bl	801233c <__multadd>
 801269a:	4607      	mov	r7, r0
 801269c:	10ad      	asrs	r5, r5, #2
 801269e:	d03d      	beq.n	801271c <__pow5mult+0xa0>
 80126a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80126a2:	b97c      	cbnz	r4, 80126c4 <__pow5mult+0x48>
 80126a4:	2010      	movs	r0, #16
 80126a6:	f7ff fdcd 	bl	8012244 <malloc>
 80126aa:	4602      	mov	r2, r0
 80126ac:	6270      	str	r0, [r6, #36]	; 0x24
 80126ae:	b928      	cbnz	r0, 80126bc <__pow5mult+0x40>
 80126b0:	4b1d      	ldr	r3, [pc, #116]	; (8012728 <__pow5mult+0xac>)
 80126b2:	481e      	ldr	r0, [pc, #120]	; (801272c <__pow5mult+0xb0>)
 80126b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80126b8:	f000 fd2c 	bl	8013114 <__assert_func>
 80126bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80126c0:	6004      	str	r4, [r0, #0]
 80126c2:	60c4      	str	r4, [r0, #12]
 80126c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80126c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80126cc:	b94c      	cbnz	r4, 80126e2 <__pow5mult+0x66>
 80126ce:	f240 2171 	movw	r1, #625	; 0x271
 80126d2:	4630      	mov	r0, r6
 80126d4:	f7ff ff12 	bl	80124fc <__i2b>
 80126d8:	2300      	movs	r3, #0
 80126da:	f8c8 0008 	str.w	r0, [r8, #8]
 80126de:	4604      	mov	r4, r0
 80126e0:	6003      	str	r3, [r0, #0]
 80126e2:	f04f 0900 	mov.w	r9, #0
 80126e6:	07eb      	lsls	r3, r5, #31
 80126e8:	d50a      	bpl.n	8012700 <__pow5mult+0x84>
 80126ea:	4639      	mov	r1, r7
 80126ec:	4622      	mov	r2, r4
 80126ee:	4630      	mov	r0, r6
 80126f0:	f7ff ff1a 	bl	8012528 <__multiply>
 80126f4:	4639      	mov	r1, r7
 80126f6:	4680      	mov	r8, r0
 80126f8:	4630      	mov	r0, r6
 80126fa:	f7ff fdfd 	bl	80122f8 <_Bfree>
 80126fe:	4647      	mov	r7, r8
 8012700:	106d      	asrs	r5, r5, #1
 8012702:	d00b      	beq.n	801271c <__pow5mult+0xa0>
 8012704:	6820      	ldr	r0, [r4, #0]
 8012706:	b938      	cbnz	r0, 8012718 <__pow5mult+0x9c>
 8012708:	4622      	mov	r2, r4
 801270a:	4621      	mov	r1, r4
 801270c:	4630      	mov	r0, r6
 801270e:	f7ff ff0b 	bl	8012528 <__multiply>
 8012712:	6020      	str	r0, [r4, #0]
 8012714:	f8c0 9000 	str.w	r9, [r0]
 8012718:	4604      	mov	r4, r0
 801271a:	e7e4      	b.n	80126e6 <__pow5mult+0x6a>
 801271c:	4638      	mov	r0, r7
 801271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012722:	bf00      	nop
 8012724:	08015ca0 	.word	0x08015ca0
 8012728:	08015a56 	.word	0x08015a56
 801272c:	08015b54 	.word	0x08015b54

08012730 <__lshift>:
 8012730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012734:	460c      	mov	r4, r1
 8012736:	6849      	ldr	r1, [r1, #4]
 8012738:	6923      	ldr	r3, [r4, #16]
 801273a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801273e:	68a3      	ldr	r3, [r4, #8]
 8012740:	4607      	mov	r7, r0
 8012742:	4691      	mov	r9, r2
 8012744:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012748:	f108 0601 	add.w	r6, r8, #1
 801274c:	42b3      	cmp	r3, r6
 801274e:	db0b      	blt.n	8012768 <__lshift+0x38>
 8012750:	4638      	mov	r0, r7
 8012752:	f7ff fd91 	bl	8012278 <_Balloc>
 8012756:	4605      	mov	r5, r0
 8012758:	b948      	cbnz	r0, 801276e <__lshift+0x3e>
 801275a:	4602      	mov	r2, r0
 801275c:	4b2a      	ldr	r3, [pc, #168]	; (8012808 <__lshift+0xd8>)
 801275e:	482b      	ldr	r0, [pc, #172]	; (801280c <__lshift+0xdc>)
 8012760:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012764:	f000 fcd6 	bl	8013114 <__assert_func>
 8012768:	3101      	adds	r1, #1
 801276a:	005b      	lsls	r3, r3, #1
 801276c:	e7ee      	b.n	801274c <__lshift+0x1c>
 801276e:	2300      	movs	r3, #0
 8012770:	f100 0114 	add.w	r1, r0, #20
 8012774:	f100 0210 	add.w	r2, r0, #16
 8012778:	4618      	mov	r0, r3
 801277a:	4553      	cmp	r3, sl
 801277c:	db37      	blt.n	80127ee <__lshift+0xbe>
 801277e:	6920      	ldr	r0, [r4, #16]
 8012780:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012784:	f104 0314 	add.w	r3, r4, #20
 8012788:	f019 091f 	ands.w	r9, r9, #31
 801278c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012790:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012794:	d02f      	beq.n	80127f6 <__lshift+0xc6>
 8012796:	f1c9 0e20 	rsb	lr, r9, #32
 801279a:	468a      	mov	sl, r1
 801279c:	f04f 0c00 	mov.w	ip, #0
 80127a0:	681a      	ldr	r2, [r3, #0]
 80127a2:	fa02 f209 	lsl.w	r2, r2, r9
 80127a6:	ea42 020c 	orr.w	r2, r2, ip
 80127aa:	f84a 2b04 	str.w	r2, [sl], #4
 80127ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80127b2:	4298      	cmp	r0, r3
 80127b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80127b8:	d8f2      	bhi.n	80127a0 <__lshift+0x70>
 80127ba:	1b03      	subs	r3, r0, r4
 80127bc:	3b15      	subs	r3, #21
 80127be:	f023 0303 	bic.w	r3, r3, #3
 80127c2:	3304      	adds	r3, #4
 80127c4:	f104 0215 	add.w	r2, r4, #21
 80127c8:	4290      	cmp	r0, r2
 80127ca:	bf38      	it	cc
 80127cc:	2304      	movcc	r3, #4
 80127ce:	f841 c003 	str.w	ip, [r1, r3]
 80127d2:	f1bc 0f00 	cmp.w	ip, #0
 80127d6:	d001      	beq.n	80127dc <__lshift+0xac>
 80127d8:	f108 0602 	add.w	r6, r8, #2
 80127dc:	3e01      	subs	r6, #1
 80127de:	4638      	mov	r0, r7
 80127e0:	612e      	str	r6, [r5, #16]
 80127e2:	4621      	mov	r1, r4
 80127e4:	f7ff fd88 	bl	80122f8 <_Bfree>
 80127e8:	4628      	mov	r0, r5
 80127ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80127f2:	3301      	adds	r3, #1
 80127f4:	e7c1      	b.n	801277a <__lshift+0x4a>
 80127f6:	3904      	subs	r1, #4
 80127f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80127fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8012800:	4298      	cmp	r0, r3
 8012802:	d8f9      	bhi.n	80127f8 <__lshift+0xc8>
 8012804:	e7ea      	b.n	80127dc <__lshift+0xac>
 8012806:	bf00      	nop
 8012808:	08015ac8 	.word	0x08015ac8
 801280c:	08015b54 	.word	0x08015b54

08012810 <__mcmp>:
 8012810:	b530      	push	{r4, r5, lr}
 8012812:	6902      	ldr	r2, [r0, #16]
 8012814:	690c      	ldr	r4, [r1, #16]
 8012816:	1b12      	subs	r2, r2, r4
 8012818:	d10e      	bne.n	8012838 <__mcmp+0x28>
 801281a:	f100 0314 	add.w	r3, r0, #20
 801281e:	3114      	adds	r1, #20
 8012820:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012824:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012828:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801282c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012830:	42a5      	cmp	r5, r4
 8012832:	d003      	beq.n	801283c <__mcmp+0x2c>
 8012834:	d305      	bcc.n	8012842 <__mcmp+0x32>
 8012836:	2201      	movs	r2, #1
 8012838:	4610      	mov	r0, r2
 801283a:	bd30      	pop	{r4, r5, pc}
 801283c:	4283      	cmp	r3, r0
 801283e:	d3f3      	bcc.n	8012828 <__mcmp+0x18>
 8012840:	e7fa      	b.n	8012838 <__mcmp+0x28>
 8012842:	f04f 32ff 	mov.w	r2, #4294967295
 8012846:	e7f7      	b.n	8012838 <__mcmp+0x28>

08012848 <__mdiff>:
 8012848:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801284c:	460c      	mov	r4, r1
 801284e:	4606      	mov	r6, r0
 8012850:	4611      	mov	r1, r2
 8012852:	4620      	mov	r0, r4
 8012854:	4690      	mov	r8, r2
 8012856:	f7ff ffdb 	bl	8012810 <__mcmp>
 801285a:	1e05      	subs	r5, r0, #0
 801285c:	d110      	bne.n	8012880 <__mdiff+0x38>
 801285e:	4629      	mov	r1, r5
 8012860:	4630      	mov	r0, r6
 8012862:	f7ff fd09 	bl	8012278 <_Balloc>
 8012866:	b930      	cbnz	r0, 8012876 <__mdiff+0x2e>
 8012868:	4b3a      	ldr	r3, [pc, #232]	; (8012954 <__mdiff+0x10c>)
 801286a:	4602      	mov	r2, r0
 801286c:	f240 2132 	movw	r1, #562	; 0x232
 8012870:	4839      	ldr	r0, [pc, #228]	; (8012958 <__mdiff+0x110>)
 8012872:	f000 fc4f 	bl	8013114 <__assert_func>
 8012876:	2301      	movs	r3, #1
 8012878:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801287c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012880:	bfa4      	itt	ge
 8012882:	4643      	movge	r3, r8
 8012884:	46a0      	movge	r8, r4
 8012886:	4630      	mov	r0, r6
 8012888:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801288c:	bfa6      	itte	ge
 801288e:	461c      	movge	r4, r3
 8012890:	2500      	movge	r5, #0
 8012892:	2501      	movlt	r5, #1
 8012894:	f7ff fcf0 	bl	8012278 <_Balloc>
 8012898:	b920      	cbnz	r0, 80128a4 <__mdiff+0x5c>
 801289a:	4b2e      	ldr	r3, [pc, #184]	; (8012954 <__mdiff+0x10c>)
 801289c:	4602      	mov	r2, r0
 801289e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80128a2:	e7e5      	b.n	8012870 <__mdiff+0x28>
 80128a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80128a8:	6926      	ldr	r6, [r4, #16]
 80128aa:	60c5      	str	r5, [r0, #12]
 80128ac:	f104 0914 	add.w	r9, r4, #20
 80128b0:	f108 0514 	add.w	r5, r8, #20
 80128b4:	f100 0e14 	add.w	lr, r0, #20
 80128b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80128bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80128c0:	f108 0210 	add.w	r2, r8, #16
 80128c4:	46f2      	mov	sl, lr
 80128c6:	2100      	movs	r1, #0
 80128c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80128cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80128d0:	fa1f f883 	uxth.w	r8, r3
 80128d4:	fa11 f18b 	uxtah	r1, r1, fp
 80128d8:	0c1b      	lsrs	r3, r3, #16
 80128da:	eba1 0808 	sub.w	r8, r1, r8
 80128de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80128e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80128e6:	fa1f f888 	uxth.w	r8, r8
 80128ea:	1419      	asrs	r1, r3, #16
 80128ec:	454e      	cmp	r6, r9
 80128ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80128f2:	f84a 3b04 	str.w	r3, [sl], #4
 80128f6:	d8e7      	bhi.n	80128c8 <__mdiff+0x80>
 80128f8:	1b33      	subs	r3, r6, r4
 80128fa:	3b15      	subs	r3, #21
 80128fc:	f023 0303 	bic.w	r3, r3, #3
 8012900:	3304      	adds	r3, #4
 8012902:	3415      	adds	r4, #21
 8012904:	42a6      	cmp	r6, r4
 8012906:	bf38      	it	cc
 8012908:	2304      	movcc	r3, #4
 801290a:	441d      	add	r5, r3
 801290c:	4473      	add	r3, lr
 801290e:	469e      	mov	lr, r3
 8012910:	462e      	mov	r6, r5
 8012912:	4566      	cmp	r6, ip
 8012914:	d30e      	bcc.n	8012934 <__mdiff+0xec>
 8012916:	f10c 0203 	add.w	r2, ip, #3
 801291a:	1b52      	subs	r2, r2, r5
 801291c:	f022 0203 	bic.w	r2, r2, #3
 8012920:	3d03      	subs	r5, #3
 8012922:	45ac      	cmp	ip, r5
 8012924:	bf38      	it	cc
 8012926:	2200      	movcc	r2, #0
 8012928:	441a      	add	r2, r3
 801292a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801292e:	b17b      	cbz	r3, 8012950 <__mdiff+0x108>
 8012930:	6107      	str	r7, [r0, #16]
 8012932:	e7a3      	b.n	801287c <__mdiff+0x34>
 8012934:	f856 8b04 	ldr.w	r8, [r6], #4
 8012938:	fa11 f288 	uxtah	r2, r1, r8
 801293c:	1414      	asrs	r4, r2, #16
 801293e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8012942:	b292      	uxth	r2, r2
 8012944:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8012948:	f84e 2b04 	str.w	r2, [lr], #4
 801294c:	1421      	asrs	r1, r4, #16
 801294e:	e7e0      	b.n	8012912 <__mdiff+0xca>
 8012950:	3f01      	subs	r7, #1
 8012952:	e7ea      	b.n	801292a <__mdiff+0xe2>
 8012954:	08015ac8 	.word	0x08015ac8
 8012958:	08015b54 	.word	0x08015b54

0801295c <__ulp>:
 801295c:	b082      	sub	sp, #8
 801295e:	ed8d 0b00 	vstr	d0, [sp]
 8012962:	9b01      	ldr	r3, [sp, #4]
 8012964:	4912      	ldr	r1, [pc, #72]	; (80129b0 <__ulp+0x54>)
 8012966:	4019      	ands	r1, r3
 8012968:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801296c:	2900      	cmp	r1, #0
 801296e:	dd05      	ble.n	801297c <__ulp+0x20>
 8012970:	2200      	movs	r2, #0
 8012972:	460b      	mov	r3, r1
 8012974:	ec43 2b10 	vmov	d0, r2, r3
 8012978:	b002      	add	sp, #8
 801297a:	4770      	bx	lr
 801297c:	4249      	negs	r1, r1
 801297e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8012982:	ea4f 5021 	mov.w	r0, r1, asr #20
 8012986:	f04f 0200 	mov.w	r2, #0
 801298a:	f04f 0300 	mov.w	r3, #0
 801298e:	da04      	bge.n	801299a <__ulp+0x3e>
 8012990:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012994:	fa41 f300 	asr.w	r3, r1, r0
 8012998:	e7ec      	b.n	8012974 <__ulp+0x18>
 801299a:	f1a0 0114 	sub.w	r1, r0, #20
 801299e:	291e      	cmp	r1, #30
 80129a0:	bfda      	itte	le
 80129a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80129a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80129aa:	2101      	movgt	r1, #1
 80129ac:	460a      	mov	r2, r1
 80129ae:	e7e1      	b.n	8012974 <__ulp+0x18>
 80129b0:	7ff00000 	.word	0x7ff00000

080129b4 <__b2d>:
 80129b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129b6:	6905      	ldr	r5, [r0, #16]
 80129b8:	f100 0714 	add.w	r7, r0, #20
 80129bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80129c0:	1f2e      	subs	r6, r5, #4
 80129c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80129c6:	4620      	mov	r0, r4
 80129c8:	f7ff fd48 	bl	801245c <__hi0bits>
 80129cc:	f1c0 0320 	rsb	r3, r0, #32
 80129d0:	280a      	cmp	r0, #10
 80129d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012a50 <__b2d+0x9c>
 80129d6:	600b      	str	r3, [r1, #0]
 80129d8:	dc14      	bgt.n	8012a04 <__b2d+0x50>
 80129da:	f1c0 0e0b 	rsb	lr, r0, #11
 80129de:	fa24 f10e 	lsr.w	r1, r4, lr
 80129e2:	42b7      	cmp	r7, r6
 80129e4:	ea41 030c 	orr.w	r3, r1, ip
 80129e8:	bf34      	ite	cc
 80129ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80129ee:	2100      	movcs	r1, #0
 80129f0:	3015      	adds	r0, #21
 80129f2:	fa04 f000 	lsl.w	r0, r4, r0
 80129f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80129fa:	ea40 0201 	orr.w	r2, r0, r1
 80129fe:	ec43 2b10 	vmov	d0, r2, r3
 8012a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a04:	42b7      	cmp	r7, r6
 8012a06:	bf3a      	itte	cc
 8012a08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012a0c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012a10:	2100      	movcs	r1, #0
 8012a12:	380b      	subs	r0, #11
 8012a14:	d017      	beq.n	8012a46 <__b2d+0x92>
 8012a16:	f1c0 0c20 	rsb	ip, r0, #32
 8012a1a:	fa04 f500 	lsl.w	r5, r4, r0
 8012a1e:	42be      	cmp	r6, r7
 8012a20:	fa21 f40c 	lsr.w	r4, r1, ip
 8012a24:	ea45 0504 	orr.w	r5, r5, r4
 8012a28:	bf8c      	ite	hi
 8012a2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012a2e:	2400      	movls	r4, #0
 8012a30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012a34:	fa01 f000 	lsl.w	r0, r1, r0
 8012a38:	fa24 f40c 	lsr.w	r4, r4, ip
 8012a3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012a40:	ea40 0204 	orr.w	r2, r0, r4
 8012a44:	e7db      	b.n	80129fe <__b2d+0x4a>
 8012a46:	ea44 030c 	orr.w	r3, r4, ip
 8012a4a:	460a      	mov	r2, r1
 8012a4c:	e7d7      	b.n	80129fe <__b2d+0x4a>
 8012a4e:	bf00      	nop
 8012a50:	3ff00000 	.word	0x3ff00000

08012a54 <__d2b>:
 8012a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012a58:	4689      	mov	r9, r1
 8012a5a:	2101      	movs	r1, #1
 8012a5c:	ec57 6b10 	vmov	r6, r7, d0
 8012a60:	4690      	mov	r8, r2
 8012a62:	f7ff fc09 	bl	8012278 <_Balloc>
 8012a66:	4604      	mov	r4, r0
 8012a68:	b930      	cbnz	r0, 8012a78 <__d2b+0x24>
 8012a6a:	4602      	mov	r2, r0
 8012a6c:	4b25      	ldr	r3, [pc, #148]	; (8012b04 <__d2b+0xb0>)
 8012a6e:	4826      	ldr	r0, [pc, #152]	; (8012b08 <__d2b+0xb4>)
 8012a70:	f240 310a 	movw	r1, #778	; 0x30a
 8012a74:	f000 fb4e 	bl	8013114 <__assert_func>
 8012a78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012a7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012a80:	bb35      	cbnz	r5, 8012ad0 <__d2b+0x7c>
 8012a82:	2e00      	cmp	r6, #0
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	d028      	beq.n	8012ada <__d2b+0x86>
 8012a88:	4668      	mov	r0, sp
 8012a8a:	9600      	str	r6, [sp, #0]
 8012a8c:	f7ff fd06 	bl	801249c <__lo0bits>
 8012a90:	9900      	ldr	r1, [sp, #0]
 8012a92:	b300      	cbz	r0, 8012ad6 <__d2b+0x82>
 8012a94:	9a01      	ldr	r2, [sp, #4]
 8012a96:	f1c0 0320 	rsb	r3, r0, #32
 8012a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8012a9e:	430b      	orrs	r3, r1
 8012aa0:	40c2      	lsrs	r2, r0
 8012aa2:	6163      	str	r3, [r4, #20]
 8012aa4:	9201      	str	r2, [sp, #4]
 8012aa6:	9b01      	ldr	r3, [sp, #4]
 8012aa8:	61a3      	str	r3, [r4, #24]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	bf14      	ite	ne
 8012aae:	2202      	movne	r2, #2
 8012ab0:	2201      	moveq	r2, #1
 8012ab2:	6122      	str	r2, [r4, #16]
 8012ab4:	b1d5      	cbz	r5, 8012aec <__d2b+0x98>
 8012ab6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012aba:	4405      	add	r5, r0
 8012abc:	f8c9 5000 	str.w	r5, [r9]
 8012ac0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012ac4:	f8c8 0000 	str.w	r0, [r8]
 8012ac8:	4620      	mov	r0, r4
 8012aca:	b003      	add	sp, #12
 8012acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012ad4:	e7d5      	b.n	8012a82 <__d2b+0x2e>
 8012ad6:	6161      	str	r1, [r4, #20]
 8012ad8:	e7e5      	b.n	8012aa6 <__d2b+0x52>
 8012ada:	a801      	add	r0, sp, #4
 8012adc:	f7ff fcde 	bl	801249c <__lo0bits>
 8012ae0:	9b01      	ldr	r3, [sp, #4]
 8012ae2:	6163      	str	r3, [r4, #20]
 8012ae4:	2201      	movs	r2, #1
 8012ae6:	6122      	str	r2, [r4, #16]
 8012ae8:	3020      	adds	r0, #32
 8012aea:	e7e3      	b.n	8012ab4 <__d2b+0x60>
 8012aec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012af0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012af4:	f8c9 0000 	str.w	r0, [r9]
 8012af8:	6918      	ldr	r0, [r3, #16]
 8012afa:	f7ff fcaf 	bl	801245c <__hi0bits>
 8012afe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b02:	e7df      	b.n	8012ac4 <__d2b+0x70>
 8012b04:	08015ac8 	.word	0x08015ac8
 8012b08:	08015b54 	.word	0x08015b54

08012b0c <__ratio>:
 8012b0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	4688      	mov	r8, r1
 8012b12:	4669      	mov	r1, sp
 8012b14:	4681      	mov	r9, r0
 8012b16:	f7ff ff4d 	bl	80129b4 <__b2d>
 8012b1a:	a901      	add	r1, sp, #4
 8012b1c:	4640      	mov	r0, r8
 8012b1e:	ec55 4b10 	vmov	r4, r5, d0
 8012b22:	f7ff ff47 	bl	80129b4 <__b2d>
 8012b26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b2a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012b2e:	eba3 0c02 	sub.w	ip, r3, r2
 8012b32:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012b36:	1a9b      	subs	r3, r3, r2
 8012b38:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012b3c:	ec51 0b10 	vmov	r0, r1, d0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	bfd6      	itet	le
 8012b44:	460a      	movle	r2, r1
 8012b46:	462a      	movgt	r2, r5
 8012b48:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012b4c:	468b      	mov	fp, r1
 8012b4e:	462f      	mov	r7, r5
 8012b50:	bfd4      	ite	le
 8012b52:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012b56:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	ee10 2a10 	vmov	r2, s0
 8012b60:	465b      	mov	r3, fp
 8012b62:	4639      	mov	r1, r7
 8012b64:	f7ed fe82 	bl	800086c <__aeabi_ddiv>
 8012b68:	ec41 0b10 	vmov	d0, r0, r1
 8012b6c:	b003      	add	sp, #12
 8012b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b72 <__copybits>:
 8012b72:	3901      	subs	r1, #1
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	1149      	asrs	r1, r1, #5
 8012b78:	6914      	ldr	r4, [r2, #16]
 8012b7a:	3101      	adds	r1, #1
 8012b7c:	f102 0314 	add.w	r3, r2, #20
 8012b80:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012b84:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012b88:	1f05      	subs	r5, r0, #4
 8012b8a:	42a3      	cmp	r3, r4
 8012b8c:	d30c      	bcc.n	8012ba8 <__copybits+0x36>
 8012b8e:	1aa3      	subs	r3, r4, r2
 8012b90:	3b11      	subs	r3, #17
 8012b92:	f023 0303 	bic.w	r3, r3, #3
 8012b96:	3211      	adds	r2, #17
 8012b98:	42a2      	cmp	r2, r4
 8012b9a:	bf88      	it	hi
 8012b9c:	2300      	movhi	r3, #0
 8012b9e:	4418      	add	r0, r3
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	4288      	cmp	r0, r1
 8012ba4:	d305      	bcc.n	8012bb2 <__copybits+0x40>
 8012ba6:	bd70      	pop	{r4, r5, r6, pc}
 8012ba8:	f853 6b04 	ldr.w	r6, [r3], #4
 8012bac:	f845 6f04 	str.w	r6, [r5, #4]!
 8012bb0:	e7eb      	b.n	8012b8a <__copybits+0x18>
 8012bb2:	f840 3b04 	str.w	r3, [r0], #4
 8012bb6:	e7f4      	b.n	8012ba2 <__copybits+0x30>

08012bb8 <__any_on>:
 8012bb8:	f100 0214 	add.w	r2, r0, #20
 8012bbc:	6900      	ldr	r0, [r0, #16]
 8012bbe:	114b      	asrs	r3, r1, #5
 8012bc0:	4298      	cmp	r0, r3
 8012bc2:	b510      	push	{r4, lr}
 8012bc4:	db11      	blt.n	8012bea <__any_on+0x32>
 8012bc6:	dd0a      	ble.n	8012bde <__any_on+0x26>
 8012bc8:	f011 011f 	ands.w	r1, r1, #31
 8012bcc:	d007      	beq.n	8012bde <__any_on+0x26>
 8012bce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012bd2:	fa24 f001 	lsr.w	r0, r4, r1
 8012bd6:	fa00 f101 	lsl.w	r1, r0, r1
 8012bda:	428c      	cmp	r4, r1
 8012bdc:	d10b      	bne.n	8012bf6 <__any_on+0x3e>
 8012bde:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012be2:	4293      	cmp	r3, r2
 8012be4:	d803      	bhi.n	8012bee <__any_on+0x36>
 8012be6:	2000      	movs	r0, #0
 8012be8:	bd10      	pop	{r4, pc}
 8012bea:	4603      	mov	r3, r0
 8012bec:	e7f7      	b.n	8012bde <__any_on+0x26>
 8012bee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012bf2:	2900      	cmp	r1, #0
 8012bf4:	d0f5      	beq.n	8012be2 <__any_on+0x2a>
 8012bf6:	2001      	movs	r0, #1
 8012bf8:	e7f6      	b.n	8012be8 <__any_on+0x30>

08012bfa <_calloc_r>:
 8012bfa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bfc:	fba1 2402 	umull	r2, r4, r1, r2
 8012c00:	b94c      	cbnz	r4, 8012c16 <_calloc_r+0x1c>
 8012c02:	4611      	mov	r1, r2
 8012c04:	9201      	str	r2, [sp, #4]
 8012c06:	f000 f87b 	bl	8012d00 <_malloc_r>
 8012c0a:	9a01      	ldr	r2, [sp, #4]
 8012c0c:	4605      	mov	r5, r0
 8012c0e:	b930      	cbnz	r0, 8012c1e <_calloc_r+0x24>
 8012c10:	4628      	mov	r0, r5
 8012c12:	b003      	add	sp, #12
 8012c14:	bd30      	pop	{r4, r5, pc}
 8012c16:	220c      	movs	r2, #12
 8012c18:	6002      	str	r2, [r0, #0]
 8012c1a:	2500      	movs	r5, #0
 8012c1c:	e7f8      	b.n	8012c10 <_calloc_r+0x16>
 8012c1e:	4621      	mov	r1, r4
 8012c20:	f7fc fbce 	bl	800f3c0 <memset>
 8012c24:	e7f4      	b.n	8012c10 <_calloc_r+0x16>
	...

08012c28 <_free_r>:
 8012c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c2a:	2900      	cmp	r1, #0
 8012c2c:	d044      	beq.n	8012cb8 <_free_r+0x90>
 8012c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c32:	9001      	str	r0, [sp, #4]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	f1a1 0404 	sub.w	r4, r1, #4
 8012c3a:	bfb8      	it	lt
 8012c3c:	18e4      	addlt	r4, r4, r3
 8012c3e:	f000 fab3 	bl	80131a8 <__malloc_lock>
 8012c42:	4a1e      	ldr	r2, [pc, #120]	; (8012cbc <_free_r+0x94>)
 8012c44:	9801      	ldr	r0, [sp, #4]
 8012c46:	6813      	ldr	r3, [r2, #0]
 8012c48:	b933      	cbnz	r3, 8012c58 <_free_r+0x30>
 8012c4a:	6063      	str	r3, [r4, #4]
 8012c4c:	6014      	str	r4, [r2, #0]
 8012c4e:	b003      	add	sp, #12
 8012c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c54:	f000 baae 	b.w	80131b4 <__malloc_unlock>
 8012c58:	42a3      	cmp	r3, r4
 8012c5a:	d908      	bls.n	8012c6e <_free_r+0x46>
 8012c5c:	6825      	ldr	r5, [r4, #0]
 8012c5e:	1961      	adds	r1, r4, r5
 8012c60:	428b      	cmp	r3, r1
 8012c62:	bf01      	itttt	eq
 8012c64:	6819      	ldreq	r1, [r3, #0]
 8012c66:	685b      	ldreq	r3, [r3, #4]
 8012c68:	1949      	addeq	r1, r1, r5
 8012c6a:	6021      	streq	r1, [r4, #0]
 8012c6c:	e7ed      	b.n	8012c4a <_free_r+0x22>
 8012c6e:	461a      	mov	r2, r3
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	b10b      	cbz	r3, 8012c78 <_free_r+0x50>
 8012c74:	42a3      	cmp	r3, r4
 8012c76:	d9fa      	bls.n	8012c6e <_free_r+0x46>
 8012c78:	6811      	ldr	r1, [r2, #0]
 8012c7a:	1855      	adds	r5, r2, r1
 8012c7c:	42a5      	cmp	r5, r4
 8012c7e:	d10b      	bne.n	8012c98 <_free_r+0x70>
 8012c80:	6824      	ldr	r4, [r4, #0]
 8012c82:	4421      	add	r1, r4
 8012c84:	1854      	adds	r4, r2, r1
 8012c86:	42a3      	cmp	r3, r4
 8012c88:	6011      	str	r1, [r2, #0]
 8012c8a:	d1e0      	bne.n	8012c4e <_free_r+0x26>
 8012c8c:	681c      	ldr	r4, [r3, #0]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	6053      	str	r3, [r2, #4]
 8012c92:	4421      	add	r1, r4
 8012c94:	6011      	str	r1, [r2, #0]
 8012c96:	e7da      	b.n	8012c4e <_free_r+0x26>
 8012c98:	d902      	bls.n	8012ca0 <_free_r+0x78>
 8012c9a:	230c      	movs	r3, #12
 8012c9c:	6003      	str	r3, [r0, #0]
 8012c9e:	e7d6      	b.n	8012c4e <_free_r+0x26>
 8012ca0:	6825      	ldr	r5, [r4, #0]
 8012ca2:	1961      	adds	r1, r4, r5
 8012ca4:	428b      	cmp	r3, r1
 8012ca6:	bf04      	itt	eq
 8012ca8:	6819      	ldreq	r1, [r3, #0]
 8012caa:	685b      	ldreq	r3, [r3, #4]
 8012cac:	6063      	str	r3, [r4, #4]
 8012cae:	bf04      	itt	eq
 8012cb0:	1949      	addeq	r1, r1, r5
 8012cb2:	6021      	streq	r1, [r4, #0]
 8012cb4:	6054      	str	r4, [r2, #4]
 8012cb6:	e7ca      	b.n	8012c4e <_free_r+0x26>
 8012cb8:	b003      	add	sp, #12
 8012cba:	bd30      	pop	{r4, r5, pc}
 8012cbc:	20006ba8 	.word	0x20006ba8

08012cc0 <sbrk_aligned>:
 8012cc0:	b570      	push	{r4, r5, r6, lr}
 8012cc2:	4e0e      	ldr	r6, [pc, #56]	; (8012cfc <sbrk_aligned+0x3c>)
 8012cc4:	460c      	mov	r4, r1
 8012cc6:	6831      	ldr	r1, [r6, #0]
 8012cc8:	4605      	mov	r5, r0
 8012cca:	b911      	cbnz	r1, 8012cd2 <sbrk_aligned+0x12>
 8012ccc:	f000 f9f0 	bl	80130b0 <_sbrk_r>
 8012cd0:	6030      	str	r0, [r6, #0]
 8012cd2:	4621      	mov	r1, r4
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	f000 f9eb 	bl	80130b0 <_sbrk_r>
 8012cda:	1c43      	adds	r3, r0, #1
 8012cdc:	d00a      	beq.n	8012cf4 <sbrk_aligned+0x34>
 8012cde:	1cc4      	adds	r4, r0, #3
 8012ce0:	f024 0403 	bic.w	r4, r4, #3
 8012ce4:	42a0      	cmp	r0, r4
 8012ce6:	d007      	beq.n	8012cf8 <sbrk_aligned+0x38>
 8012ce8:	1a21      	subs	r1, r4, r0
 8012cea:	4628      	mov	r0, r5
 8012cec:	f000 f9e0 	bl	80130b0 <_sbrk_r>
 8012cf0:	3001      	adds	r0, #1
 8012cf2:	d101      	bne.n	8012cf8 <sbrk_aligned+0x38>
 8012cf4:	f04f 34ff 	mov.w	r4, #4294967295
 8012cf8:	4620      	mov	r0, r4
 8012cfa:	bd70      	pop	{r4, r5, r6, pc}
 8012cfc:	20006bac 	.word	0x20006bac

08012d00 <_malloc_r>:
 8012d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d04:	1ccd      	adds	r5, r1, #3
 8012d06:	f025 0503 	bic.w	r5, r5, #3
 8012d0a:	3508      	adds	r5, #8
 8012d0c:	2d0c      	cmp	r5, #12
 8012d0e:	bf38      	it	cc
 8012d10:	250c      	movcc	r5, #12
 8012d12:	2d00      	cmp	r5, #0
 8012d14:	4607      	mov	r7, r0
 8012d16:	db01      	blt.n	8012d1c <_malloc_r+0x1c>
 8012d18:	42a9      	cmp	r1, r5
 8012d1a:	d905      	bls.n	8012d28 <_malloc_r+0x28>
 8012d1c:	230c      	movs	r3, #12
 8012d1e:	603b      	str	r3, [r7, #0]
 8012d20:	2600      	movs	r6, #0
 8012d22:	4630      	mov	r0, r6
 8012d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d28:	4e2e      	ldr	r6, [pc, #184]	; (8012de4 <_malloc_r+0xe4>)
 8012d2a:	f000 fa3d 	bl	80131a8 <__malloc_lock>
 8012d2e:	6833      	ldr	r3, [r6, #0]
 8012d30:	461c      	mov	r4, r3
 8012d32:	bb34      	cbnz	r4, 8012d82 <_malloc_r+0x82>
 8012d34:	4629      	mov	r1, r5
 8012d36:	4638      	mov	r0, r7
 8012d38:	f7ff ffc2 	bl	8012cc0 <sbrk_aligned>
 8012d3c:	1c43      	adds	r3, r0, #1
 8012d3e:	4604      	mov	r4, r0
 8012d40:	d14d      	bne.n	8012dde <_malloc_r+0xde>
 8012d42:	6834      	ldr	r4, [r6, #0]
 8012d44:	4626      	mov	r6, r4
 8012d46:	2e00      	cmp	r6, #0
 8012d48:	d140      	bne.n	8012dcc <_malloc_r+0xcc>
 8012d4a:	6823      	ldr	r3, [r4, #0]
 8012d4c:	4631      	mov	r1, r6
 8012d4e:	4638      	mov	r0, r7
 8012d50:	eb04 0803 	add.w	r8, r4, r3
 8012d54:	f000 f9ac 	bl	80130b0 <_sbrk_r>
 8012d58:	4580      	cmp	r8, r0
 8012d5a:	d13a      	bne.n	8012dd2 <_malloc_r+0xd2>
 8012d5c:	6821      	ldr	r1, [r4, #0]
 8012d5e:	3503      	adds	r5, #3
 8012d60:	1a6d      	subs	r5, r5, r1
 8012d62:	f025 0503 	bic.w	r5, r5, #3
 8012d66:	3508      	adds	r5, #8
 8012d68:	2d0c      	cmp	r5, #12
 8012d6a:	bf38      	it	cc
 8012d6c:	250c      	movcc	r5, #12
 8012d6e:	4629      	mov	r1, r5
 8012d70:	4638      	mov	r0, r7
 8012d72:	f7ff ffa5 	bl	8012cc0 <sbrk_aligned>
 8012d76:	3001      	adds	r0, #1
 8012d78:	d02b      	beq.n	8012dd2 <_malloc_r+0xd2>
 8012d7a:	6823      	ldr	r3, [r4, #0]
 8012d7c:	442b      	add	r3, r5
 8012d7e:	6023      	str	r3, [r4, #0]
 8012d80:	e00e      	b.n	8012da0 <_malloc_r+0xa0>
 8012d82:	6822      	ldr	r2, [r4, #0]
 8012d84:	1b52      	subs	r2, r2, r5
 8012d86:	d41e      	bmi.n	8012dc6 <_malloc_r+0xc6>
 8012d88:	2a0b      	cmp	r2, #11
 8012d8a:	d916      	bls.n	8012dba <_malloc_r+0xba>
 8012d8c:	1961      	adds	r1, r4, r5
 8012d8e:	42a3      	cmp	r3, r4
 8012d90:	6025      	str	r5, [r4, #0]
 8012d92:	bf18      	it	ne
 8012d94:	6059      	strne	r1, [r3, #4]
 8012d96:	6863      	ldr	r3, [r4, #4]
 8012d98:	bf08      	it	eq
 8012d9a:	6031      	streq	r1, [r6, #0]
 8012d9c:	5162      	str	r2, [r4, r5]
 8012d9e:	604b      	str	r3, [r1, #4]
 8012da0:	4638      	mov	r0, r7
 8012da2:	f104 060b 	add.w	r6, r4, #11
 8012da6:	f000 fa05 	bl	80131b4 <__malloc_unlock>
 8012daa:	f026 0607 	bic.w	r6, r6, #7
 8012dae:	1d23      	adds	r3, r4, #4
 8012db0:	1af2      	subs	r2, r6, r3
 8012db2:	d0b6      	beq.n	8012d22 <_malloc_r+0x22>
 8012db4:	1b9b      	subs	r3, r3, r6
 8012db6:	50a3      	str	r3, [r4, r2]
 8012db8:	e7b3      	b.n	8012d22 <_malloc_r+0x22>
 8012dba:	6862      	ldr	r2, [r4, #4]
 8012dbc:	42a3      	cmp	r3, r4
 8012dbe:	bf0c      	ite	eq
 8012dc0:	6032      	streq	r2, [r6, #0]
 8012dc2:	605a      	strne	r2, [r3, #4]
 8012dc4:	e7ec      	b.n	8012da0 <_malloc_r+0xa0>
 8012dc6:	4623      	mov	r3, r4
 8012dc8:	6864      	ldr	r4, [r4, #4]
 8012dca:	e7b2      	b.n	8012d32 <_malloc_r+0x32>
 8012dcc:	4634      	mov	r4, r6
 8012dce:	6876      	ldr	r6, [r6, #4]
 8012dd0:	e7b9      	b.n	8012d46 <_malloc_r+0x46>
 8012dd2:	230c      	movs	r3, #12
 8012dd4:	603b      	str	r3, [r7, #0]
 8012dd6:	4638      	mov	r0, r7
 8012dd8:	f000 f9ec 	bl	80131b4 <__malloc_unlock>
 8012ddc:	e7a1      	b.n	8012d22 <_malloc_r+0x22>
 8012dde:	6025      	str	r5, [r4, #0]
 8012de0:	e7de      	b.n	8012da0 <_malloc_r+0xa0>
 8012de2:	bf00      	nop
 8012de4:	20006ba8 	.word	0x20006ba8

08012de8 <__ssputs_r>:
 8012de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012dec:	688e      	ldr	r6, [r1, #8]
 8012dee:	429e      	cmp	r6, r3
 8012df0:	4682      	mov	sl, r0
 8012df2:	460c      	mov	r4, r1
 8012df4:	4690      	mov	r8, r2
 8012df6:	461f      	mov	r7, r3
 8012df8:	d838      	bhi.n	8012e6c <__ssputs_r+0x84>
 8012dfa:	898a      	ldrh	r2, [r1, #12]
 8012dfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e00:	d032      	beq.n	8012e68 <__ssputs_r+0x80>
 8012e02:	6825      	ldr	r5, [r4, #0]
 8012e04:	6909      	ldr	r1, [r1, #16]
 8012e06:	eba5 0901 	sub.w	r9, r5, r1
 8012e0a:	6965      	ldr	r5, [r4, #20]
 8012e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e14:	3301      	adds	r3, #1
 8012e16:	444b      	add	r3, r9
 8012e18:	106d      	asrs	r5, r5, #1
 8012e1a:	429d      	cmp	r5, r3
 8012e1c:	bf38      	it	cc
 8012e1e:	461d      	movcc	r5, r3
 8012e20:	0553      	lsls	r3, r2, #21
 8012e22:	d531      	bpl.n	8012e88 <__ssputs_r+0xa0>
 8012e24:	4629      	mov	r1, r5
 8012e26:	f7ff ff6b 	bl	8012d00 <_malloc_r>
 8012e2a:	4606      	mov	r6, r0
 8012e2c:	b950      	cbnz	r0, 8012e44 <__ssputs_r+0x5c>
 8012e2e:	230c      	movs	r3, #12
 8012e30:	f8ca 3000 	str.w	r3, [sl]
 8012e34:	89a3      	ldrh	r3, [r4, #12]
 8012e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e3a:	81a3      	strh	r3, [r4, #12]
 8012e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8012e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e44:	6921      	ldr	r1, [r4, #16]
 8012e46:	464a      	mov	r2, r9
 8012e48:	f7fc faac 	bl	800f3a4 <memcpy>
 8012e4c:	89a3      	ldrh	r3, [r4, #12]
 8012e4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e56:	81a3      	strh	r3, [r4, #12]
 8012e58:	6126      	str	r6, [r4, #16]
 8012e5a:	6165      	str	r5, [r4, #20]
 8012e5c:	444e      	add	r6, r9
 8012e5e:	eba5 0509 	sub.w	r5, r5, r9
 8012e62:	6026      	str	r6, [r4, #0]
 8012e64:	60a5      	str	r5, [r4, #8]
 8012e66:	463e      	mov	r6, r7
 8012e68:	42be      	cmp	r6, r7
 8012e6a:	d900      	bls.n	8012e6e <__ssputs_r+0x86>
 8012e6c:	463e      	mov	r6, r7
 8012e6e:	6820      	ldr	r0, [r4, #0]
 8012e70:	4632      	mov	r2, r6
 8012e72:	4641      	mov	r1, r8
 8012e74:	f000 f97e 	bl	8013174 <memmove>
 8012e78:	68a3      	ldr	r3, [r4, #8]
 8012e7a:	1b9b      	subs	r3, r3, r6
 8012e7c:	60a3      	str	r3, [r4, #8]
 8012e7e:	6823      	ldr	r3, [r4, #0]
 8012e80:	4433      	add	r3, r6
 8012e82:	6023      	str	r3, [r4, #0]
 8012e84:	2000      	movs	r0, #0
 8012e86:	e7db      	b.n	8012e40 <__ssputs_r+0x58>
 8012e88:	462a      	mov	r2, r5
 8012e8a:	f000 f999 	bl	80131c0 <_realloc_r>
 8012e8e:	4606      	mov	r6, r0
 8012e90:	2800      	cmp	r0, #0
 8012e92:	d1e1      	bne.n	8012e58 <__ssputs_r+0x70>
 8012e94:	6921      	ldr	r1, [r4, #16]
 8012e96:	4650      	mov	r0, sl
 8012e98:	f7ff fec6 	bl	8012c28 <_free_r>
 8012e9c:	e7c7      	b.n	8012e2e <__ssputs_r+0x46>
	...

08012ea0 <_svfiprintf_r>:
 8012ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ea4:	4698      	mov	r8, r3
 8012ea6:	898b      	ldrh	r3, [r1, #12]
 8012ea8:	061b      	lsls	r3, r3, #24
 8012eaa:	b09d      	sub	sp, #116	; 0x74
 8012eac:	4607      	mov	r7, r0
 8012eae:	460d      	mov	r5, r1
 8012eb0:	4614      	mov	r4, r2
 8012eb2:	d50e      	bpl.n	8012ed2 <_svfiprintf_r+0x32>
 8012eb4:	690b      	ldr	r3, [r1, #16]
 8012eb6:	b963      	cbnz	r3, 8012ed2 <_svfiprintf_r+0x32>
 8012eb8:	2140      	movs	r1, #64	; 0x40
 8012eba:	f7ff ff21 	bl	8012d00 <_malloc_r>
 8012ebe:	6028      	str	r0, [r5, #0]
 8012ec0:	6128      	str	r0, [r5, #16]
 8012ec2:	b920      	cbnz	r0, 8012ece <_svfiprintf_r+0x2e>
 8012ec4:	230c      	movs	r3, #12
 8012ec6:	603b      	str	r3, [r7, #0]
 8012ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ecc:	e0d1      	b.n	8013072 <_svfiprintf_r+0x1d2>
 8012ece:	2340      	movs	r3, #64	; 0x40
 8012ed0:	616b      	str	r3, [r5, #20]
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ed6:	2320      	movs	r3, #32
 8012ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ee0:	2330      	movs	r3, #48	; 0x30
 8012ee2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801308c <_svfiprintf_r+0x1ec>
 8012ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012eea:	f04f 0901 	mov.w	r9, #1
 8012eee:	4623      	mov	r3, r4
 8012ef0:	469a      	mov	sl, r3
 8012ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ef6:	b10a      	cbz	r2, 8012efc <_svfiprintf_r+0x5c>
 8012ef8:	2a25      	cmp	r2, #37	; 0x25
 8012efa:	d1f9      	bne.n	8012ef0 <_svfiprintf_r+0x50>
 8012efc:	ebba 0b04 	subs.w	fp, sl, r4
 8012f00:	d00b      	beq.n	8012f1a <_svfiprintf_r+0x7a>
 8012f02:	465b      	mov	r3, fp
 8012f04:	4622      	mov	r2, r4
 8012f06:	4629      	mov	r1, r5
 8012f08:	4638      	mov	r0, r7
 8012f0a:	f7ff ff6d 	bl	8012de8 <__ssputs_r>
 8012f0e:	3001      	adds	r0, #1
 8012f10:	f000 80aa 	beq.w	8013068 <_svfiprintf_r+0x1c8>
 8012f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f16:	445a      	add	r2, fp
 8012f18:	9209      	str	r2, [sp, #36]	; 0x24
 8012f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	f000 80a2 	beq.w	8013068 <_svfiprintf_r+0x1c8>
 8012f24:	2300      	movs	r3, #0
 8012f26:	f04f 32ff 	mov.w	r2, #4294967295
 8012f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f2e:	f10a 0a01 	add.w	sl, sl, #1
 8012f32:	9304      	str	r3, [sp, #16]
 8012f34:	9307      	str	r3, [sp, #28]
 8012f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8012f3c:	4654      	mov	r4, sl
 8012f3e:	2205      	movs	r2, #5
 8012f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f44:	4851      	ldr	r0, [pc, #324]	; (801308c <_svfiprintf_r+0x1ec>)
 8012f46:	f7ed f95b 	bl	8000200 <memchr>
 8012f4a:	9a04      	ldr	r2, [sp, #16]
 8012f4c:	b9d8      	cbnz	r0, 8012f86 <_svfiprintf_r+0xe6>
 8012f4e:	06d0      	lsls	r0, r2, #27
 8012f50:	bf44      	itt	mi
 8012f52:	2320      	movmi	r3, #32
 8012f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f58:	0711      	lsls	r1, r2, #28
 8012f5a:	bf44      	itt	mi
 8012f5c:	232b      	movmi	r3, #43	; 0x2b
 8012f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f62:	f89a 3000 	ldrb.w	r3, [sl]
 8012f66:	2b2a      	cmp	r3, #42	; 0x2a
 8012f68:	d015      	beq.n	8012f96 <_svfiprintf_r+0xf6>
 8012f6a:	9a07      	ldr	r2, [sp, #28]
 8012f6c:	4654      	mov	r4, sl
 8012f6e:	2000      	movs	r0, #0
 8012f70:	f04f 0c0a 	mov.w	ip, #10
 8012f74:	4621      	mov	r1, r4
 8012f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f7a:	3b30      	subs	r3, #48	; 0x30
 8012f7c:	2b09      	cmp	r3, #9
 8012f7e:	d94e      	bls.n	801301e <_svfiprintf_r+0x17e>
 8012f80:	b1b0      	cbz	r0, 8012fb0 <_svfiprintf_r+0x110>
 8012f82:	9207      	str	r2, [sp, #28]
 8012f84:	e014      	b.n	8012fb0 <_svfiprintf_r+0x110>
 8012f86:	eba0 0308 	sub.w	r3, r0, r8
 8012f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8012f8e:	4313      	orrs	r3, r2
 8012f90:	9304      	str	r3, [sp, #16]
 8012f92:	46a2      	mov	sl, r4
 8012f94:	e7d2      	b.n	8012f3c <_svfiprintf_r+0x9c>
 8012f96:	9b03      	ldr	r3, [sp, #12]
 8012f98:	1d19      	adds	r1, r3, #4
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	9103      	str	r1, [sp, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	bfbb      	ittet	lt
 8012fa2:	425b      	neglt	r3, r3
 8012fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8012fa8:	9307      	strge	r3, [sp, #28]
 8012faa:	9307      	strlt	r3, [sp, #28]
 8012fac:	bfb8      	it	lt
 8012fae:	9204      	strlt	r2, [sp, #16]
 8012fb0:	7823      	ldrb	r3, [r4, #0]
 8012fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8012fb4:	d10c      	bne.n	8012fd0 <_svfiprintf_r+0x130>
 8012fb6:	7863      	ldrb	r3, [r4, #1]
 8012fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8012fba:	d135      	bne.n	8013028 <_svfiprintf_r+0x188>
 8012fbc:	9b03      	ldr	r3, [sp, #12]
 8012fbe:	1d1a      	adds	r2, r3, #4
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	9203      	str	r2, [sp, #12]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	bfb8      	it	lt
 8012fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012fcc:	3402      	adds	r4, #2
 8012fce:	9305      	str	r3, [sp, #20]
 8012fd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801309c <_svfiprintf_r+0x1fc>
 8012fd4:	7821      	ldrb	r1, [r4, #0]
 8012fd6:	2203      	movs	r2, #3
 8012fd8:	4650      	mov	r0, sl
 8012fda:	f7ed f911 	bl	8000200 <memchr>
 8012fde:	b140      	cbz	r0, 8012ff2 <_svfiprintf_r+0x152>
 8012fe0:	2340      	movs	r3, #64	; 0x40
 8012fe2:	eba0 000a 	sub.w	r0, r0, sl
 8012fe6:	fa03 f000 	lsl.w	r0, r3, r0
 8012fea:	9b04      	ldr	r3, [sp, #16]
 8012fec:	4303      	orrs	r3, r0
 8012fee:	3401      	adds	r4, #1
 8012ff0:	9304      	str	r3, [sp, #16]
 8012ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ff6:	4826      	ldr	r0, [pc, #152]	; (8013090 <_svfiprintf_r+0x1f0>)
 8012ff8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ffc:	2206      	movs	r2, #6
 8012ffe:	f7ed f8ff 	bl	8000200 <memchr>
 8013002:	2800      	cmp	r0, #0
 8013004:	d038      	beq.n	8013078 <_svfiprintf_r+0x1d8>
 8013006:	4b23      	ldr	r3, [pc, #140]	; (8013094 <_svfiprintf_r+0x1f4>)
 8013008:	bb1b      	cbnz	r3, 8013052 <_svfiprintf_r+0x1b2>
 801300a:	9b03      	ldr	r3, [sp, #12]
 801300c:	3307      	adds	r3, #7
 801300e:	f023 0307 	bic.w	r3, r3, #7
 8013012:	3308      	adds	r3, #8
 8013014:	9303      	str	r3, [sp, #12]
 8013016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013018:	4433      	add	r3, r6
 801301a:	9309      	str	r3, [sp, #36]	; 0x24
 801301c:	e767      	b.n	8012eee <_svfiprintf_r+0x4e>
 801301e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013022:	460c      	mov	r4, r1
 8013024:	2001      	movs	r0, #1
 8013026:	e7a5      	b.n	8012f74 <_svfiprintf_r+0xd4>
 8013028:	2300      	movs	r3, #0
 801302a:	3401      	adds	r4, #1
 801302c:	9305      	str	r3, [sp, #20]
 801302e:	4619      	mov	r1, r3
 8013030:	f04f 0c0a 	mov.w	ip, #10
 8013034:	4620      	mov	r0, r4
 8013036:	f810 2b01 	ldrb.w	r2, [r0], #1
 801303a:	3a30      	subs	r2, #48	; 0x30
 801303c:	2a09      	cmp	r2, #9
 801303e:	d903      	bls.n	8013048 <_svfiprintf_r+0x1a8>
 8013040:	2b00      	cmp	r3, #0
 8013042:	d0c5      	beq.n	8012fd0 <_svfiprintf_r+0x130>
 8013044:	9105      	str	r1, [sp, #20]
 8013046:	e7c3      	b.n	8012fd0 <_svfiprintf_r+0x130>
 8013048:	fb0c 2101 	mla	r1, ip, r1, r2
 801304c:	4604      	mov	r4, r0
 801304e:	2301      	movs	r3, #1
 8013050:	e7f0      	b.n	8013034 <_svfiprintf_r+0x194>
 8013052:	ab03      	add	r3, sp, #12
 8013054:	9300      	str	r3, [sp, #0]
 8013056:	462a      	mov	r2, r5
 8013058:	4b0f      	ldr	r3, [pc, #60]	; (8013098 <_svfiprintf_r+0x1f8>)
 801305a:	a904      	add	r1, sp, #16
 801305c:	4638      	mov	r0, r7
 801305e:	f7fc fa57 	bl	800f510 <_printf_float>
 8013062:	1c42      	adds	r2, r0, #1
 8013064:	4606      	mov	r6, r0
 8013066:	d1d6      	bne.n	8013016 <_svfiprintf_r+0x176>
 8013068:	89ab      	ldrh	r3, [r5, #12]
 801306a:	065b      	lsls	r3, r3, #25
 801306c:	f53f af2c 	bmi.w	8012ec8 <_svfiprintf_r+0x28>
 8013070:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013072:	b01d      	add	sp, #116	; 0x74
 8013074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013078:	ab03      	add	r3, sp, #12
 801307a:	9300      	str	r3, [sp, #0]
 801307c:	462a      	mov	r2, r5
 801307e:	4b06      	ldr	r3, [pc, #24]	; (8013098 <_svfiprintf_r+0x1f8>)
 8013080:	a904      	add	r1, sp, #16
 8013082:	4638      	mov	r0, r7
 8013084:	f7fc fce8 	bl	800fa58 <_printf_i>
 8013088:	e7eb      	b.n	8013062 <_svfiprintf_r+0x1c2>
 801308a:	bf00      	nop
 801308c:	08015cac 	.word	0x08015cac
 8013090:	08015cb6 	.word	0x08015cb6
 8013094:	0800f511 	.word	0x0800f511
 8013098:	08012de9 	.word	0x08012de9
 801309c:	08015cb2 	.word	0x08015cb2

080130a0 <nan>:
 80130a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80130a8 <nan+0x8>
 80130a4:	4770      	bx	lr
 80130a6:	bf00      	nop
 80130a8:	00000000 	.word	0x00000000
 80130ac:	7ff80000 	.word	0x7ff80000

080130b0 <_sbrk_r>:
 80130b0:	b538      	push	{r3, r4, r5, lr}
 80130b2:	4d06      	ldr	r5, [pc, #24]	; (80130cc <_sbrk_r+0x1c>)
 80130b4:	2300      	movs	r3, #0
 80130b6:	4604      	mov	r4, r0
 80130b8:	4608      	mov	r0, r1
 80130ba:	602b      	str	r3, [r5, #0]
 80130bc:	f7ee fd9a 	bl	8001bf4 <_sbrk>
 80130c0:	1c43      	adds	r3, r0, #1
 80130c2:	d102      	bne.n	80130ca <_sbrk_r+0x1a>
 80130c4:	682b      	ldr	r3, [r5, #0]
 80130c6:	b103      	cbz	r3, 80130ca <_sbrk_r+0x1a>
 80130c8:	6023      	str	r3, [r4, #0]
 80130ca:	bd38      	pop	{r3, r4, r5, pc}
 80130cc:	20006bb0 	.word	0x20006bb0

080130d0 <strncmp>:
 80130d0:	b510      	push	{r4, lr}
 80130d2:	b17a      	cbz	r2, 80130f4 <strncmp+0x24>
 80130d4:	4603      	mov	r3, r0
 80130d6:	3901      	subs	r1, #1
 80130d8:	1884      	adds	r4, r0, r2
 80130da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80130de:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80130e2:	4290      	cmp	r0, r2
 80130e4:	d101      	bne.n	80130ea <strncmp+0x1a>
 80130e6:	42a3      	cmp	r3, r4
 80130e8:	d101      	bne.n	80130ee <strncmp+0x1e>
 80130ea:	1a80      	subs	r0, r0, r2
 80130ec:	bd10      	pop	{r4, pc}
 80130ee:	2800      	cmp	r0, #0
 80130f0:	d1f3      	bne.n	80130da <strncmp+0xa>
 80130f2:	e7fa      	b.n	80130ea <strncmp+0x1a>
 80130f4:	4610      	mov	r0, r2
 80130f6:	e7f9      	b.n	80130ec <strncmp+0x1c>

080130f8 <__ascii_wctomb>:
 80130f8:	b149      	cbz	r1, 801310e <__ascii_wctomb+0x16>
 80130fa:	2aff      	cmp	r2, #255	; 0xff
 80130fc:	bf85      	ittet	hi
 80130fe:	238a      	movhi	r3, #138	; 0x8a
 8013100:	6003      	strhi	r3, [r0, #0]
 8013102:	700a      	strbls	r2, [r1, #0]
 8013104:	f04f 30ff 	movhi.w	r0, #4294967295
 8013108:	bf98      	it	ls
 801310a:	2001      	movls	r0, #1
 801310c:	4770      	bx	lr
 801310e:	4608      	mov	r0, r1
 8013110:	4770      	bx	lr
	...

08013114 <__assert_func>:
 8013114:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013116:	4614      	mov	r4, r2
 8013118:	461a      	mov	r2, r3
 801311a:	4b09      	ldr	r3, [pc, #36]	; (8013140 <__assert_func+0x2c>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4605      	mov	r5, r0
 8013120:	68d8      	ldr	r0, [r3, #12]
 8013122:	b14c      	cbz	r4, 8013138 <__assert_func+0x24>
 8013124:	4b07      	ldr	r3, [pc, #28]	; (8013144 <__assert_func+0x30>)
 8013126:	9100      	str	r1, [sp, #0]
 8013128:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801312c:	4906      	ldr	r1, [pc, #24]	; (8013148 <__assert_func+0x34>)
 801312e:	462b      	mov	r3, r5
 8013130:	f000 f80e 	bl	8013150 <fiprintf>
 8013134:	f000 fa8c 	bl	8013650 <abort>
 8013138:	4b04      	ldr	r3, [pc, #16]	; (801314c <__assert_func+0x38>)
 801313a:	461c      	mov	r4, r3
 801313c:	e7f3      	b.n	8013126 <__assert_func+0x12>
 801313e:	bf00      	nop
 8013140:	2000017c 	.word	0x2000017c
 8013144:	08015cbd 	.word	0x08015cbd
 8013148:	08015cca 	.word	0x08015cca
 801314c:	08015cf8 	.word	0x08015cf8

08013150 <fiprintf>:
 8013150:	b40e      	push	{r1, r2, r3}
 8013152:	b503      	push	{r0, r1, lr}
 8013154:	4601      	mov	r1, r0
 8013156:	ab03      	add	r3, sp, #12
 8013158:	4805      	ldr	r0, [pc, #20]	; (8013170 <fiprintf+0x20>)
 801315a:	f853 2b04 	ldr.w	r2, [r3], #4
 801315e:	6800      	ldr	r0, [r0, #0]
 8013160:	9301      	str	r3, [sp, #4]
 8013162:	f000 f885 	bl	8013270 <_vfiprintf_r>
 8013166:	b002      	add	sp, #8
 8013168:	f85d eb04 	ldr.w	lr, [sp], #4
 801316c:	b003      	add	sp, #12
 801316e:	4770      	bx	lr
 8013170:	2000017c 	.word	0x2000017c

08013174 <memmove>:
 8013174:	4288      	cmp	r0, r1
 8013176:	b510      	push	{r4, lr}
 8013178:	eb01 0402 	add.w	r4, r1, r2
 801317c:	d902      	bls.n	8013184 <memmove+0x10>
 801317e:	4284      	cmp	r4, r0
 8013180:	4623      	mov	r3, r4
 8013182:	d807      	bhi.n	8013194 <memmove+0x20>
 8013184:	1e43      	subs	r3, r0, #1
 8013186:	42a1      	cmp	r1, r4
 8013188:	d008      	beq.n	801319c <memmove+0x28>
 801318a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801318e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013192:	e7f8      	b.n	8013186 <memmove+0x12>
 8013194:	4402      	add	r2, r0
 8013196:	4601      	mov	r1, r0
 8013198:	428a      	cmp	r2, r1
 801319a:	d100      	bne.n	801319e <memmove+0x2a>
 801319c:	bd10      	pop	{r4, pc}
 801319e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80131a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80131a6:	e7f7      	b.n	8013198 <memmove+0x24>

080131a8 <__malloc_lock>:
 80131a8:	4801      	ldr	r0, [pc, #4]	; (80131b0 <__malloc_lock+0x8>)
 80131aa:	f000 bc11 	b.w	80139d0 <__retarget_lock_acquire_recursive>
 80131ae:	bf00      	nop
 80131b0:	20006bb4 	.word	0x20006bb4

080131b4 <__malloc_unlock>:
 80131b4:	4801      	ldr	r0, [pc, #4]	; (80131bc <__malloc_unlock+0x8>)
 80131b6:	f000 bc0c 	b.w	80139d2 <__retarget_lock_release_recursive>
 80131ba:	bf00      	nop
 80131bc:	20006bb4 	.word	0x20006bb4

080131c0 <_realloc_r>:
 80131c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131c4:	4680      	mov	r8, r0
 80131c6:	4614      	mov	r4, r2
 80131c8:	460e      	mov	r6, r1
 80131ca:	b921      	cbnz	r1, 80131d6 <_realloc_r+0x16>
 80131cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131d0:	4611      	mov	r1, r2
 80131d2:	f7ff bd95 	b.w	8012d00 <_malloc_r>
 80131d6:	b92a      	cbnz	r2, 80131e4 <_realloc_r+0x24>
 80131d8:	f7ff fd26 	bl	8012c28 <_free_r>
 80131dc:	4625      	mov	r5, r4
 80131de:	4628      	mov	r0, r5
 80131e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131e4:	f000 fc5c 	bl	8013aa0 <_malloc_usable_size_r>
 80131e8:	4284      	cmp	r4, r0
 80131ea:	4607      	mov	r7, r0
 80131ec:	d802      	bhi.n	80131f4 <_realloc_r+0x34>
 80131ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80131f2:	d812      	bhi.n	801321a <_realloc_r+0x5a>
 80131f4:	4621      	mov	r1, r4
 80131f6:	4640      	mov	r0, r8
 80131f8:	f7ff fd82 	bl	8012d00 <_malloc_r>
 80131fc:	4605      	mov	r5, r0
 80131fe:	2800      	cmp	r0, #0
 8013200:	d0ed      	beq.n	80131de <_realloc_r+0x1e>
 8013202:	42bc      	cmp	r4, r7
 8013204:	4622      	mov	r2, r4
 8013206:	4631      	mov	r1, r6
 8013208:	bf28      	it	cs
 801320a:	463a      	movcs	r2, r7
 801320c:	f7fc f8ca 	bl	800f3a4 <memcpy>
 8013210:	4631      	mov	r1, r6
 8013212:	4640      	mov	r0, r8
 8013214:	f7ff fd08 	bl	8012c28 <_free_r>
 8013218:	e7e1      	b.n	80131de <_realloc_r+0x1e>
 801321a:	4635      	mov	r5, r6
 801321c:	e7df      	b.n	80131de <_realloc_r+0x1e>

0801321e <__sfputc_r>:
 801321e:	6893      	ldr	r3, [r2, #8]
 8013220:	3b01      	subs	r3, #1
 8013222:	2b00      	cmp	r3, #0
 8013224:	b410      	push	{r4}
 8013226:	6093      	str	r3, [r2, #8]
 8013228:	da08      	bge.n	801323c <__sfputc_r+0x1e>
 801322a:	6994      	ldr	r4, [r2, #24]
 801322c:	42a3      	cmp	r3, r4
 801322e:	db01      	blt.n	8013234 <__sfputc_r+0x16>
 8013230:	290a      	cmp	r1, #10
 8013232:	d103      	bne.n	801323c <__sfputc_r+0x1e>
 8013234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013238:	f000 b94a 	b.w	80134d0 <__swbuf_r>
 801323c:	6813      	ldr	r3, [r2, #0]
 801323e:	1c58      	adds	r0, r3, #1
 8013240:	6010      	str	r0, [r2, #0]
 8013242:	7019      	strb	r1, [r3, #0]
 8013244:	4608      	mov	r0, r1
 8013246:	f85d 4b04 	ldr.w	r4, [sp], #4
 801324a:	4770      	bx	lr

0801324c <__sfputs_r>:
 801324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801324e:	4606      	mov	r6, r0
 8013250:	460f      	mov	r7, r1
 8013252:	4614      	mov	r4, r2
 8013254:	18d5      	adds	r5, r2, r3
 8013256:	42ac      	cmp	r4, r5
 8013258:	d101      	bne.n	801325e <__sfputs_r+0x12>
 801325a:	2000      	movs	r0, #0
 801325c:	e007      	b.n	801326e <__sfputs_r+0x22>
 801325e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013262:	463a      	mov	r2, r7
 8013264:	4630      	mov	r0, r6
 8013266:	f7ff ffda 	bl	801321e <__sfputc_r>
 801326a:	1c43      	adds	r3, r0, #1
 801326c:	d1f3      	bne.n	8013256 <__sfputs_r+0xa>
 801326e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013270 <_vfiprintf_r>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	460d      	mov	r5, r1
 8013276:	b09d      	sub	sp, #116	; 0x74
 8013278:	4614      	mov	r4, r2
 801327a:	4698      	mov	r8, r3
 801327c:	4606      	mov	r6, r0
 801327e:	b118      	cbz	r0, 8013288 <_vfiprintf_r+0x18>
 8013280:	6983      	ldr	r3, [r0, #24]
 8013282:	b90b      	cbnz	r3, 8013288 <_vfiprintf_r+0x18>
 8013284:	f000 fb06 	bl	8013894 <__sinit>
 8013288:	4b89      	ldr	r3, [pc, #548]	; (80134b0 <_vfiprintf_r+0x240>)
 801328a:	429d      	cmp	r5, r3
 801328c:	d11b      	bne.n	80132c6 <_vfiprintf_r+0x56>
 801328e:	6875      	ldr	r5, [r6, #4]
 8013290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013292:	07d9      	lsls	r1, r3, #31
 8013294:	d405      	bmi.n	80132a2 <_vfiprintf_r+0x32>
 8013296:	89ab      	ldrh	r3, [r5, #12]
 8013298:	059a      	lsls	r2, r3, #22
 801329a:	d402      	bmi.n	80132a2 <_vfiprintf_r+0x32>
 801329c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801329e:	f000 fb97 	bl	80139d0 <__retarget_lock_acquire_recursive>
 80132a2:	89ab      	ldrh	r3, [r5, #12]
 80132a4:	071b      	lsls	r3, r3, #28
 80132a6:	d501      	bpl.n	80132ac <_vfiprintf_r+0x3c>
 80132a8:	692b      	ldr	r3, [r5, #16]
 80132aa:	b9eb      	cbnz	r3, 80132e8 <_vfiprintf_r+0x78>
 80132ac:	4629      	mov	r1, r5
 80132ae:	4630      	mov	r0, r6
 80132b0:	f000 f960 	bl	8013574 <__swsetup_r>
 80132b4:	b1c0      	cbz	r0, 80132e8 <_vfiprintf_r+0x78>
 80132b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132b8:	07dc      	lsls	r4, r3, #31
 80132ba:	d50e      	bpl.n	80132da <_vfiprintf_r+0x6a>
 80132bc:	f04f 30ff 	mov.w	r0, #4294967295
 80132c0:	b01d      	add	sp, #116	; 0x74
 80132c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c6:	4b7b      	ldr	r3, [pc, #492]	; (80134b4 <_vfiprintf_r+0x244>)
 80132c8:	429d      	cmp	r5, r3
 80132ca:	d101      	bne.n	80132d0 <_vfiprintf_r+0x60>
 80132cc:	68b5      	ldr	r5, [r6, #8]
 80132ce:	e7df      	b.n	8013290 <_vfiprintf_r+0x20>
 80132d0:	4b79      	ldr	r3, [pc, #484]	; (80134b8 <_vfiprintf_r+0x248>)
 80132d2:	429d      	cmp	r5, r3
 80132d4:	bf08      	it	eq
 80132d6:	68f5      	ldreq	r5, [r6, #12]
 80132d8:	e7da      	b.n	8013290 <_vfiprintf_r+0x20>
 80132da:	89ab      	ldrh	r3, [r5, #12]
 80132dc:	0598      	lsls	r0, r3, #22
 80132de:	d4ed      	bmi.n	80132bc <_vfiprintf_r+0x4c>
 80132e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132e2:	f000 fb76 	bl	80139d2 <__retarget_lock_release_recursive>
 80132e6:	e7e9      	b.n	80132bc <_vfiprintf_r+0x4c>
 80132e8:	2300      	movs	r3, #0
 80132ea:	9309      	str	r3, [sp, #36]	; 0x24
 80132ec:	2320      	movs	r3, #32
 80132ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80132f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80132f6:	2330      	movs	r3, #48	; 0x30
 80132f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80134bc <_vfiprintf_r+0x24c>
 80132fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013300:	f04f 0901 	mov.w	r9, #1
 8013304:	4623      	mov	r3, r4
 8013306:	469a      	mov	sl, r3
 8013308:	f813 2b01 	ldrb.w	r2, [r3], #1
 801330c:	b10a      	cbz	r2, 8013312 <_vfiprintf_r+0xa2>
 801330e:	2a25      	cmp	r2, #37	; 0x25
 8013310:	d1f9      	bne.n	8013306 <_vfiprintf_r+0x96>
 8013312:	ebba 0b04 	subs.w	fp, sl, r4
 8013316:	d00b      	beq.n	8013330 <_vfiprintf_r+0xc0>
 8013318:	465b      	mov	r3, fp
 801331a:	4622      	mov	r2, r4
 801331c:	4629      	mov	r1, r5
 801331e:	4630      	mov	r0, r6
 8013320:	f7ff ff94 	bl	801324c <__sfputs_r>
 8013324:	3001      	adds	r0, #1
 8013326:	f000 80aa 	beq.w	801347e <_vfiprintf_r+0x20e>
 801332a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801332c:	445a      	add	r2, fp
 801332e:	9209      	str	r2, [sp, #36]	; 0x24
 8013330:	f89a 3000 	ldrb.w	r3, [sl]
 8013334:	2b00      	cmp	r3, #0
 8013336:	f000 80a2 	beq.w	801347e <_vfiprintf_r+0x20e>
 801333a:	2300      	movs	r3, #0
 801333c:	f04f 32ff 	mov.w	r2, #4294967295
 8013340:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013344:	f10a 0a01 	add.w	sl, sl, #1
 8013348:	9304      	str	r3, [sp, #16]
 801334a:	9307      	str	r3, [sp, #28]
 801334c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013350:	931a      	str	r3, [sp, #104]	; 0x68
 8013352:	4654      	mov	r4, sl
 8013354:	2205      	movs	r2, #5
 8013356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801335a:	4858      	ldr	r0, [pc, #352]	; (80134bc <_vfiprintf_r+0x24c>)
 801335c:	f7ec ff50 	bl	8000200 <memchr>
 8013360:	9a04      	ldr	r2, [sp, #16]
 8013362:	b9d8      	cbnz	r0, 801339c <_vfiprintf_r+0x12c>
 8013364:	06d1      	lsls	r1, r2, #27
 8013366:	bf44      	itt	mi
 8013368:	2320      	movmi	r3, #32
 801336a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801336e:	0713      	lsls	r3, r2, #28
 8013370:	bf44      	itt	mi
 8013372:	232b      	movmi	r3, #43	; 0x2b
 8013374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013378:	f89a 3000 	ldrb.w	r3, [sl]
 801337c:	2b2a      	cmp	r3, #42	; 0x2a
 801337e:	d015      	beq.n	80133ac <_vfiprintf_r+0x13c>
 8013380:	9a07      	ldr	r2, [sp, #28]
 8013382:	4654      	mov	r4, sl
 8013384:	2000      	movs	r0, #0
 8013386:	f04f 0c0a 	mov.w	ip, #10
 801338a:	4621      	mov	r1, r4
 801338c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013390:	3b30      	subs	r3, #48	; 0x30
 8013392:	2b09      	cmp	r3, #9
 8013394:	d94e      	bls.n	8013434 <_vfiprintf_r+0x1c4>
 8013396:	b1b0      	cbz	r0, 80133c6 <_vfiprintf_r+0x156>
 8013398:	9207      	str	r2, [sp, #28]
 801339a:	e014      	b.n	80133c6 <_vfiprintf_r+0x156>
 801339c:	eba0 0308 	sub.w	r3, r0, r8
 80133a0:	fa09 f303 	lsl.w	r3, r9, r3
 80133a4:	4313      	orrs	r3, r2
 80133a6:	9304      	str	r3, [sp, #16]
 80133a8:	46a2      	mov	sl, r4
 80133aa:	e7d2      	b.n	8013352 <_vfiprintf_r+0xe2>
 80133ac:	9b03      	ldr	r3, [sp, #12]
 80133ae:	1d19      	adds	r1, r3, #4
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	9103      	str	r1, [sp, #12]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	bfbb      	ittet	lt
 80133b8:	425b      	neglt	r3, r3
 80133ba:	f042 0202 	orrlt.w	r2, r2, #2
 80133be:	9307      	strge	r3, [sp, #28]
 80133c0:	9307      	strlt	r3, [sp, #28]
 80133c2:	bfb8      	it	lt
 80133c4:	9204      	strlt	r2, [sp, #16]
 80133c6:	7823      	ldrb	r3, [r4, #0]
 80133c8:	2b2e      	cmp	r3, #46	; 0x2e
 80133ca:	d10c      	bne.n	80133e6 <_vfiprintf_r+0x176>
 80133cc:	7863      	ldrb	r3, [r4, #1]
 80133ce:	2b2a      	cmp	r3, #42	; 0x2a
 80133d0:	d135      	bne.n	801343e <_vfiprintf_r+0x1ce>
 80133d2:	9b03      	ldr	r3, [sp, #12]
 80133d4:	1d1a      	adds	r2, r3, #4
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	9203      	str	r2, [sp, #12]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	bfb8      	it	lt
 80133de:	f04f 33ff 	movlt.w	r3, #4294967295
 80133e2:	3402      	adds	r4, #2
 80133e4:	9305      	str	r3, [sp, #20]
 80133e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80134cc <_vfiprintf_r+0x25c>
 80133ea:	7821      	ldrb	r1, [r4, #0]
 80133ec:	2203      	movs	r2, #3
 80133ee:	4650      	mov	r0, sl
 80133f0:	f7ec ff06 	bl	8000200 <memchr>
 80133f4:	b140      	cbz	r0, 8013408 <_vfiprintf_r+0x198>
 80133f6:	2340      	movs	r3, #64	; 0x40
 80133f8:	eba0 000a 	sub.w	r0, r0, sl
 80133fc:	fa03 f000 	lsl.w	r0, r3, r0
 8013400:	9b04      	ldr	r3, [sp, #16]
 8013402:	4303      	orrs	r3, r0
 8013404:	3401      	adds	r4, #1
 8013406:	9304      	str	r3, [sp, #16]
 8013408:	f814 1b01 	ldrb.w	r1, [r4], #1
 801340c:	482c      	ldr	r0, [pc, #176]	; (80134c0 <_vfiprintf_r+0x250>)
 801340e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013412:	2206      	movs	r2, #6
 8013414:	f7ec fef4 	bl	8000200 <memchr>
 8013418:	2800      	cmp	r0, #0
 801341a:	d03f      	beq.n	801349c <_vfiprintf_r+0x22c>
 801341c:	4b29      	ldr	r3, [pc, #164]	; (80134c4 <_vfiprintf_r+0x254>)
 801341e:	bb1b      	cbnz	r3, 8013468 <_vfiprintf_r+0x1f8>
 8013420:	9b03      	ldr	r3, [sp, #12]
 8013422:	3307      	adds	r3, #7
 8013424:	f023 0307 	bic.w	r3, r3, #7
 8013428:	3308      	adds	r3, #8
 801342a:	9303      	str	r3, [sp, #12]
 801342c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801342e:	443b      	add	r3, r7
 8013430:	9309      	str	r3, [sp, #36]	; 0x24
 8013432:	e767      	b.n	8013304 <_vfiprintf_r+0x94>
 8013434:	fb0c 3202 	mla	r2, ip, r2, r3
 8013438:	460c      	mov	r4, r1
 801343a:	2001      	movs	r0, #1
 801343c:	e7a5      	b.n	801338a <_vfiprintf_r+0x11a>
 801343e:	2300      	movs	r3, #0
 8013440:	3401      	adds	r4, #1
 8013442:	9305      	str	r3, [sp, #20]
 8013444:	4619      	mov	r1, r3
 8013446:	f04f 0c0a 	mov.w	ip, #10
 801344a:	4620      	mov	r0, r4
 801344c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013450:	3a30      	subs	r2, #48	; 0x30
 8013452:	2a09      	cmp	r2, #9
 8013454:	d903      	bls.n	801345e <_vfiprintf_r+0x1ee>
 8013456:	2b00      	cmp	r3, #0
 8013458:	d0c5      	beq.n	80133e6 <_vfiprintf_r+0x176>
 801345a:	9105      	str	r1, [sp, #20]
 801345c:	e7c3      	b.n	80133e6 <_vfiprintf_r+0x176>
 801345e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013462:	4604      	mov	r4, r0
 8013464:	2301      	movs	r3, #1
 8013466:	e7f0      	b.n	801344a <_vfiprintf_r+0x1da>
 8013468:	ab03      	add	r3, sp, #12
 801346a:	9300      	str	r3, [sp, #0]
 801346c:	462a      	mov	r2, r5
 801346e:	4b16      	ldr	r3, [pc, #88]	; (80134c8 <_vfiprintf_r+0x258>)
 8013470:	a904      	add	r1, sp, #16
 8013472:	4630      	mov	r0, r6
 8013474:	f7fc f84c 	bl	800f510 <_printf_float>
 8013478:	4607      	mov	r7, r0
 801347a:	1c78      	adds	r0, r7, #1
 801347c:	d1d6      	bne.n	801342c <_vfiprintf_r+0x1bc>
 801347e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013480:	07d9      	lsls	r1, r3, #31
 8013482:	d405      	bmi.n	8013490 <_vfiprintf_r+0x220>
 8013484:	89ab      	ldrh	r3, [r5, #12]
 8013486:	059a      	lsls	r2, r3, #22
 8013488:	d402      	bmi.n	8013490 <_vfiprintf_r+0x220>
 801348a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801348c:	f000 faa1 	bl	80139d2 <__retarget_lock_release_recursive>
 8013490:	89ab      	ldrh	r3, [r5, #12]
 8013492:	065b      	lsls	r3, r3, #25
 8013494:	f53f af12 	bmi.w	80132bc <_vfiprintf_r+0x4c>
 8013498:	9809      	ldr	r0, [sp, #36]	; 0x24
 801349a:	e711      	b.n	80132c0 <_vfiprintf_r+0x50>
 801349c:	ab03      	add	r3, sp, #12
 801349e:	9300      	str	r3, [sp, #0]
 80134a0:	462a      	mov	r2, r5
 80134a2:	4b09      	ldr	r3, [pc, #36]	; (80134c8 <_vfiprintf_r+0x258>)
 80134a4:	a904      	add	r1, sp, #16
 80134a6:	4630      	mov	r0, r6
 80134a8:	f7fc fad6 	bl	800fa58 <_printf_i>
 80134ac:	e7e4      	b.n	8013478 <_vfiprintf_r+0x208>
 80134ae:	bf00      	nop
 80134b0:	08015d1c 	.word	0x08015d1c
 80134b4:	08015d3c 	.word	0x08015d3c
 80134b8:	08015cfc 	.word	0x08015cfc
 80134bc:	08015cac 	.word	0x08015cac
 80134c0:	08015cb6 	.word	0x08015cb6
 80134c4:	0800f511 	.word	0x0800f511
 80134c8:	0801324d 	.word	0x0801324d
 80134cc:	08015cb2 	.word	0x08015cb2

080134d0 <__swbuf_r>:
 80134d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134d2:	460e      	mov	r6, r1
 80134d4:	4614      	mov	r4, r2
 80134d6:	4605      	mov	r5, r0
 80134d8:	b118      	cbz	r0, 80134e2 <__swbuf_r+0x12>
 80134da:	6983      	ldr	r3, [r0, #24]
 80134dc:	b90b      	cbnz	r3, 80134e2 <__swbuf_r+0x12>
 80134de:	f000 f9d9 	bl	8013894 <__sinit>
 80134e2:	4b21      	ldr	r3, [pc, #132]	; (8013568 <__swbuf_r+0x98>)
 80134e4:	429c      	cmp	r4, r3
 80134e6:	d12b      	bne.n	8013540 <__swbuf_r+0x70>
 80134e8:	686c      	ldr	r4, [r5, #4]
 80134ea:	69a3      	ldr	r3, [r4, #24]
 80134ec:	60a3      	str	r3, [r4, #8]
 80134ee:	89a3      	ldrh	r3, [r4, #12]
 80134f0:	071a      	lsls	r2, r3, #28
 80134f2:	d52f      	bpl.n	8013554 <__swbuf_r+0x84>
 80134f4:	6923      	ldr	r3, [r4, #16]
 80134f6:	b36b      	cbz	r3, 8013554 <__swbuf_r+0x84>
 80134f8:	6923      	ldr	r3, [r4, #16]
 80134fa:	6820      	ldr	r0, [r4, #0]
 80134fc:	1ac0      	subs	r0, r0, r3
 80134fe:	6963      	ldr	r3, [r4, #20]
 8013500:	b2f6      	uxtb	r6, r6
 8013502:	4283      	cmp	r3, r0
 8013504:	4637      	mov	r7, r6
 8013506:	dc04      	bgt.n	8013512 <__swbuf_r+0x42>
 8013508:	4621      	mov	r1, r4
 801350a:	4628      	mov	r0, r5
 801350c:	f000 f92e 	bl	801376c <_fflush_r>
 8013510:	bb30      	cbnz	r0, 8013560 <__swbuf_r+0x90>
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	3b01      	subs	r3, #1
 8013516:	60a3      	str	r3, [r4, #8]
 8013518:	6823      	ldr	r3, [r4, #0]
 801351a:	1c5a      	adds	r2, r3, #1
 801351c:	6022      	str	r2, [r4, #0]
 801351e:	701e      	strb	r6, [r3, #0]
 8013520:	6963      	ldr	r3, [r4, #20]
 8013522:	3001      	adds	r0, #1
 8013524:	4283      	cmp	r3, r0
 8013526:	d004      	beq.n	8013532 <__swbuf_r+0x62>
 8013528:	89a3      	ldrh	r3, [r4, #12]
 801352a:	07db      	lsls	r3, r3, #31
 801352c:	d506      	bpl.n	801353c <__swbuf_r+0x6c>
 801352e:	2e0a      	cmp	r6, #10
 8013530:	d104      	bne.n	801353c <__swbuf_r+0x6c>
 8013532:	4621      	mov	r1, r4
 8013534:	4628      	mov	r0, r5
 8013536:	f000 f919 	bl	801376c <_fflush_r>
 801353a:	b988      	cbnz	r0, 8013560 <__swbuf_r+0x90>
 801353c:	4638      	mov	r0, r7
 801353e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013540:	4b0a      	ldr	r3, [pc, #40]	; (801356c <__swbuf_r+0x9c>)
 8013542:	429c      	cmp	r4, r3
 8013544:	d101      	bne.n	801354a <__swbuf_r+0x7a>
 8013546:	68ac      	ldr	r4, [r5, #8]
 8013548:	e7cf      	b.n	80134ea <__swbuf_r+0x1a>
 801354a:	4b09      	ldr	r3, [pc, #36]	; (8013570 <__swbuf_r+0xa0>)
 801354c:	429c      	cmp	r4, r3
 801354e:	bf08      	it	eq
 8013550:	68ec      	ldreq	r4, [r5, #12]
 8013552:	e7ca      	b.n	80134ea <__swbuf_r+0x1a>
 8013554:	4621      	mov	r1, r4
 8013556:	4628      	mov	r0, r5
 8013558:	f000 f80c 	bl	8013574 <__swsetup_r>
 801355c:	2800      	cmp	r0, #0
 801355e:	d0cb      	beq.n	80134f8 <__swbuf_r+0x28>
 8013560:	f04f 37ff 	mov.w	r7, #4294967295
 8013564:	e7ea      	b.n	801353c <__swbuf_r+0x6c>
 8013566:	bf00      	nop
 8013568:	08015d1c 	.word	0x08015d1c
 801356c:	08015d3c 	.word	0x08015d3c
 8013570:	08015cfc 	.word	0x08015cfc

08013574 <__swsetup_r>:
 8013574:	4b32      	ldr	r3, [pc, #200]	; (8013640 <__swsetup_r+0xcc>)
 8013576:	b570      	push	{r4, r5, r6, lr}
 8013578:	681d      	ldr	r5, [r3, #0]
 801357a:	4606      	mov	r6, r0
 801357c:	460c      	mov	r4, r1
 801357e:	b125      	cbz	r5, 801358a <__swsetup_r+0x16>
 8013580:	69ab      	ldr	r3, [r5, #24]
 8013582:	b913      	cbnz	r3, 801358a <__swsetup_r+0x16>
 8013584:	4628      	mov	r0, r5
 8013586:	f000 f985 	bl	8013894 <__sinit>
 801358a:	4b2e      	ldr	r3, [pc, #184]	; (8013644 <__swsetup_r+0xd0>)
 801358c:	429c      	cmp	r4, r3
 801358e:	d10f      	bne.n	80135b0 <__swsetup_r+0x3c>
 8013590:	686c      	ldr	r4, [r5, #4]
 8013592:	89a3      	ldrh	r3, [r4, #12]
 8013594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013598:	0719      	lsls	r1, r3, #28
 801359a:	d42c      	bmi.n	80135f6 <__swsetup_r+0x82>
 801359c:	06dd      	lsls	r5, r3, #27
 801359e:	d411      	bmi.n	80135c4 <__swsetup_r+0x50>
 80135a0:	2309      	movs	r3, #9
 80135a2:	6033      	str	r3, [r6, #0]
 80135a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80135a8:	81a3      	strh	r3, [r4, #12]
 80135aa:	f04f 30ff 	mov.w	r0, #4294967295
 80135ae:	e03e      	b.n	801362e <__swsetup_r+0xba>
 80135b0:	4b25      	ldr	r3, [pc, #148]	; (8013648 <__swsetup_r+0xd4>)
 80135b2:	429c      	cmp	r4, r3
 80135b4:	d101      	bne.n	80135ba <__swsetup_r+0x46>
 80135b6:	68ac      	ldr	r4, [r5, #8]
 80135b8:	e7eb      	b.n	8013592 <__swsetup_r+0x1e>
 80135ba:	4b24      	ldr	r3, [pc, #144]	; (801364c <__swsetup_r+0xd8>)
 80135bc:	429c      	cmp	r4, r3
 80135be:	bf08      	it	eq
 80135c0:	68ec      	ldreq	r4, [r5, #12]
 80135c2:	e7e6      	b.n	8013592 <__swsetup_r+0x1e>
 80135c4:	0758      	lsls	r0, r3, #29
 80135c6:	d512      	bpl.n	80135ee <__swsetup_r+0x7a>
 80135c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135ca:	b141      	cbz	r1, 80135de <__swsetup_r+0x6a>
 80135cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135d0:	4299      	cmp	r1, r3
 80135d2:	d002      	beq.n	80135da <__swsetup_r+0x66>
 80135d4:	4630      	mov	r0, r6
 80135d6:	f7ff fb27 	bl	8012c28 <_free_r>
 80135da:	2300      	movs	r3, #0
 80135dc:	6363      	str	r3, [r4, #52]	; 0x34
 80135de:	89a3      	ldrh	r3, [r4, #12]
 80135e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80135e4:	81a3      	strh	r3, [r4, #12]
 80135e6:	2300      	movs	r3, #0
 80135e8:	6063      	str	r3, [r4, #4]
 80135ea:	6923      	ldr	r3, [r4, #16]
 80135ec:	6023      	str	r3, [r4, #0]
 80135ee:	89a3      	ldrh	r3, [r4, #12]
 80135f0:	f043 0308 	orr.w	r3, r3, #8
 80135f4:	81a3      	strh	r3, [r4, #12]
 80135f6:	6923      	ldr	r3, [r4, #16]
 80135f8:	b94b      	cbnz	r3, 801360e <__swsetup_r+0x9a>
 80135fa:	89a3      	ldrh	r3, [r4, #12]
 80135fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013604:	d003      	beq.n	801360e <__swsetup_r+0x9a>
 8013606:	4621      	mov	r1, r4
 8013608:	4630      	mov	r0, r6
 801360a:	f000 fa09 	bl	8013a20 <__smakebuf_r>
 801360e:	89a0      	ldrh	r0, [r4, #12]
 8013610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013614:	f010 0301 	ands.w	r3, r0, #1
 8013618:	d00a      	beq.n	8013630 <__swsetup_r+0xbc>
 801361a:	2300      	movs	r3, #0
 801361c:	60a3      	str	r3, [r4, #8]
 801361e:	6963      	ldr	r3, [r4, #20]
 8013620:	425b      	negs	r3, r3
 8013622:	61a3      	str	r3, [r4, #24]
 8013624:	6923      	ldr	r3, [r4, #16]
 8013626:	b943      	cbnz	r3, 801363a <__swsetup_r+0xc6>
 8013628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801362c:	d1ba      	bne.n	80135a4 <__swsetup_r+0x30>
 801362e:	bd70      	pop	{r4, r5, r6, pc}
 8013630:	0781      	lsls	r1, r0, #30
 8013632:	bf58      	it	pl
 8013634:	6963      	ldrpl	r3, [r4, #20]
 8013636:	60a3      	str	r3, [r4, #8]
 8013638:	e7f4      	b.n	8013624 <__swsetup_r+0xb0>
 801363a:	2000      	movs	r0, #0
 801363c:	e7f7      	b.n	801362e <__swsetup_r+0xba>
 801363e:	bf00      	nop
 8013640:	2000017c 	.word	0x2000017c
 8013644:	08015d1c 	.word	0x08015d1c
 8013648:	08015d3c 	.word	0x08015d3c
 801364c:	08015cfc 	.word	0x08015cfc

08013650 <abort>:
 8013650:	b508      	push	{r3, lr}
 8013652:	2006      	movs	r0, #6
 8013654:	f000 fa54 	bl	8013b00 <raise>
 8013658:	2001      	movs	r0, #1
 801365a:	f7ee fa53 	bl	8001b04 <_exit>
	...

08013660 <__sflush_r>:
 8013660:	898a      	ldrh	r2, [r1, #12]
 8013662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013666:	4605      	mov	r5, r0
 8013668:	0710      	lsls	r0, r2, #28
 801366a:	460c      	mov	r4, r1
 801366c:	d458      	bmi.n	8013720 <__sflush_r+0xc0>
 801366e:	684b      	ldr	r3, [r1, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	dc05      	bgt.n	8013680 <__sflush_r+0x20>
 8013674:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013676:	2b00      	cmp	r3, #0
 8013678:	dc02      	bgt.n	8013680 <__sflush_r+0x20>
 801367a:	2000      	movs	r0, #0
 801367c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013680:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013682:	2e00      	cmp	r6, #0
 8013684:	d0f9      	beq.n	801367a <__sflush_r+0x1a>
 8013686:	2300      	movs	r3, #0
 8013688:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801368c:	682f      	ldr	r7, [r5, #0]
 801368e:	602b      	str	r3, [r5, #0]
 8013690:	d032      	beq.n	80136f8 <__sflush_r+0x98>
 8013692:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013694:	89a3      	ldrh	r3, [r4, #12]
 8013696:	075a      	lsls	r2, r3, #29
 8013698:	d505      	bpl.n	80136a6 <__sflush_r+0x46>
 801369a:	6863      	ldr	r3, [r4, #4]
 801369c:	1ac0      	subs	r0, r0, r3
 801369e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80136a0:	b10b      	cbz	r3, 80136a6 <__sflush_r+0x46>
 80136a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80136a4:	1ac0      	subs	r0, r0, r3
 80136a6:	2300      	movs	r3, #0
 80136a8:	4602      	mov	r2, r0
 80136aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136ac:	6a21      	ldr	r1, [r4, #32]
 80136ae:	4628      	mov	r0, r5
 80136b0:	47b0      	blx	r6
 80136b2:	1c43      	adds	r3, r0, #1
 80136b4:	89a3      	ldrh	r3, [r4, #12]
 80136b6:	d106      	bne.n	80136c6 <__sflush_r+0x66>
 80136b8:	6829      	ldr	r1, [r5, #0]
 80136ba:	291d      	cmp	r1, #29
 80136bc:	d82c      	bhi.n	8013718 <__sflush_r+0xb8>
 80136be:	4a2a      	ldr	r2, [pc, #168]	; (8013768 <__sflush_r+0x108>)
 80136c0:	40ca      	lsrs	r2, r1
 80136c2:	07d6      	lsls	r6, r2, #31
 80136c4:	d528      	bpl.n	8013718 <__sflush_r+0xb8>
 80136c6:	2200      	movs	r2, #0
 80136c8:	6062      	str	r2, [r4, #4]
 80136ca:	04d9      	lsls	r1, r3, #19
 80136cc:	6922      	ldr	r2, [r4, #16]
 80136ce:	6022      	str	r2, [r4, #0]
 80136d0:	d504      	bpl.n	80136dc <__sflush_r+0x7c>
 80136d2:	1c42      	adds	r2, r0, #1
 80136d4:	d101      	bne.n	80136da <__sflush_r+0x7a>
 80136d6:	682b      	ldr	r3, [r5, #0]
 80136d8:	b903      	cbnz	r3, 80136dc <__sflush_r+0x7c>
 80136da:	6560      	str	r0, [r4, #84]	; 0x54
 80136dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136de:	602f      	str	r7, [r5, #0]
 80136e0:	2900      	cmp	r1, #0
 80136e2:	d0ca      	beq.n	801367a <__sflush_r+0x1a>
 80136e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136e8:	4299      	cmp	r1, r3
 80136ea:	d002      	beq.n	80136f2 <__sflush_r+0x92>
 80136ec:	4628      	mov	r0, r5
 80136ee:	f7ff fa9b 	bl	8012c28 <_free_r>
 80136f2:	2000      	movs	r0, #0
 80136f4:	6360      	str	r0, [r4, #52]	; 0x34
 80136f6:	e7c1      	b.n	801367c <__sflush_r+0x1c>
 80136f8:	6a21      	ldr	r1, [r4, #32]
 80136fa:	2301      	movs	r3, #1
 80136fc:	4628      	mov	r0, r5
 80136fe:	47b0      	blx	r6
 8013700:	1c41      	adds	r1, r0, #1
 8013702:	d1c7      	bne.n	8013694 <__sflush_r+0x34>
 8013704:	682b      	ldr	r3, [r5, #0]
 8013706:	2b00      	cmp	r3, #0
 8013708:	d0c4      	beq.n	8013694 <__sflush_r+0x34>
 801370a:	2b1d      	cmp	r3, #29
 801370c:	d001      	beq.n	8013712 <__sflush_r+0xb2>
 801370e:	2b16      	cmp	r3, #22
 8013710:	d101      	bne.n	8013716 <__sflush_r+0xb6>
 8013712:	602f      	str	r7, [r5, #0]
 8013714:	e7b1      	b.n	801367a <__sflush_r+0x1a>
 8013716:	89a3      	ldrh	r3, [r4, #12]
 8013718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801371c:	81a3      	strh	r3, [r4, #12]
 801371e:	e7ad      	b.n	801367c <__sflush_r+0x1c>
 8013720:	690f      	ldr	r7, [r1, #16]
 8013722:	2f00      	cmp	r7, #0
 8013724:	d0a9      	beq.n	801367a <__sflush_r+0x1a>
 8013726:	0793      	lsls	r3, r2, #30
 8013728:	680e      	ldr	r6, [r1, #0]
 801372a:	bf08      	it	eq
 801372c:	694b      	ldreq	r3, [r1, #20]
 801372e:	600f      	str	r7, [r1, #0]
 8013730:	bf18      	it	ne
 8013732:	2300      	movne	r3, #0
 8013734:	eba6 0807 	sub.w	r8, r6, r7
 8013738:	608b      	str	r3, [r1, #8]
 801373a:	f1b8 0f00 	cmp.w	r8, #0
 801373e:	dd9c      	ble.n	801367a <__sflush_r+0x1a>
 8013740:	6a21      	ldr	r1, [r4, #32]
 8013742:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013744:	4643      	mov	r3, r8
 8013746:	463a      	mov	r2, r7
 8013748:	4628      	mov	r0, r5
 801374a:	47b0      	blx	r6
 801374c:	2800      	cmp	r0, #0
 801374e:	dc06      	bgt.n	801375e <__sflush_r+0xfe>
 8013750:	89a3      	ldrh	r3, [r4, #12]
 8013752:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013756:	81a3      	strh	r3, [r4, #12]
 8013758:	f04f 30ff 	mov.w	r0, #4294967295
 801375c:	e78e      	b.n	801367c <__sflush_r+0x1c>
 801375e:	4407      	add	r7, r0
 8013760:	eba8 0800 	sub.w	r8, r8, r0
 8013764:	e7e9      	b.n	801373a <__sflush_r+0xda>
 8013766:	bf00      	nop
 8013768:	20400001 	.word	0x20400001

0801376c <_fflush_r>:
 801376c:	b538      	push	{r3, r4, r5, lr}
 801376e:	690b      	ldr	r3, [r1, #16]
 8013770:	4605      	mov	r5, r0
 8013772:	460c      	mov	r4, r1
 8013774:	b913      	cbnz	r3, 801377c <_fflush_r+0x10>
 8013776:	2500      	movs	r5, #0
 8013778:	4628      	mov	r0, r5
 801377a:	bd38      	pop	{r3, r4, r5, pc}
 801377c:	b118      	cbz	r0, 8013786 <_fflush_r+0x1a>
 801377e:	6983      	ldr	r3, [r0, #24]
 8013780:	b90b      	cbnz	r3, 8013786 <_fflush_r+0x1a>
 8013782:	f000 f887 	bl	8013894 <__sinit>
 8013786:	4b14      	ldr	r3, [pc, #80]	; (80137d8 <_fflush_r+0x6c>)
 8013788:	429c      	cmp	r4, r3
 801378a:	d11b      	bne.n	80137c4 <_fflush_r+0x58>
 801378c:	686c      	ldr	r4, [r5, #4]
 801378e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d0ef      	beq.n	8013776 <_fflush_r+0xa>
 8013796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013798:	07d0      	lsls	r0, r2, #31
 801379a:	d404      	bmi.n	80137a6 <_fflush_r+0x3a>
 801379c:	0599      	lsls	r1, r3, #22
 801379e:	d402      	bmi.n	80137a6 <_fflush_r+0x3a>
 80137a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137a2:	f000 f915 	bl	80139d0 <__retarget_lock_acquire_recursive>
 80137a6:	4628      	mov	r0, r5
 80137a8:	4621      	mov	r1, r4
 80137aa:	f7ff ff59 	bl	8013660 <__sflush_r>
 80137ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80137b0:	07da      	lsls	r2, r3, #31
 80137b2:	4605      	mov	r5, r0
 80137b4:	d4e0      	bmi.n	8013778 <_fflush_r+0xc>
 80137b6:	89a3      	ldrh	r3, [r4, #12]
 80137b8:	059b      	lsls	r3, r3, #22
 80137ba:	d4dd      	bmi.n	8013778 <_fflush_r+0xc>
 80137bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80137be:	f000 f908 	bl	80139d2 <__retarget_lock_release_recursive>
 80137c2:	e7d9      	b.n	8013778 <_fflush_r+0xc>
 80137c4:	4b05      	ldr	r3, [pc, #20]	; (80137dc <_fflush_r+0x70>)
 80137c6:	429c      	cmp	r4, r3
 80137c8:	d101      	bne.n	80137ce <_fflush_r+0x62>
 80137ca:	68ac      	ldr	r4, [r5, #8]
 80137cc:	e7df      	b.n	801378e <_fflush_r+0x22>
 80137ce:	4b04      	ldr	r3, [pc, #16]	; (80137e0 <_fflush_r+0x74>)
 80137d0:	429c      	cmp	r4, r3
 80137d2:	bf08      	it	eq
 80137d4:	68ec      	ldreq	r4, [r5, #12]
 80137d6:	e7da      	b.n	801378e <_fflush_r+0x22>
 80137d8:	08015d1c 	.word	0x08015d1c
 80137dc:	08015d3c 	.word	0x08015d3c
 80137e0:	08015cfc 	.word	0x08015cfc

080137e4 <std>:
 80137e4:	2300      	movs	r3, #0
 80137e6:	b510      	push	{r4, lr}
 80137e8:	4604      	mov	r4, r0
 80137ea:	e9c0 3300 	strd	r3, r3, [r0]
 80137ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137f2:	6083      	str	r3, [r0, #8]
 80137f4:	8181      	strh	r1, [r0, #12]
 80137f6:	6643      	str	r3, [r0, #100]	; 0x64
 80137f8:	81c2      	strh	r2, [r0, #14]
 80137fa:	6183      	str	r3, [r0, #24]
 80137fc:	4619      	mov	r1, r3
 80137fe:	2208      	movs	r2, #8
 8013800:	305c      	adds	r0, #92	; 0x5c
 8013802:	f7fb fddd 	bl	800f3c0 <memset>
 8013806:	4b05      	ldr	r3, [pc, #20]	; (801381c <std+0x38>)
 8013808:	6263      	str	r3, [r4, #36]	; 0x24
 801380a:	4b05      	ldr	r3, [pc, #20]	; (8013820 <std+0x3c>)
 801380c:	62a3      	str	r3, [r4, #40]	; 0x28
 801380e:	4b05      	ldr	r3, [pc, #20]	; (8013824 <std+0x40>)
 8013810:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013812:	4b05      	ldr	r3, [pc, #20]	; (8013828 <std+0x44>)
 8013814:	6224      	str	r4, [r4, #32]
 8013816:	6323      	str	r3, [r4, #48]	; 0x30
 8013818:	bd10      	pop	{r4, pc}
 801381a:	bf00      	nop
 801381c:	08013b39 	.word	0x08013b39
 8013820:	08013b5b 	.word	0x08013b5b
 8013824:	08013b93 	.word	0x08013b93
 8013828:	08013bb7 	.word	0x08013bb7

0801382c <_cleanup_r>:
 801382c:	4901      	ldr	r1, [pc, #4]	; (8013834 <_cleanup_r+0x8>)
 801382e:	f000 b8af 	b.w	8013990 <_fwalk_reent>
 8013832:	bf00      	nop
 8013834:	0801376d 	.word	0x0801376d

08013838 <__sfmoreglue>:
 8013838:	b570      	push	{r4, r5, r6, lr}
 801383a:	2268      	movs	r2, #104	; 0x68
 801383c:	1e4d      	subs	r5, r1, #1
 801383e:	4355      	muls	r5, r2
 8013840:	460e      	mov	r6, r1
 8013842:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013846:	f7ff fa5b 	bl	8012d00 <_malloc_r>
 801384a:	4604      	mov	r4, r0
 801384c:	b140      	cbz	r0, 8013860 <__sfmoreglue+0x28>
 801384e:	2100      	movs	r1, #0
 8013850:	e9c0 1600 	strd	r1, r6, [r0]
 8013854:	300c      	adds	r0, #12
 8013856:	60a0      	str	r0, [r4, #8]
 8013858:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801385c:	f7fb fdb0 	bl	800f3c0 <memset>
 8013860:	4620      	mov	r0, r4
 8013862:	bd70      	pop	{r4, r5, r6, pc}

08013864 <__sfp_lock_acquire>:
 8013864:	4801      	ldr	r0, [pc, #4]	; (801386c <__sfp_lock_acquire+0x8>)
 8013866:	f000 b8b3 	b.w	80139d0 <__retarget_lock_acquire_recursive>
 801386a:	bf00      	nop
 801386c:	20006bb5 	.word	0x20006bb5

08013870 <__sfp_lock_release>:
 8013870:	4801      	ldr	r0, [pc, #4]	; (8013878 <__sfp_lock_release+0x8>)
 8013872:	f000 b8ae 	b.w	80139d2 <__retarget_lock_release_recursive>
 8013876:	bf00      	nop
 8013878:	20006bb5 	.word	0x20006bb5

0801387c <__sinit_lock_acquire>:
 801387c:	4801      	ldr	r0, [pc, #4]	; (8013884 <__sinit_lock_acquire+0x8>)
 801387e:	f000 b8a7 	b.w	80139d0 <__retarget_lock_acquire_recursive>
 8013882:	bf00      	nop
 8013884:	20006bb6 	.word	0x20006bb6

08013888 <__sinit_lock_release>:
 8013888:	4801      	ldr	r0, [pc, #4]	; (8013890 <__sinit_lock_release+0x8>)
 801388a:	f000 b8a2 	b.w	80139d2 <__retarget_lock_release_recursive>
 801388e:	bf00      	nop
 8013890:	20006bb6 	.word	0x20006bb6

08013894 <__sinit>:
 8013894:	b510      	push	{r4, lr}
 8013896:	4604      	mov	r4, r0
 8013898:	f7ff fff0 	bl	801387c <__sinit_lock_acquire>
 801389c:	69a3      	ldr	r3, [r4, #24]
 801389e:	b11b      	cbz	r3, 80138a8 <__sinit+0x14>
 80138a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80138a4:	f7ff bff0 	b.w	8013888 <__sinit_lock_release>
 80138a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80138ac:	6523      	str	r3, [r4, #80]	; 0x50
 80138ae:	4b13      	ldr	r3, [pc, #76]	; (80138fc <__sinit+0x68>)
 80138b0:	4a13      	ldr	r2, [pc, #76]	; (8013900 <__sinit+0x6c>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80138b6:	42a3      	cmp	r3, r4
 80138b8:	bf04      	itt	eq
 80138ba:	2301      	moveq	r3, #1
 80138bc:	61a3      	streq	r3, [r4, #24]
 80138be:	4620      	mov	r0, r4
 80138c0:	f000 f820 	bl	8013904 <__sfp>
 80138c4:	6060      	str	r0, [r4, #4]
 80138c6:	4620      	mov	r0, r4
 80138c8:	f000 f81c 	bl	8013904 <__sfp>
 80138cc:	60a0      	str	r0, [r4, #8]
 80138ce:	4620      	mov	r0, r4
 80138d0:	f000 f818 	bl	8013904 <__sfp>
 80138d4:	2200      	movs	r2, #0
 80138d6:	60e0      	str	r0, [r4, #12]
 80138d8:	2104      	movs	r1, #4
 80138da:	6860      	ldr	r0, [r4, #4]
 80138dc:	f7ff ff82 	bl	80137e4 <std>
 80138e0:	68a0      	ldr	r0, [r4, #8]
 80138e2:	2201      	movs	r2, #1
 80138e4:	2109      	movs	r1, #9
 80138e6:	f7ff ff7d 	bl	80137e4 <std>
 80138ea:	68e0      	ldr	r0, [r4, #12]
 80138ec:	2202      	movs	r2, #2
 80138ee:	2112      	movs	r1, #18
 80138f0:	f7ff ff78 	bl	80137e4 <std>
 80138f4:	2301      	movs	r3, #1
 80138f6:	61a3      	str	r3, [r4, #24]
 80138f8:	e7d2      	b.n	80138a0 <__sinit+0xc>
 80138fa:	bf00      	nop
 80138fc:	080158b8 	.word	0x080158b8
 8013900:	0801382d 	.word	0x0801382d

08013904 <__sfp>:
 8013904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013906:	4607      	mov	r7, r0
 8013908:	f7ff ffac 	bl	8013864 <__sfp_lock_acquire>
 801390c:	4b1e      	ldr	r3, [pc, #120]	; (8013988 <__sfp+0x84>)
 801390e:	681e      	ldr	r6, [r3, #0]
 8013910:	69b3      	ldr	r3, [r6, #24]
 8013912:	b913      	cbnz	r3, 801391a <__sfp+0x16>
 8013914:	4630      	mov	r0, r6
 8013916:	f7ff ffbd 	bl	8013894 <__sinit>
 801391a:	3648      	adds	r6, #72	; 0x48
 801391c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013920:	3b01      	subs	r3, #1
 8013922:	d503      	bpl.n	801392c <__sfp+0x28>
 8013924:	6833      	ldr	r3, [r6, #0]
 8013926:	b30b      	cbz	r3, 801396c <__sfp+0x68>
 8013928:	6836      	ldr	r6, [r6, #0]
 801392a:	e7f7      	b.n	801391c <__sfp+0x18>
 801392c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013930:	b9d5      	cbnz	r5, 8013968 <__sfp+0x64>
 8013932:	4b16      	ldr	r3, [pc, #88]	; (801398c <__sfp+0x88>)
 8013934:	60e3      	str	r3, [r4, #12]
 8013936:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801393a:	6665      	str	r5, [r4, #100]	; 0x64
 801393c:	f000 f847 	bl	80139ce <__retarget_lock_init_recursive>
 8013940:	f7ff ff96 	bl	8013870 <__sfp_lock_release>
 8013944:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013948:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801394c:	6025      	str	r5, [r4, #0]
 801394e:	61a5      	str	r5, [r4, #24]
 8013950:	2208      	movs	r2, #8
 8013952:	4629      	mov	r1, r5
 8013954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013958:	f7fb fd32 	bl	800f3c0 <memset>
 801395c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013964:	4620      	mov	r0, r4
 8013966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013968:	3468      	adds	r4, #104	; 0x68
 801396a:	e7d9      	b.n	8013920 <__sfp+0x1c>
 801396c:	2104      	movs	r1, #4
 801396e:	4638      	mov	r0, r7
 8013970:	f7ff ff62 	bl	8013838 <__sfmoreglue>
 8013974:	4604      	mov	r4, r0
 8013976:	6030      	str	r0, [r6, #0]
 8013978:	2800      	cmp	r0, #0
 801397a:	d1d5      	bne.n	8013928 <__sfp+0x24>
 801397c:	f7ff ff78 	bl	8013870 <__sfp_lock_release>
 8013980:	230c      	movs	r3, #12
 8013982:	603b      	str	r3, [r7, #0]
 8013984:	e7ee      	b.n	8013964 <__sfp+0x60>
 8013986:	bf00      	nop
 8013988:	080158b8 	.word	0x080158b8
 801398c:	ffff0001 	.word	0xffff0001

08013990 <_fwalk_reent>:
 8013990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013994:	4606      	mov	r6, r0
 8013996:	4688      	mov	r8, r1
 8013998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801399c:	2700      	movs	r7, #0
 801399e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80139a2:	f1b9 0901 	subs.w	r9, r9, #1
 80139a6:	d505      	bpl.n	80139b4 <_fwalk_reent+0x24>
 80139a8:	6824      	ldr	r4, [r4, #0]
 80139aa:	2c00      	cmp	r4, #0
 80139ac:	d1f7      	bne.n	801399e <_fwalk_reent+0xe>
 80139ae:	4638      	mov	r0, r7
 80139b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b4:	89ab      	ldrh	r3, [r5, #12]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d907      	bls.n	80139ca <_fwalk_reent+0x3a>
 80139ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139be:	3301      	adds	r3, #1
 80139c0:	d003      	beq.n	80139ca <_fwalk_reent+0x3a>
 80139c2:	4629      	mov	r1, r5
 80139c4:	4630      	mov	r0, r6
 80139c6:	47c0      	blx	r8
 80139c8:	4307      	orrs	r7, r0
 80139ca:	3568      	adds	r5, #104	; 0x68
 80139cc:	e7e9      	b.n	80139a2 <_fwalk_reent+0x12>

080139ce <__retarget_lock_init_recursive>:
 80139ce:	4770      	bx	lr

080139d0 <__retarget_lock_acquire_recursive>:
 80139d0:	4770      	bx	lr

080139d2 <__retarget_lock_release_recursive>:
 80139d2:	4770      	bx	lr

080139d4 <__swhatbuf_r>:
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	460e      	mov	r6, r1
 80139d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139dc:	2900      	cmp	r1, #0
 80139de:	b096      	sub	sp, #88	; 0x58
 80139e0:	4614      	mov	r4, r2
 80139e2:	461d      	mov	r5, r3
 80139e4:	da08      	bge.n	80139f8 <__swhatbuf_r+0x24>
 80139e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80139ea:	2200      	movs	r2, #0
 80139ec:	602a      	str	r2, [r5, #0]
 80139ee:	061a      	lsls	r2, r3, #24
 80139f0:	d410      	bmi.n	8013a14 <__swhatbuf_r+0x40>
 80139f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80139f6:	e00e      	b.n	8013a16 <__swhatbuf_r+0x42>
 80139f8:	466a      	mov	r2, sp
 80139fa:	f000 f903 	bl	8013c04 <_fstat_r>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	dbf1      	blt.n	80139e6 <__swhatbuf_r+0x12>
 8013a02:	9a01      	ldr	r2, [sp, #4]
 8013a04:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a08:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a0c:	425a      	negs	r2, r3
 8013a0e:	415a      	adcs	r2, r3
 8013a10:	602a      	str	r2, [r5, #0]
 8013a12:	e7ee      	b.n	80139f2 <__swhatbuf_r+0x1e>
 8013a14:	2340      	movs	r3, #64	; 0x40
 8013a16:	2000      	movs	r0, #0
 8013a18:	6023      	str	r3, [r4, #0]
 8013a1a:	b016      	add	sp, #88	; 0x58
 8013a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013a20 <__smakebuf_r>:
 8013a20:	898b      	ldrh	r3, [r1, #12]
 8013a22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a24:	079d      	lsls	r5, r3, #30
 8013a26:	4606      	mov	r6, r0
 8013a28:	460c      	mov	r4, r1
 8013a2a:	d507      	bpl.n	8013a3c <__smakebuf_r+0x1c>
 8013a2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013a30:	6023      	str	r3, [r4, #0]
 8013a32:	6123      	str	r3, [r4, #16]
 8013a34:	2301      	movs	r3, #1
 8013a36:	6163      	str	r3, [r4, #20]
 8013a38:	b002      	add	sp, #8
 8013a3a:	bd70      	pop	{r4, r5, r6, pc}
 8013a3c:	ab01      	add	r3, sp, #4
 8013a3e:	466a      	mov	r2, sp
 8013a40:	f7ff ffc8 	bl	80139d4 <__swhatbuf_r>
 8013a44:	9900      	ldr	r1, [sp, #0]
 8013a46:	4605      	mov	r5, r0
 8013a48:	4630      	mov	r0, r6
 8013a4a:	f7ff f959 	bl	8012d00 <_malloc_r>
 8013a4e:	b948      	cbnz	r0, 8013a64 <__smakebuf_r+0x44>
 8013a50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a54:	059a      	lsls	r2, r3, #22
 8013a56:	d4ef      	bmi.n	8013a38 <__smakebuf_r+0x18>
 8013a58:	f023 0303 	bic.w	r3, r3, #3
 8013a5c:	f043 0302 	orr.w	r3, r3, #2
 8013a60:	81a3      	strh	r3, [r4, #12]
 8013a62:	e7e3      	b.n	8013a2c <__smakebuf_r+0xc>
 8013a64:	4b0d      	ldr	r3, [pc, #52]	; (8013a9c <__smakebuf_r+0x7c>)
 8013a66:	62b3      	str	r3, [r6, #40]	; 0x28
 8013a68:	89a3      	ldrh	r3, [r4, #12]
 8013a6a:	6020      	str	r0, [r4, #0]
 8013a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a70:	81a3      	strh	r3, [r4, #12]
 8013a72:	9b00      	ldr	r3, [sp, #0]
 8013a74:	6163      	str	r3, [r4, #20]
 8013a76:	9b01      	ldr	r3, [sp, #4]
 8013a78:	6120      	str	r0, [r4, #16]
 8013a7a:	b15b      	cbz	r3, 8013a94 <__smakebuf_r+0x74>
 8013a7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a80:	4630      	mov	r0, r6
 8013a82:	f000 f8d1 	bl	8013c28 <_isatty_r>
 8013a86:	b128      	cbz	r0, 8013a94 <__smakebuf_r+0x74>
 8013a88:	89a3      	ldrh	r3, [r4, #12]
 8013a8a:	f023 0303 	bic.w	r3, r3, #3
 8013a8e:	f043 0301 	orr.w	r3, r3, #1
 8013a92:	81a3      	strh	r3, [r4, #12]
 8013a94:	89a0      	ldrh	r0, [r4, #12]
 8013a96:	4305      	orrs	r5, r0
 8013a98:	81a5      	strh	r5, [r4, #12]
 8013a9a:	e7cd      	b.n	8013a38 <__smakebuf_r+0x18>
 8013a9c:	0801382d 	.word	0x0801382d

08013aa0 <_malloc_usable_size_r>:
 8013aa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013aa4:	1f18      	subs	r0, r3, #4
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	bfbc      	itt	lt
 8013aaa:	580b      	ldrlt	r3, [r1, r0]
 8013aac:	18c0      	addlt	r0, r0, r3
 8013aae:	4770      	bx	lr

08013ab0 <_raise_r>:
 8013ab0:	291f      	cmp	r1, #31
 8013ab2:	b538      	push	{r3, r4, r5, lr}
 8013ab4:	4604      	mov	r4, r0
 8013ab6:	460d      	mov	r5, r1
 8013ab8:	d904      	bls.n	8013ac4 <_raise_r+0x14>
 8013aba:	2316      	movs	r3, #22
 8013abc:	6003      	str	r3, [r0, #0]
 8013abe:	f04f 30ff 	mov.w	r0, #4294967295
 8013ac2:	bd38      	pop	{r3, r4, r5, pc}
 8013ac4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013ac6:	b112      	cbz	r2, 8013ace <_raise_r+0x1e>
 8013ac8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013acc:	b94b      	cbnz	r3, 8013ae2 <_raise_r+0x32>
 8013ace:	4620      	mov	r0, r4
 8013ad0:	f000 f830 	bl	8013b34 <_getpid_r>
 8013ad4:	462a      	mov	r2, r5
 8013ad6:	4601      	mov	r1, r0
 8013ad8:	4620      	mov	r0, r4
 8013ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ade:	f000 b817 	b.w	8013b10 <_kill_r>
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d00a      	beq.n	8013afc <_raise_r+0x4c>
 8013ae6:	1c59      	adds	r1, r3, #1
 8013ae8:	d103      	bne.n	8013af2 <_raise_r+0x42>
 8013aea:	2316      	movs	r3, #22
 8013aec:	6003      	str	r3, [r0, #0]
 8013aee:	2001      	movs	r0, #1
 8013af0:	e7e7      	b.n	8013ac2 <_raise_r+0x12>
 8013af2:	2400      	movs	r4, #0
 8013af4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013af8:	4628      	mov	r0, r5
 8013afa:	4798      	blx	r3
 8013afc:	2000      	movs	r0, #0
 8013afe:	e7e0      	b.n	8013ac2 <_raise_r+0x12>

08013b00 <raise>:
 8013b00:	4b02      	ldr	r3, [pc, #8]	; (8013b0c <raise+0xc>)
 8013b02:	4601      	mov	r1, r0
 8013b04:	6818      	ldr	r0, [r3, #0]
 8013b06:	f7ff bfd3 	b.w	8013ab0 <_raise_r>
 8013b0a:	bf00      	nop
 8013b0c:	2000017c 	.word	0x2000017c

08013b10 <_kill_r>:
 8013b10:	b538      	push	{r3, r4, r5, lr}
 8013b12:	4d07      	ldr	r5, [pc, #28]	; (8013b30 <_kill_r+0x20>)
 8013b14:	2300      	movs	r3, #0
 8013b16:	4604      	mov	r4, r0
 8013b18:	4608      	mov	r0, r1
 8013b1a:	4611      	mov	r1, r2
 8013b1c:	602b      	str	r3, [r5, #0]
 8013b1e:	f7ed ffe1 	bl	8001ae4 <_kill>
 8013b22:	1c43      	adds	r3, r0, #1
 8013b24:	d102      	bne.n	8013b2c <_kill_r+0x1c>
 8013b26:	682b      	ldr	r3, [r5, #0]
 8013b28:	b103      	cbz	r3, 8013b2c <_kill_r+0x1c>
 8013b2a:	6023      	str	r3, [r4, #0]
 8013b2c:	bd38      	pop	{r3, r4, r5, pc}
 8013b2e:	bf00      	nop
 8013b30:	20006bb0 	.word	0x20006bb0

08013b34 <_getpid_r>:
 8013b34:	f7ed bfce 	b.w	8001ad4 <_getpid>

08013b38 <__sread>:
 8013b38:	b510      	push	{r4, lr}
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b40:	f000 f894 	bl	8013c6c <_read_r>
 8013b44:	2800      	cmp	r0, #0
 8013b46:	bfab      	itete	ge
 8013b48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b4a:	89a3      	ldrhlt	r3, [r4, #12]
 8013b4c:	181b      	addge	r3, r3, r0
 8013b4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b52:	bfac      	ite	ge
 8013b54:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b56:	81a3      	strhlt	r3, [r4, #12]
 8013b58:	bd10      	pop	{r4, pc}

08013b5a <__swrite>:
 8013b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b5e:	461f      	mov	r7, r3
 8013b60:	898b      	ldrh	r3, [r1, #12]
 8013b62:	05db      	lsls	r3, r3, #23
 8013b64:	4605      	mov	r5, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	4616      	mov	r6, r2
 8013b6a:	d505      	bpl.n	8013b78 <__swrite+0x1e>
 8013b6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b70:	2302      	movs	r3, #2
 8013b72:	2200      	movs	r2, #0
 8013b74:	f000 f868 	bl	8013c48 <_lseek_r>
 8013b78:	89a3      	ldrh	r3, [r4, #12]
 8013b7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013b82:	81a3      	strh	r3, [r4, #12]
 8013b84:	4632      	mov	r2, r6
 8013b86:	463b      	mov	r3, r7
 8013b88:	4628      	mov	r0, r5
 8013b8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8e:	f000 b817 	b.w	8013bc0 <_write_r>

08013b92 <__sseek>:
 8013b92:	b510      	push	{r4, lr}
 8013b94:	460c      	mov	r4, r1
 8013b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b9a:	f000 f855 	bl	8013c48 <_lseek_r>
 8013b9e:	1c43      	adds	r3, r0, #1
 8013ba0:	89a3      	ldrh	r3, [r4, #12]
 8013ba2:	bf15      	itete	ne
 8013ba4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ba6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013baa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013bae:	81a3      	strheq	r3, [r4, #12]
 8013bb0:	bf18      	it	ne
 8013bb2:	81a3      	strhne	r3, [r4, #12]
 8013bb4:	bd10      	pop	{r4, pc}

08013bb6 <__sclose>:
 8013bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bba:	f000 b813 	b.w	8013be4 <_close_r>
	...

08013bc0 <_write_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	; (8013be0 <_write_r+0x20>)
 8013bc4:	4604      	mov	r4, r0
 8013bc6:	4608      	mov	r0, r1
 8013bc8:	4611      	mov	r1, r2
 8013bca:	2200      	movs	r2, #0
 8013bcc:	602a      	str	r2, [r5, #0]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f7ed ffbf 	bl	8001b52 <_write>
 8013bd4:	1c43      	adds	r3, r0, #1
 8013bd6:	d102      	bne.n	8013bde <_write_r+0x1e>
 8013bd8:	682b      	ldr	r3, [r5, #0]
 8013bda:	b103      	cbz	r3, 8013bde <_write_r+0x1e>
 8013bdc:	6023      	str	r3, [r4, #0]
 8013bde:	bd38      	pop	{r3, r4, r5, pc}
 8013be0:	20006bb0 	.word	0x20006bb0

08013be4 <_close_r>:
 8013be4:	b538      	push	{r3, r4, r5, lr}
 8013be6:	4d06      	ldr	r5, [pc, #24]	; (8013c00 <_close_r+0x1c>)
 8013be8:	2300      	movs	r3, #0
 8013bea:	4604      	mov	r4, r0
 8013bec:	4608      	mov	r0, r1
 8013bee:	602b      	str	r3, [r5, #0]
 8013bf0:	f7ed ffcb 	bl	8001b8a <_close>
 8013bf4:	1c43      	adds	r3, r0, #1
 8013bf6:	d102      	bne.n	8013bfe <_close_r+0x1a>
 8013bf8:	682b      	ldr	r3, [r5, #0]
 8013bfa:	b103      	cbz	r3, 8013bfe <_close_r+0x1a>
 8013bfc:	6023      	str	r3, [r4, #0]
 8013bfe:	bd38      	pop	{r3, r4, r5, pc}
 8013c00:	20006bb0 	.word	0x20006bb0

08013c04 <_fstat_r>:
 8013c04:	b538      	push	{r3, r4, r5, lr}
 8013c06:	4d07      	ldr	r5, [pc, #28]	; (8013c24 <_fstat_r+0x20>)
 8013c08:	2300      	movs	r3, #0
 8013c0a:	4604      	mov	r4, r0
 8013c0c:	4608      	mov	r0, r1
 8013c0e:	4611      	mov	r1, r2
 8013c10:	602b      	str	r3, [r5, #0]
 8013c12:	f7ed ffc6 	bl	8001ba2 <_fstat>
 8013c16:	1c43      	adds	r3, r0, #1
 8013c18:	d102      	bne.n	8013c20 <_fstat_r+0x1c>
 8013c1a:	682b      	ldr	r3, [r5, #0]
 8013c1c:	b103      	cbz	r3, 8013c20 <_fstat_r+0x1c>
 8013c1e:	6023      	str	r3, [r4, #0]
 8013c20:	bd38      	pop	{r3, r4, r5, pc}
 8013c22:	bf00      	nop
 8013c24:	20006bb0 	.word	0x20006bb0

08013c28 <_isatty_r>:
 8013c28:	b538      	push	{r3, r4, r5, lr}
 8013c2a:	4d06      	ldr	r5, [pc, #24]	; (8013c44 <_isatty_r+0x1c>)
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	4604      	mov	r4, r0
 8013c30:	4608      	mov	r0, r1
 8013c32:	602b      	str	r3, [r5, #0]
 8013c34:	f7ed ffc5 	bl	8001bc2 <_isatty>
 8013c38:	1c43      	adds	r3, r0, #1
 8013c3a:	d102      	bne.n	8013c42 <_isatty_r+0x1a>
 8013c3c:	682b      	ldr	r3, [r5, #0]
 8013c3e:	b103      	cbz	r3, 8013c42 <_isatty_r+0x1a>
 8013c40:	6023      	str	r3, [r4, #0]
 8013c42:	bd38      	pop	{r3, r4, r5, pc}
 8013c44:	20006bb0 	.word	0x20006bb0

08013c48 <_lseek_r>:
 8013c48:	b538      	push	{r3, r4, r5, lr}
 8013c4a:	4d07      	ldr	r5, [pc, #28]	; (8013c68 <_lseek_r+0x20>)
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4608      	mov	r0, r1
 8013c50:	4611      	mov	r1, r2
 8013c52:	2200      	movs	r2, #0
 8013c54:	602a      	str	r2, [r5, #0]
 8013c56:	461a      	mov	r2, r3
 8013c58:	f7ed ffbe 	bl	8001bd8 <_lseek>
 8013c5c:	1c43      	adds	r3, r0, #1
 8013c5e:	d102      	bne.n	8013c66 <_lseek_r+0x1e>
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	b103      	cbz	r3, 8013c66 <_lseek_r+0x1e>
 8013c64:	6023      	str	r3, [r4, #0]
 8013c66:	bd38      	pop	{r3, r4, r5, pc}
 8013c68:	20006bb0 	.word	0x20006bb0

08013c6c <_read_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4d07      	ldr	r5, [pc, #28]	; (8013c8c <_read_r+0x20>)
 8013c70:	4604      	mov	r4, r0
 8013c72:	4608      	mov	r0, r1
 8013c74:	4611      	mov	r1, r2
 8013c76:	2200      	movs	r2, #0
 8013c78:	602a      	str	r2, [r5, #0]
 8013c7a:	461a      	mov	r2, r3
 8013c7c:	f7ed ff4c 	bl	8001b18 <_read>
 8013c80:	1c43      	adds	r3, r0, #1
 8013c82:	d102      	bne.n	8013c8a <_read_r+0x1e>
 8013c84:	682b      	ldr	r3, [r5, #0]
 8013c86:	b103      	cbz	r3, 8013c8a <_read_r+0x1e>
 8013c88:	6023      	str	r3, [r4, #0]
 8013c8a:	bd38      	pop	{r3, r4, r5, pc}
 8013c8c:	20006bb0 	.word	0x20006bb0

08013c90 <_init>:
 8013c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c92:	bf00      	nop
 8013c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c96:	bc08      	pop	{r3}
 8013c98:	469e      	mov	lr, r3
 8013c9a:	4770      	bx	lr

08013c9c <_fini>:
 8013c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c9e:	bf00      	nop
 8013ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013ca2:	bc08      	pop	{r3}
 8013ca4:	469e      	mov	lr, r3
 8013ca6:	4770      	bx	lr
